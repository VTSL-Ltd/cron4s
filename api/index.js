Index.PACKAGES = {"cron4s.expr" : [{"name" : "cron4s.expr.AnyNode", "shortDescription" : "", "object" : "cron4s\/expr\/AnyNode$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "cron4s.expr.AnyNode.toString", "link" : "cron4s\/expr\/AnyNode.html#toString():String", "kind" : "def"}, {"label" : "range", "tail" : ": IndexedSeq[Int]", "member" : "cron4s.expr.AnyNode.range", "link" : "cron4s\/expr\/AnyNode.html#range:IndexedSeq[Int]", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "cron4s.expr.AnyNode.hashCode", "link" : "cron4s\/expr\/AnyNode.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "cron4s.expr.AnyNode.equals", "link" : "cron4s\/expr\/AnyNode.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "unit", "tail" : ": CronUnit[F]", "member" : "cron4s.expr.AnyNode.unit", "link" : "cron4s\/expr\/AnyNode.html#unit:cron4s.CronUnit[F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/AnyNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/AnyNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/AnyNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/AnyNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/AnyNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/AnyNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/AnyNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/AnyNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/AnyNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/AnyNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/AnyNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/AnyNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/AnyNode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/AnyNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/AnyNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/AnyNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "anyNodeInstance", "tail" : "(): FieldExpr[AnyNode, F]", "member" : "cron4s.expr.AnyNode.anyNodeInstance", "link" : "cron4s\/expr\/AnyNode$.html#anyNodeInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.AnyNode,F]", "kind" : "implicit def"}, {"label" : "anyNodeShow", "tail" : "(): Show[AnyNode[F]]", "member" : "cron4s.expr.AnyNode.anyNodeShow", "link" : "cron4s\/expr\/AnyNode$.html#anyNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.AnyNode[F]]", "kind" : "implicit def"}, {"label" : "anyNodeEq", "tail" : "(): Eq[AnyNode[F]]", "member" : "cron4s.expr.AnyNode.anyNodeEq", "link" : "cron4s\/expr\/AnyNode$.html#anyNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.AnyNode[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(unit: CronUnit[F]): AnyNode[F]", "member" : "cron4s.expr.AnyNode.apply", "link" : "cron4s\/expr\/AnyNode$.html#apply[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):cron4s.expr.AnyNode[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/AnyNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/AnyNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/AnyNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/AnyNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/AnyNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/AnyNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/AnyNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/AnyNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/AnyNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/AnyNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/AnyNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/AnyNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/AnyNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/AnyNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/AnyNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/AnyNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/AnyNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/AnyNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/AnyNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/AnyNode.html", "kind" : "class"}, {"name" : "cron4s.expr.BetweenNode", "shortDescription" : "", "object" : "cron4s\/expr\/BetweenNode$.html", "members_class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.BetweenNode.toString", "link" : "cron4s\/expr\/BetweenNode.html#toString:String", "kind" : "lazy val"}, {"label" : "range", "tail" : ": IndexedSeq[Int]", "member" : "cron4s.expr.BetweenNode.range", "link" : "cron4s\/expr\/BetweenNode.html#range:IndexedSeq[Int]", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "cron4s.expr.BetweenNode.hashCode", "link" : "cron4s\/expr\/BetweenNode.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "cron4s.expr.BetweenNode.equals", "link" : "cron4s\/expr\/BetweenNode.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "unit", "tail" : ": CronUnit[F]", "member" : "cron4s.expr.BetweenNode.unit", "link" : "cron4s\/expr\/BetweenNode.html#unit:cron4s.CronUnit[F]", "kind" : "val"}, {"label" : "end", "tail" : ": ConstNode[F]", "member" : "cron4s.expr.BetweenNode.end", "link" : "cron4s\/expr\/BetweenNode.html#end:cron4s.expr.ConstNode[F]", "kind" : "val"}, {"label" : "begin", "tail" : ": ConstNode[F]", "member" : "cron4s.expr.BetweenNode.begin", "link" : "cron4s\/expr\/BetweenNode.html#begin:cron4s.expr.ConstNode[F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/BetweenNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/BetweenNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/BetweenNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/BetweenNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/BetweenNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/BetweenNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/BetweenNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/BetweenNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/BetweenNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/BetweenNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/BetweenNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/BetweenNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/BetweenNode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/BetweenNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/BetweenNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/BetweenNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "betweenNodeInstance", "tail" : "(elemExpr: FieldExpr[ConstNode, F]): FieldExpr[BetweenNode, F]", "member" : "cron4s.expr.BetweenNode.betweenNodeInstance", "link" : "cron4s\/expr\/BetweenNode$.html#betweenNodeInstance[F<:cron4s.CronField](implicitelemExpr:cron4s.expr.FieldExpr[cron4s.expr.ConstNode,F]):cron4s.expr.FieldExpr[cron4s.expr.BetweenNode,F]", "kind" : "implicit def"}, {"label" : "betweenNodeShow", "tail" : "(): Show[BetweenNode[F]]", "member" : "cron4s.expr.BetweenNode.betweenNodeShow", "link" : "cron4s\/expr\/BetweenNode$.html#betweenNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.BetweenNode[F]]", "kind" : "implicit def"}, {"label" : "betweenNodeEq", "tail" : "(): Eq[BetweenNode[F]]", "member" : "cron4s.expr.BetweenNode.betweenNodeEq", "link" : "cron4s\/expr\/BetweenNode$.html#betweenNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.BetweenNode[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(begin: ConstNode[F], end: ConstNode[F])(unit: CronUnit[F]): BetweenNode[F]", "member" : "cron4s.expr.BetweenNode.apply", "link" : "cron4s\/expr\/BetweenNode$.html#apply[F<:cron4s.CronField](begin:cron4s.expr.ConstNode[F],end:cron4s.expr.ConstNode[F])(implicitunit:cron4s.CronUnit[F]):cron4s.expr.BetweenNode[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/BetweenNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/BetweenNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/BetweenNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/BetweenNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/BetweenNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/BetweenNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/BetweenNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/BetweenNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/BetweenNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/BetweenNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/BetweenNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/BetweenNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/BetweenNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/BetweenNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/BetweenNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/BetweenNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/BetweenNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/BetweenNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/BetweenNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/BetweenNode.html", "kind" : "class"}, {"name" : "cron4s.expr.ConstNode", "shortDescription" : "", "object" : "cron4s\/expr\/ConstNode$.html", "members_class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.ConstNode.toString", "link" : "cron4s\/expr\/ConstNode.html#toString:String", "kind" : "lazy val"}, {"label" : "range", "tail" : ": IndexedSeq[Int]", "member" : "cron4s.expr.ConstNode.range", "link" : "cron4s\/expr\/ConstNode.html#range:IndexedSeq[Int]", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "cron4s.expr.ConstNode.hashCode", "link" : "cron4s\/expr\/ConstNode.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "cron4s.expr.ConstNode.equals", "link" : "cron4s\/expr\/ConstNode.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "unit", "tail" : ": CronUnit[F]", "member" : "cron4s.expr.ConstNode.unit", "link" : "cron4s\/expr\/ConstNode.html#unit:cron4s.CronUnit[F]", "kind" : "val"}, {"label" : "textValue", "tail" : ": Option[String]", "member" : "cron4s.expr.ConstNode.textValue", "link" : "cron4s\/expr\/ConstNode.html#textValue:Option[String]", "kind" : "val"}, {"label" : "value", "tail" : ": Int", "member" : "cron4s.expr.ConstNode.value", "link" : "cron4s\/expr\/ConstNode.html#value:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/ConstNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/ConstNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/ConstNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/ConstNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/ConstNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/ConstNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/ConstNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/ConstNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/ConstNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/ConstNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/ConstNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/ConstNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/ConstNode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/ConstNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/ConstNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/ConstNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "constNodeInstance", "tail" : "(): FieldExpr[ConstNode, F]", "member" : "cron4s.expr.ConstNode.constNodeInstance", "link" : "cron4s\/expr\/ConstNode$.html#constNodeInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.ConstNode,F]", "kind" : "implicit def"}, {"label" : "constNodeShow", "tail" : "(): Show[ConstNode[F]]", "member" : "cron4s.expr.ConstNode.constNodeShow", "link" : "cron4s\/expr\/ConstNode$.html#constNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.ConstNode[F]]", "kind" : "implicit def"}, {"label" : "constNodeEq", "tail" : "(): Eq[ConstNode[F]]", "member" : "cron4s.expr.ConstNode.constNodeEq", "link" : "cron4s\/expr\/ConstNode$.html#constNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.ConstNode[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(value: Int, textValue: Option[String])(unit: CronUnit[F]): ConstNode[F]", "member" : "cron4s.expr.ConstNode.apply", "link" : "cron4s\/expr\/ConstNode$.html#apply[F<:cron4s.CronField](value:Int,textValue:Option[String])(implicitunit:cron4s.CronUnit[F]):cron4s.expr.ConstNode[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/ConstNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/ConstNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/ConstNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/ConstNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/ConstNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/ConstNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/ConstNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/ConstNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/ConstNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/ConstNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/ConstNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/ConstNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/ConstNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/ConstNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/ConstNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/ConstNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/ConstNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/ConstNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/ConstNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/ConstNode.html", "kind" : "class"}, {"name" : "cron4s.expr.CronExpr", "shortDescription" : "Representation of a valid CRON expression as an AST", "object" : "cron4s\/expr\/CronExpr$.html", "members_object" : [{"label" : "CronExprShow", "tail" : ": Show[CronExpr]", "member" : "cron4s.expr.CronExpr.CronExprShow", "link" : "cron4s\/expr\/CronExpr$.html#CronExprShow:cats.Show[cron4s.expr.CronExpr]", "kind" : "implicit val"}, {"label" : "CronExprEq", "tail" : ": Eq[CronExpr]", "member" : "cron4s.expr.CronExpr.CronExprEq", "link" : "cron4s\/expr\/CronExpr$.html#CronExprEq:cats.Eq[cron4s.expr.CronExpr]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/CronExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/CronExpr$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/CronExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/CronExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/CronExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/CronExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/CronExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/CronExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/CronExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/CronExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/CronExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/CronExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/CronExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/CronExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/CronExpr$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/CronExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/CronExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/CronExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/CronExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.CronExpr.toString", "link" : "cron4s\/expr\/CronExpr.html#toString:String", "kind" : "lazy val"}, {"label" : "datePart", "tail" : ": DateCronExpr", "member" : "cron4s.expr.CronExpr.datePart", "link" : "cron4s\/expr\/CronExpr.html#datePart:cron4s.expr.DateCronExpr", "kind" : "lazy val"}, {"label" : "timePart", "tail" : ": TimeCronExpr", "member" : "cron4s.expr.CronExpr.timePart", "link" : "cron4s\/expr\/CronExpr.html#timePart:cron4s.expr.TimeCronExpr", "kind" : "lazy val"}, {"member" : "cron4s.expr.CronExpr#<init>", "error" : "unsupported entity"}, {"label" : "daysOfWeek", "tail" : ": DaysOfWeekNode", "member" : "cron4s.expr.CronExpr.daysOfWeek", "link" : "cron4s\/expr\/CronExpr.html#daysOfWeek:cron4s.expr.DaysOfWeekNode", "kind" : "val"}, {"label" : "months", "tail" : ": MonthsNode", "member" : "cron4s.expr.CronExpr.months", "link" : "cron4s\/expr\/CronExpr.html#months:cron4s.expr.MonthsNode", "kind" : "val"}, {"label" : "daysOfMonth", "tail" : ": DaysOfMonthNode", "member" : "cron4s.expr.CronExpr.daysOfMonth", "link" : "cron4s\/expr\/CronExpr.html#daysOfMonth:cron4s.expr.DaysOfMonthNode", "kind" : "val"}, {"label" : "hours", "tail" : ": HoursNode", "member" : "cron4s.expr.CronExpr.hours", "link" : "cron4s\/expr\/CronExpr.html#hours:cron4s.expr.HoursNode", "kind" : "val"}, {"label" : "minutes", "tail" : ": MinutesNode", "member" : "cron4s.expr.CronExpr.minutes", "link" : "cron4s\/expr\/CronExpr.html#minutes:cron4s.expr.MinutesNode", "kind" : "val"}, {"label" : "seconds", "tail" : ": SecondsNode", "member" : "cron4s.expr.CronExpr.seconds", "link" : "cron4s\/expr\/CronExpr.html#seconds:cron4s.expr.SecondsNode", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/expr\/CronExpr.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/CronExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/CronExpr.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/CronExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/CronExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/CronExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/CronExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/CronExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/CronExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/CronExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/CronExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/CronExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/CronExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/CronExpr.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/CronExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/CronExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/CronExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/expr\/CronExpr.html", "kind" : "case class"}, {"name" : "cron4s.expr.DateCronExpr", "shortDescription" : "", "object" : "cron4s\/expr\/DateCronExpr$.html", "members_object" : [{"label" : "dateCronShow", "tail" : ": Show[DateCronExpr]", "member" : "cron4s.expr.DateCronExpr.dateCronShow", "link" : "cron4s\/expr\/DateCronExpr$.html#dateCronShow:cats.Show[cron4s.expr.DateCronExpr]", "kind" : "implicit val"}, {"label" : "dateCronEq", "tail" : ": Eq[DateCronExpr]", "member" : "cron4s.expr.DateCronExpr.dateCronEq", "link" : "cron4s\/expr\/DateCronExpr$.html#dateCronEq:cats.Eq[cron4s.expr.DateCronExpr]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/DateCronExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/DateCronExpr$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/DateCronExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/DateCronExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/DateCronExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/DateCronExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/DateCronExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DateCronExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DateCronExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DateCronExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/DateCronExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/DateCronExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/DateCronExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/DateCronExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/DateCronExpr$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/DateCronExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/DateCronExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/DateCronExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/DateCronExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.DateCronExpr.toString", "link" : "cron4s\/expr\/DateCronExpr.html#toString:String", "kind" : "lazy val"}, {"member" : "cron4s.expr.DateCronExpr#<init>", "error" : "unsupported entity"}, {"label" : "daysOfWeek", "tail" : ": DaysOfWeekNode", "member" : "cron4s.expr.DateCronExpr.daysOfWeek", "link" : "cron4s\/expr\/DateCronExpr.html#daysOfWeek:cron4s.expr.DaysOfWeekNode", "kind" : "val"}, {"label" : "months", "tail" : ": MonthsNode", "member" : "cron4s.expr.DateCronExpr.months", "link" : "cron4s\/expr\/DateCronExpr.html#months:cron4s.expr.MonthsNode", "kind" : "val"}, {"label" : "daysOfMonth", "tail" : ": DaysOfMonthNode", "member" : "cron4s.expr.DateCronExpr.daysOfMonth", "link" : "cron4s\/expr\/DateCronExpr.html#daysOfMonth:cron4s.expr.DaysOfMonthNode", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/expr\/DateCronExpr.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/DateCronExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/DateCronExpr.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/DateCronExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/DateCronExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/DateCronExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/DateCronExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/DateCronExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DateCronExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DateCronExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DateCronExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/DateCronExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/DateCronExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/DateCronExpr.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/DateCronExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/DateCronExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/DateCronExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/expr\/DateCronExpr.html", "kind" : "case class"}, {"name" : "cron4s.expr.DivisibleNode", "shortDescription" : "", "object" : "cron4s\/expr\/DivisibleNode$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "cron4s.expr.DivisibleNode.toString", "link" : "cron4s\/expr\/DivisibleNode.html#toString():String", "kind" : "def"}, {"member" : "cron4s.expr.DivisibleNode#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cron4s\/expr\/DivisibleNode.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cron4s\/expr\/DivisibleNode.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/DivisibleNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/DivisibleNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cron4s\/expr\/DivisibleNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cron4s\/expr\/DivisibleNode.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "divisibleNodeInstance", "tail" : "(): FieldExpr[DivisibleNode, F]", "member" : "cron4s.expr.DivisibleNode.divisibleNodeInstance", "link" : "cron4s\/expr\/DivisibleNode$.html#divisibleNodeInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.DivisibleNode,F]", "kind" : "implicit def"}, {"label" : "divisibleNodeShow", "tail" : "(): Show[DivisibleNode[F]]", "member" : "cron4s.expr.DivisibleNode.divisibleNodeShow", "link" : "cron4s\/expr\/DivisibleNode$.html#divisibleNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.DivisibleNode[F]]", "kind" : "implicit def"}, {"label" : "divisibleNodeEq", "tail" : "(): Eq[DivisibleNode[F]]", "member" : "cron4s.expr.DivisibleNode.divisibleNodeEq", "link" : "cron4s\/expr\/DivisibleNode$.html#divisibleNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.DivisibleNode[F]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/DivisibleNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/DivisibleNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/DivisibleNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/DivisibleNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/DivisibleNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/DivisibleNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/DivisibleNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DivisibleNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DivisibleNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/DivisibleNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/DivisibleNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/DivisibleNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/DivisibleNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/DivisibleNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/DivisibleNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/DivisibleNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/DivisibleNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/DivisibleNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/DivisibleNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/DivisibleNode.html", "kind" : "class"}, {"name" : "cron4s.expr.EachNode", "shortDescription" : "", "object" : "cron4s\/expr\/EachNode$.html", "members_class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.EachNode.toString", "link" : "cron4s\/expr\/EachNode.html#toString:String", "kind" : "val"}, {"label" : "range", "tail" : ": IndexedSeq[Int]", "member" : "cron4s.expr.EachNode.range", "link" : "cron4s\/expr\/EachNode.html#range:IndexedSeq[Int]", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "cron4s.expr.EachNode.hashCode", "link" : "cron4s\/expr\/EachNode.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "cron4s.expr.EachNode.equals", "link" : "cron4s\/expr\/EachNode.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "unit", "tail" : ": CronUnit[F]", "member" : "cron4s.expr.EachNode.unit", "link" : "cron4s\/expr\/EachNode.html#unit:cron4s.CronUnit[F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/EachNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/EachNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/EachNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/EachNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/EachNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/EachNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/EachNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EachNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EachNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EachNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/EachNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/EachNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/EachNode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/EachNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/EachNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/EachNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "eachNodeInstance", "tail" : "(): FieldExpr[EachNode, F]", "member" : "cron4s.expr.EachNode.eachNodeInstance", "link" : "cron4s\/expr\/EachNode$.html#eachNodeInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.EachNode,F]", "kind" : "implicit def"}, {"label" : "eachNodeShow", "tail" : "(): Show[EachNode[F]]", "member" : "cron4s.expr.EachNode.eachNodeShow", "link" : "cron4s\/expr\/EachNode$.html#eachNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.EachNode[F]]", "kind" : "implicit def"}, {"label" : "eachNodeEq", "tail" : "(): Eq[EachNode[F]]", "member" : "cron4s.expr.EachNode.eachNodeEq", "link" : "cron4s\/expr\/EachNode$.html#eachNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.EachNode[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(unit: CronUnit[F]): EachNode[F]", "member" : "cron4s.expr.EachNode.apply", "link" : "cron4s\/expr\/EachNode$.html#apply[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):cron4s.expr.EachNode[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/EachNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/EachNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/EachNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/EachNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/EachNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/EachNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/EachNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EachNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EachNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EachNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/EachNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/EachNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/EachNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/EachNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/EachNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/EachNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/EachNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/EachNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/EachNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/EachNode.html", "kind" : "class"}, {"name" : "cron4s.expr.EnumerableNode", "shortDescription" : "", "object" : "cron4s\/expr\/EnumerableNode$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "cron4s.expr.EnumerableNode.toString", "link" : "cron4s\/expr\/EnumerableNode.html#toString():String", "kind" : "def"}, {"member" : "cron4s.expr.EnumerableNode#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cron4s\/expr\/EnumerableNode.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cron4s\/expr\/EnumerableNode.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/EnumerableNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/EnumerableNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cron4s\/expr\/EnumerableNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cron4s\/expr\/EnumerableNode.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "enumerableNodeInstance", "tail" : "(): FieldExpr[EnumerableNode, F]", "member" : "cron4s.expr.EnumerableNode.enumerableNodeInstance", "link" : "cron4s\/expr\/EnumerableNode$.html#enumerableNodeInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.EnumerableNode,F]", "kind" : "implicit def"}, {"label" : "enumerableNodeShow", "tail" : "(): Show[EnumerableNode[F]]", "member" : "cron4s.expr.EnumerableNode.enumerableNodeShow", "link" : "cron4s\/expr\/EnumerableNode$.html#enumerableNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.EnumerableNode[F]]", "kind" : "implicit def"}, {"label" : "enumerableNodeEq", "tail" : "(): Eq[EnumerableNode[F]]", "member" : "cron4s.expr.EnumerableNode.enumerableNodeEq", "link" : "cron4s\/expr\/EnumerableNode$.html#enumerableNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.EnumerableNode[F]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/EnumerableNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/EnumerableNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/EnumerableNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/EnumerableNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/EnumerableNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/EnumerableNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/EnumerableNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EnumerableNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EnumerableNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EnumerableNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/EnumerableNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/EnumerableNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/EnumerableNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/EnumerableNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/EnumerableNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/EnumerableNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/EnumerableNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/EnumerableNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/EnumerableNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/EnumerableNode.html", "kind" : "class"}, {"name" : "cron4s.expr.EveryNode", "shortDescription" : "", "object" : "cron4s\/expr\/EveryNode$.html", "members_class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.EveryNode.toString", "link" : "cron4s\/expr\/EveryNode.html#toString:String", "kind" : "lazy val"}, {"label" : "range", "tail" : ": IndexedSeq[Int]", "member" : "cron4s.expr.EveryNode.range", "link" : "cron4s\/expr\/EveryNode.html#range:IndexedSeq[Int]", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "cron4s.expr.EveryNode.hashCode", "link" : "cron4s\/expr\/EveryNode.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "cron4s.expr.EveryNode.equals", "link" : "cron4s\/expr\/EveryNode.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "unit", "tail" : ": CronUnit[F]", "member" : "cron4s.expr.EveryNode.unit", "link" : "cron4s\/expr\/EveryNode.html#unit:cron4s.CronUnit[F]", "kind" : "val"}, {"label" : "freq", "tail" : ": Int", "member" : "cron4s.expr.EveryNode.freq", "link" : "cron4s\/expr\/EveryNode.html#freq:Int", "kind" : "val"}, {"label" : "base", "tail" : ": DivisibleNode[F]", "member" : "cron4s.expr.EveryNode.base", "link" : "cron4s\/expr\/EveryNode.html#base:cron4s.expr.DivisibleNode[F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/EveryNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/EveryNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/EveryNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/EveryNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/EveryNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/EveryNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/EveryNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EveryNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EveryNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EveryNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/EveryNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/EveryNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/EveryNode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/EveryNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/EveryNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/EveryNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "everyNodeInstance", "tail" : "(): FieldExpr[EveryNode, F]", "member" : "cron4s.expr.EveryNode.everyNodeInstance", "link" : "cron4s\/expr\/EveryNode$.html#everyNodeInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.EveryNode,F]", "kind" : "implicit def"}, {"label" : "everyNodeShow", "tail" : "(): Show[EveryNode[F]]", "member" : "cron4s.expr.EveryNode.everyNodeShow", "link" : "cron4s\/expr\/EveryNode$.html#everyNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.EveryNode[F]]", "kind" : "implicit def"}, {"label" : "everyNodeEq", "tail" : "(): Eq[EveryNode[F]]", "member" : "cron4s.expr.EveryNode.everyNodeEq", "link" : "cron4s\/expr\/EveryNode$.html#everyNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.EveryNode[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(base: DivisibleNode[F], freq: Int)(unit: CronUnit[F]): EveryNode[F]", "member" : "cron4s.expr.EveryNode.apply", "link" : "cron4s\/expr\/EveryNode$.html#apply[F<:cron4s.CronField](base:cron4s.expr.DivisibleNode[F],freq:Int)(implicitunit:cron4s.CronUnit[F]):cron4s.expr.EveryNode[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/EveryNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/EveryNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/EveryNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/EveryNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/EveryNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/EveryNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/EveryNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EveryNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EveryNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/EveryNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/EveryNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/EveryNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/EveryNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/EveryNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/EveryNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/EveryNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/EveryNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/EveryNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/EveryNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/EveryNode.html", "kind" : "class"}, {"name" : "cron4s.expr.FieldExpr", "object" : "cron4s\/expr\/FieldExpr$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: FieldExpr[E, F]): FieldExpr[E, F]", "member" : "cron4s.expr.FieldExpr.apply", "link" : "cron4s\/expr\/FieldExpr$.html#apply[E[_<:cron4s.CronField],F<:cron4s.CronField](implicitev:cron4s.expr.FieldExpr[E,F]):cron4s.expr.FieldExpr[E,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/FieldExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/FieldExpr$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/FieldExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/FieldExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/FieldExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/FieldExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/FieldExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/FieldExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/FieldExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/FieldExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/FieldExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/FieldExpr$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/FieldExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/FieldExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/expr\/FieldExpr.html", "kind" : "trait", "members_trait" : [{"label" : "impliedBy", "tail" : "(e: E[F])(ee: EE[F])(EE: FieldExpr[EE, F]): Boolean", "member" : "cron4s.expr.FieldExpr.impliedBy", "link" : "cron4s\/expr\/FieldExpr.html#impliedBy[EE[_<:cron4s.CronField]](e:E[F])(ee:EE[F])(implicitEE:cron4s.expr.FieldExpr[EE,F]):Boolean", "kind" : "final def"}, {"label" : "prev", "tail" : "(a: E[F])(from: Int): Option[Int]", "member" : "cron4s.base.Enumerated.prev", "link" : "cron4s\/expr\/FieldExpr.html#prev(a:A)(from:Int):Option[Int]", "kind" : "def"}, {"label" : "next", "tail" : "(a: E[F])(from: Int): Option[Int]", "member" : "cron4s.base.Enumerated.next", "link" : "cron4s\/expr\/FieldExpr.html#next(a:A)(from:Int):Option[Int]", "kind" : "def"}, {"label" : "step", "tail" : "(a: E[F])(from: Int, stepSize: Int): Option[(Int, Int)]", "member" : "cron4s.base.Enumerated.step", "link" : "cron4s\/expr\/FieldExpr.html#step(a:A)(from:Int,stepSize:Int):Option[(Int,Int)]", "kind" : "def"}, {"label" : "step", "tail" : "(a: E[F], from: Int, step: Step): Option[(Int, Int)]", "member" : "cron4s.base.Enumerated.step", "link" : "cron4s\/expr\/FieldExpr.html#step(a:A,from:Int,step:cron4s.base.Step):Option[(Int,Int)]", "kind" : "def"}, {"label" : "max", "tail" : "(a: E[F]): Int", "member" : "cron4s.base.Enumerated.max", "link" : "cron4s\/expr\/FieldExpr.html#max(a:A):Int", "kind" : "def"}, {"label" : "min", "tail" : "(a: E[F]): Int", "member" : "cron4s.base.Enumerated.min", "link" : "cron4s\/expr\/FieldExpr.html#min(a:A):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/FieldExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/FieldExpr.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/FieldExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/FieldExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/FieldExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/FieldExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/FieldExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/FieldExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/FieldExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/FieldExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/FieldExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/FieldExpr.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/FieldExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/FieldExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unit", "tail" : "(e: E[F]): CronUnit[F]", "member" : "cron4s.expr.FieldExpr.unit", "link" : "cron4s\/expr\/FieldExpr.html#unit(e:E[F]):cron4s.CronUnit[F]", "kind" : "abstract def"}, {"label" : "implies", "tail" : "(e: E[F])(ee: EE[F])(EE: FieldExpr[EE, F]): Boolean", "member" : "cron4s.expr.FieldExpr.implies", "link" : "cron4s\/expr\/FieldExpr.html#implies[EE[_<:cron4s.CronField]](e:E[F])(ee:EE[F])(implicitEE:cron4s.expr.FieldExpr[EE,F]):Boolean", "kind" : "abstract def"}, {"label" : "matches", "tail" : "(e: E[F]): Predicate[Int]", "member" : "cron4s.expr.FieldExpr.matches", "link" : "cron4s\/expr\/FieldExpr.html#matches(e:E[F]):cron4s.base.Predicate[Int]", "kind" : "abstract def"}, {"label" : "range", "tail" : "(a: E[F]): IndexedSeq[Int]", "member" : "cron4s.base.Enumerated.range", "link" : "cron4s\/expr\/FieldExpr.html#range(a:A):IndexedSeq[Int]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 25\/08\/2016."}, {"name" : "cron4s.expr.FieldNode", "shortDescription" : "Created by alonsodomin on 23\/01\/2017.", "object" : "cron4s\/expr\/FieldNode$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "cron4s.expr.FieldNode.toString", "link" : "cron4s\/expr\/FieldNode.html#toString():String", "kind" : "def"}, {"member" : "cron4s.expr.FieldNode#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cron4s\/expr\/FieldNode.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cron4s\/expr\/FieldNode.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cron4s\/expr\/FieldNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cron4s\/expr\/FieldNode.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fieldNodeInstance", "tail" : "(): FieldExpr[FieldNode, F]", "member" : "cron4s.expr.FieldNode.fieldNodeInstance", "link" : "cron4s\/expr\/FieldNode$.html#fieldNodeInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.FieldNode,F]", "kind" : "implicit def"}, {"label" : "fieldNodeShow", "tail" : "(): Show[FieldNode[F]]", "member" : "cron4s.expr.FieldNode.fieldNodeShow", "link" : "cron4s\/expr\/FieldNode$.html#fieldNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.FieldNode[F]]", "kind" : "implicit def"}, {"label" : "fieldNodeEq", "tail" : "(): Eq[FieldNode[F]]", "member" : "cron4s.expr.FieldNode.fieldNodeEq", "link" : "cron4s\/expr\/FieldNode$.html#fieldNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.FieldNode[F]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/FieldNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/FieldNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/FieldNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/FieldNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/FieldNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/FieldNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/FieldNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/FieldNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/FieldNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/FieldNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/FieldNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/FieldNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/FieldNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/FieldNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/FieldNode.html", "kind" : "class"}, {"name" : "cron4s.expr.FieldNodeWithAny", "shortDescription" : "", "object" : "cron4s\/expr\/FieldNodeWithAny$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "cron4s.expr.FieldNodeWithAny.toString", "link" : "cron4s\/expr\/FieldNodeWithAny.html#toString():String", "kind" : "def"}, {"member" : "cron4s.expr.FieldNodeWithAny#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "cron4s\/expr\/FieldNodeWithAny.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "cron4s\/expr\/FieldNodeWithAny.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldNodeWithAny.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldNodeWithAny.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "cron4s\/expr\/FieldNodeWithAny.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "cron4s\/expr\/FieldNodeWithAny.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fieldNodeWithAnyInstance", "tail" : "(): FieldExpr[FieldNodeWithAny, F]", "member" : "cron4s.expr.FieldNodeWithAny.fieldNodeWithAnyInstance", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#fieldNodeWithAnyInstance[F<:cron4s.CronField]:cron4s.expr.FieldExpr[cron4s.expr.FieldNodeWithAny,F]", "kind" : "implicit def"}, {"label" : "fieldNodeWithAnyShow", "tail" : "(): Show[FieldNodeWithAny[F]]", "member" : "cron4s.expr.FieldNodeWithAny.fieldNodeWithAnyShow", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#fieldNodeWithAnyShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "implicit def"}, {"label" : "fieldNodeWithAnyEq", "tail" : "(): Eq[FieldNodeWithAny[F]]", "member" : "cron4s.expr.FieldNodeWithAny.fieldNodeWithAnyEq", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#fieldNodeWithAnyEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/FieldNodeWithAny$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldNodeWithAny$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/FieldNodeWithAny.html", "kind" : "class"}, {"name" : "cron4s.expr.FieldSelector", "object" : "cron4s\/expr\/FieldSelector$.html", "members_object" : [{"label" : "DayOfWeekFromDateExpr", "tail" : ": FieldSelector[DateCronExpr, DayOfWeek]", "member" : "cron4s.expr.FieldSelector.DayOfWeekFromDateExpr", "link" : "cron4s\/expr\/FieldSelector$.html#DayOfWeekFromDateExpr:cron4s.expr.FieldSelector[cron4s.expr.DateCronExpr,cron4s.CronField.DayOfWeek]", "kind" : "implicit val"}, {"label" : "DayOfWeekFromCronExpr", "tail" : ": FieldSelector[CronExpr, DayOfWeek]", "member" : "cron4s.expr.FieldSelector.DayOfWeekFromCronExpr", "link" : "cron4s\/expr\/FieldSelector$.html#DayOfWeekFromCronExpr:cron4s.expr.FieldSelector[cron4s.expr.CronExpr,cron4s.CronField.DayOfWeek]", "kind" : "implicit val"}, {"label" : "MonthFromDateExpr", "tail" : ": FieldSelector[DateCronExpr, Month]", "member" : "cron4s.expr.FieldSelector.MonthFromDateExpr", "link" : "cron4s\/expr\/FieldSelector$.html#MonthFromDateExpr:cron4s.expr.FieldSelector[cron4s.expr.DateCronExpr,cron4s.CronField.Month]", "kind" : "implicit val"}, {"label" : "MonthFromCronExpr", "tail" : ": FieldSelector[CronExpr, Month]", "member" : "cron4s.expr.FieldSelector.MonthFromCronExpr", "link" : "cron4s\/expr\/FieldSelector$.html#MonthFromCronExpr:cron4s.expr.FieldSelector[cron4s.expr.CronExpr,cron4s.CronField.Month]", "kind" : "implicit val"}, {"label" : "DayOfMonthFromDateExpr", "tail" : ": FieldSelector[DateCronExpr, DayOfMonth]", "member" : "cron4s.expr.FieldSelector.DayOfMonthFromDateExpr", "link" : "cron4s\/expr\/FieldSelector$.html#DayOfMonthFromDateExpr:cron4s.expr.FieldSelector[cron4s.expr.DateCronExpr,cron4s.CronField.DayOfMonth]", "kind" : "implicit val"}, {"label" : "DayOfMonthFromCronExpr", "tail" : ": FieldSelector[CronExpr, DayOfMonth]", "member" : "cron4s.expr.FieldSelector.DayOfMonthFromCronExpr", "link" : "cron4s\/expr\/FieldSelector$.html#DayOfMonthFromCronExpr:cron4s.expr.FieldSelector[cron4s.expr.CronExpr,cron4s.CronField.DayOfMonth]", "kind" : "implicit val"}, {"label" : "HoursFromTimeExpr", "tail" : ": FieldSelector[TimeCronExpr, Hour]", "member" : "cron4s.expr.FieldSelector.HoursFromTimeExpr", "link" : "cron4s\/expr\/FieldSelector$.html#HoursFromTimeExpr:cron4s.expr.FieldSelector[cron4s.expr.TimeCronExpr,cron4s.CronField.Hour]", "kind" : "implicit val"}, {"label" : "HoursFromCronExpr", "tail" : ": FieldSelector[CronExpr, Hour]", "member" : "cron4s.expr.FieldSelector.HoursFromCronExpr", "link" : "cron4s\/expr\/FieldSelector$.html#HoursFromCronExpr:cron4s.expr.FieldSelector[cron4s.expr.CronExpr,cron4s.CronField.Hour]", "kind" : "implicit val"}, {"label" : "MinutesFromTimeExpr", "tail" : ": FieldSelector[TimeCronExpr, Minute]", "member" : "cron4s.expr.FieldSelector.MinutesFromTimeExpr", "link" : "cron4s\/expr\/FieldSelector$.html#MinutesFromTimeExpr:cron4s.expr.FieldSelector[cron4s.expr.TimeCronExpr,cron4s.CronField.Minute]", "kind" : "implicit val"}, {"label" : "MinutesFromCronExpr", "tail" : ": FieldSelector[CronExpr, Minute]", "member" : "cron4s.expr.FieldSelector.MinutesFromCronExpr", "link" : "cron4s\/expr\/FieldSelector$.html#MinutesFromCronExpr:cron4s.expr.FieldSelector[cron4s.expr.CronExpr,cron4s.CronField.Minute]", "kind" : "implicit val"}, {"label" : "SecondsFromTimeExpr", "tail" : ": FieldSelector[TimeCronExpr, Second]", "member" : "cron4s.expr.FieldSelector.SecondsFromTimeExpr", "link" : "cron4s\/expr\/FieldSelector$.html#SecondsFromTimeExpr:cron4s.expr.FieldSelector[cron4s.expr.TimeCronExpr,cron4s.CronField.Second]", "kind" : "implicit val"}, {"label" : "SecondsFromCronExpr", "tail" : ": FieldSelector[CronExpr, Second]", "member" : "cron4s.expr.FieldSelector.SecondsFromCronExpr", "link" : "cron4s\/expr\/FieldSelector$.html#SecondsFromCronExpr:cron4s.expr.FieldSelector[cron4s.expr.CronExpr,cron4s.CronField.Second]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(ev: FieldSelector[A, F]): FieldSelector[A, F]", "member" : "cron4s.expr.FieldSelector.apply", "link" : "cron4s\/expr\/FieldSelector$.html#apply[A,F<:cron4s.CronField](implicitev:cron4s.expr.FieldSelector[A,F]):cron4s.expr.FieldSelector[A,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/FieldSelector$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/FieldSelector$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/FieldSelector$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/FieldSelector$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/FieldSelector$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/FieldSelector$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/FieldSelector$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldSelector$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldSelector$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldSelector$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/FieldSelector$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/FieldSelector$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/FieldSelector$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/FieldSelector$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/FieldSelector$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/FieldSelector$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/FieldSelector$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldSelector$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldSelector$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/expr\/FieldSelector.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/FieldSelector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/FieldSelector.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/FieldSelector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/FieldSelector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/FieldSelector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/FieldSelector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/FieldSelector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldSelector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldSelector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/FieldSelector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/FieldSelector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/FieldSelector.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/FieldSelector.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/FieldSelector.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/FieldSelector.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/FieldSelector.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/FieldSelector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/FieldSelector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/FieldSelector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "selectFrom", "tail" : "(expr: A): Out[F]", "member" : "cron4s.expr.FieldSelector.selectFrom", "link" : "cron4s\/expr\/FieldSelector.html#selectFrom(expr:A):FieldSelector.this.Out[F]", "kind" : "abstract def"}, {"label" : "hlistSelect", "tail" : "(): Lazy[Selector[Raw, Out[F]]]", "member" : "cron4s.expr.FieldSelector.hlistSelect", "link" : "cron4s\/expr\/FieldSelector.html#hlistSelect:shapeless.Lazy[shapeless.ops.hlist.Selector[FieldSelector.this.Raw,FieldSelector.this.Out[F]]]", "kind" : "implicit abstract def"}, {"member" : "cron4s.expr.FieldSelector.Out", "error" : "unsupported entity"}, {"member" : "cron4s.expr.FieldSelector.Raw", "error" : "unsupported entity"}], "shortDescription" : "Created by alonsodomin on 10\/02\/2017."}, {"name" : "cron4s.expr.Node", "trait" : "cron4s\/expr\/Node.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/Node.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/Node.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/Node.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/Node.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/Node.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/Node.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/Node.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/Node.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/Node.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/Node.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/Node.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/Node.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/Node.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/Node.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/Node.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/Node.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/Node.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/Node.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/Node.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "range", "tail" : "(): IndexedSeq[Int]", "member" : "cron4s.expr.Node.range", "link" : "cron4s\/expr\/Node.html#range:IndexedSeq[Int]", "kind" : "abstract def"}, {"label" : "unit", "tail" : ": CronUnit[F]", "member" : "cron4s.expr.Node.unit", "link" : "cron4s\/expr\/Node.html#unit:cron4s.CronUnit[F]", "kind" : "abstract val"}], "shortDescription" : "Generic representation of the expression node for a given field"}, {"name" : "cron4s.expr.SeveralNode", "shortDescription" : "", "object" : "cron4s\/expr\/SeveralNode$.html", "members_class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.SeveralNode.toString", "link" : "cron4s\/expr\/SeveralNode.html#toString:String", "kind" : "lazy val"}, {"label" : "range", "tail" : ": IndexedSeq[Int]", "member" : "cron4s.expr.SeveralNode.range", "link" : "cron4s\/expr\/SeveralNode.html#range:IndexedSeq[Int]", "kind" : "lazy val"}, {"label" : "hashCode", "tail" : ": Int", "member" : "cron4s.expr.SeveralNode.hashCode", "link" : "cron4s\/expr\/SeveralNode.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "values", "tail" : ": NonEmptyList[EnumerableNode[F]]", "member" : "cron4s.expr.SeveralNode.values", "link" : "cron4s\/expr\/SeveralNode.html#values:cats.data.NonEmptyList[cron4s.expr.EnumerableNode[F]]", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "cron4s.expr.SeveralNode.equals", "link" : "cron4s\/expr\/SeveralNode.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "unit", "tail" : ": CronUnit[F]", "member" : "cron4s.expr.SeveralNode.unit", "link" : "cron4s\/expr\/SeveralNode.html#unit:cron4s.CronUnit[F]", "kind" : "val"}, {"label" : "tail", "tail" : ": NonEmptyList[EnumerableNode[F]]", "member" : "cron4s.expr.SeveralNode.tail", "link" : "cron4s\/expr\/SeveralNode.html#tail:cats.data.NonEmptyList[cron4s.expr.EnumerableNode[F]]", "kind" : "val"}, {"label" : "head", "tail" : ": EnumerableNode[F]", "member" : "cron4s.expr.SeveralNode.head", "link" : "cron4s\/expr\/SeveralNode.html#head:cron4s.expr.EnumerableNode[F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/SeveralNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/SeveralNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/SeveralNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/SeveralNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/SeveralNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/SeveralNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/SeveralNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/SeveralNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/SeveralNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/SeveralNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/SeveralNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/SeveralNode.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/SeveralNode.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/SeveralNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/SeveralNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/SeveralNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "severalNodeInstance", "tail" : "(elemExpr: FieldExpr[EnumerableNode, F]): FieldExpr[SeveralNode, F]", "member" : "cron4s.expr.SeveralNode.severalNodeInstance", "link" : "cron4s\/expr\/SeveralNode$.html#severalNodeInstance[F<:cron4s.CronField](implicitelemExpr:cron4s.expr.FieldExpr[cron4s.expr.EnumerableNode,F]):cron4s.expr.FieldExpr[cron4s.expr.SeveralNode,F]", "kind" : "implicit def"}, {"label" : "severalNodeShow", "tail" : "(): Show[SeveralNode[F]]", "member" : "cron4s.expr.SeveralNode.severalNodeShow", "link" : "cron4s\/expr\/SeveralNode$.html#severalNodeShow[F<:cron4s.CronField]:cats.Show[cron4s.expr.SeveralNode[F]]", "kind" : "implicit def"}, {"label" : "severalNodeEq", "tail" : "(): Eq[SeveralNode[F]]", "member" : "cron4s.expr.SeveralNode.severalNodeEq", "link" : "cron4s\/expr\/SeveralNode$.html#severalNodeEq[F<:cron4s.CronField]:cats.Eq[cron4s.expr.SeveralNode[F]]", "kind" : "implicit def"}, {"label" : "fromSeq", "tail" : "(xs: Seq[EnumerableNode[F]])(unit: CronUnit[F]): Option[SeveralNode[F]]", "member" : "cron4s.expr.SeveralNode.fromSeq", "link" : "cron4s\/expr\/SeveralNode$.html#fromSeq[F<:cron4s.CronField](xs:Seq[cron4s.expr.EnumerableNode[F]])(implicitunit:cron4s.CronUnit[F]):Option[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "apply", "tail" : "(first: EnumerableNode[F], second: EnumerableNode[F], tail: EnumerableNode[F]*)(unit: CronUnit[F]): SeveralNode[F]", "member" : "cron4s.expr.SeveralNode.apply", "link" : "cron4s\/expr\/SeveralNode$.html#apply[F<:cron4s.CronField](first:cron4s.expr.EnumerableNode[F],second:cron4s.expr.EnumerableNode[F],tail:cron4s.expr.EnumerableNode[F]*)(implicitunit:cron4s.CronUnit[F]):cron4s.expr.SeveralNode[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/SeveralNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/SeveralNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/SeveralNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/SeveralNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/SeveralNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/SeveralNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/SeveralNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/SeveralNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/SeveralNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/SeveralNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/SeveralNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/SeveralNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/SeveralNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/SeveralNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/SeveralNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/SeveralNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/SeveralNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/SeveralNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/SeveralNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/expr\/SeveralNode.html", "kind" : "class"}, {"name" : "cron4s.expr.TimeCronExpr", "shortDescription" : "", "object" : "cron4s\/expr\/TimeCronExpr$.html", "members_object" : [{"label" : "timeCronShow", "tail" : ": Show[TimeCronExpr]", "member" : "cron4s.expr.TimeCronExpr.timeCronShow", "link" : "cron4s\/expr\/TimeCronExpr$.html#timeCronShow:cats.Show[cron4s.expr.TimeCronExpr]", "kind" : "implicit val"}, {"label" : "timeCronEq", "tail" : ": Eq[TimeCronExpr]", "member" : "cron4s.expr.TimeCronExpr.timeCronEq", "link" : "cron4s\/expr\/TimeCronExpr$.html#timeCronEq:cats.Eq[cron4s.expr.TimeCronExpr]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/TimeCronExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/TimeCronExpr$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/TimeCronExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/TimeCronExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/TimeCronExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/TimeCronExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/TimeCronExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/TimeCronExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/TimeCronExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/TimeCronExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/TimeCronExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/TimeCronExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/expr\/TimeCronExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/TimeCronExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/expr\/TimeCronExpr$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/expr\/TimeCronExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/TimeCronExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/TimeCronExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/TimeCronExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : ": String", "member" : "cron4s.expr.TimeCronExpr.toString", "link" : "cron4s\/expr\/TimeCronExpr.html#toString:String", "kind" : "lazy val"}, {"member" : "cron4s.expr.TimeCronExpr#<init>", "error" : "unsupported entity"}, {"label" : "hours", "tail" : ": HoursNode", "member" : "cron4s.expr.TimeCronExpr.hours", "link" : "cron4s\/expr\/TimeCronExpr.html#hours:cron4s.expr.HoursNode", "kind" : "val"}, {"label" : "minutes", "tail" : ": MinutesNode", "member" : "cron4s.expr.TimeCronExpr.minutes", "link" : "cron4s\/expr\/TimeCronExpr.html#minutes:cron4s.expr.MinutesNode", "kind" : "val"}, {"label" : "seconds", "tail" : ": SecondsNode", "member" : "cron4s.expr.TimeCronExpr.seconds", "link" : "cron4s\/expr\/TimeCronExpr.html#seconds:cron4s.expr.SecondsNode", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/expr\/TimeCronExpr.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/expr\/TimeCronExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/expr\/TimeCronExpr.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/expr\/TimeCronExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/expr\/TimeCronExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/expr\/TimeCronExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/expr\/TimeCronExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/expr\/TimeCronExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/TimeCronExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/TimeCronExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/expr\/TimeCronExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/expr\/TimeCronExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/expr\/TimeCronExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/expr\/TimeCronExpr.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/expr\/TimeCronExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/expr\/TimeCronExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/expr\/TimeCronExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/expr\/TimeCronExpr.html", "kind" : "case class"}], "cron4s.testkit.laws" : [{"name" : "cron4s.testkit.laws.DateTimeCronLaws", "object" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(dt0: IsDateTime[DateTime], TC0: DateTimeCron[E]): DateTimeCronLaws[E, DateTime]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.apply", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#apply[E,DateTime](implicitdt0:cron4s.datetime.IsDateTime[DateTime],implicitTC0:cron4s.datetime.DateTimeCron[E]):cron4s.testkit.laws.DateTimeCronLaws[E,DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html", "kind" : "trait", "members_trait" : [{"label" : "supportedFieldsEquality", "tail" : "(e: E): IsEq[List[CronField]]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.supportedFieldsEquality", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#supportedFieldsEquality(e:E):cats.laws.IsEq[List[cron4s.CronField]]", "kind" : "def"}, {"label" : "backwards", "tail" : "(e: E, from: DateTime): IsEq[Option[DateTime]]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.backwards", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#backwards(e:E,from:DateTime):cats.laws.IsEq[Option[DateTime]]", "kind" : "def"}, {"label" : "forwards", "tail" : "(e: E, from: DateTime): IsEq[Option[DateTime]]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.forwards", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#forwards(e:E,from:DateTime):cats.laws.IsEq[Option[DateTime]]", "kind" : "def"}, {"label" : "matchAll", "tail" : "(e: E, dt: DateTime): IsEq[Boolean]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.matchAll", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#matchAll(e:E,dt:DateTime):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "matchAny", "tail" : "(e: E, dt: DateTime): IsEq[Boolean]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.matchAny", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#matchAny(e:E,dt:DateTime):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "TC", "tail" : "(): DateTimeCron[E]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.TC", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#TC:cron4s.datetime.DateTimeCron[E]", "kind" : "implicit abstract def"}, {"label" : "DT", "tail" : "(): IsDateTime[DateTime]", "member" : "cron4s.testkit.laws.DateTimeCronLaws.DT", "link" : "cron4s\/testkit\/laws\/DateTimeCronLaws.html#DT:cron4s.datetime.IsDateTime[DateTime]", "kind" : "implicit abstract def"}], "shortDescription" : "Created by alonsodomin on 29\/01\/2017."}, {"name" : "cron4s.testkit.laws.DateTimeNodeLaws", "object" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(dt0: IsDateTime[DateTime], expr0: FieldExpr[E, F], TC0: DateTimeNode[E, F]): DateTimeNodeLaws[E, F, DateTime]", "member" : "cron4s.testkit.laws.DateTimeNodeLaws.apply", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#apply[E[_<:cron4s.CronField],F<:cron4s.CronField,DateTime](implicitdt0:cron4s.datetime.IsDateTime[DateTime],implicitexpr0:cron4s.expr.FieldExpr[E,F],implicitTC0:cron4s.datetime.DateTimeNode[E,F]):cron4s.testkit.laws.DateTimeNodeLaws[E,F,DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html", "kind" : "trait", "members_trait" : [{"label" : "backwards", "tail" : "(e: E[F], from: DateTime): IsEq[Option[DateTime]]", "member" : "cron4s.testkit.laws.DateTimeNodeLaws.backwards", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#backwards(e:E[F],from:DateTime):cats.laws.IsEq[Option[DateTime]]", "kind" : "def"}, {"label" : "forward", "tail" : "(e: E[F], from: DateTime): IsEq[Option[DateTime]]", "member" : "cron4s.testkit.laws.DateTimeNodeLaws.forward", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#forward(e:E[F],from:DateTime):cats.laws.IsEq[Option[DateTime]]", "kind" : "def"}, {"label" : "matchable", "tail" : "(e: E[F], dt: DateTime): IsEq[Boolean]", "member" : "cron4s.testkit.laws.DateTimeNodeLaws.matchable", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#matchable(e:E[F],dt:DateTime):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "TC", "tail" : "(): DateTimeNode[E, F]", "member" : "cron4s.testkit.laws.DateTimeNodeLaws.TC", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#TC:cron4s.datetime.DateTimeNode[E,F]", "kind" : "implicit abstract def"}, {"label" : "expr", "tail" : "(): FieldExpr[E, F]", "member" : "cron4s.testkit.laws.DateTimeNodeLaws.expr", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#expr:cron4s.expr.FieldExpr[E,F]", "kind" : "implicit abstract def"}, {"label" : "DT", "tail" : "(): IsDateTime[DateTime]", "member" : "cron4s.testkit.laws.DateTimeNodeLaws.DT", "link" : "cron4s\/testkit\/laws\/DateTimeNodeLaws.html#DT:cron4s.datetime.IsDateTime[DateTime]", "kind" : "implicit abstract def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.laws.EnumeratedLaws", "object" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Enumerated[A]): EnumeratedLaws[A] { val TC: cron4s.base.Enumerated[A] }", "member" : "cron4s.testkit.laws.EnumeratedLaws.apply", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#apply[A](implicitev:cron4s.base.Enumerated[A]):cron4s.testkit.laws.EnumeratedLaws[A]{valTC:cron4s.base.Enumerated[A]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/laws\/EnumeratedLaws.html", "kind" : "trait", "members_trait" : [{"label" : "fromMaxToMinBackwards", "tail" : "(a: A): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMaxToMinBackwards", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#fromMaxToMinBackwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMaxToMinForwards", "tail" : "(a: A): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMaxToMinForwards", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#fromMaxToMinForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMinToMaxBackwards", "tail" : "(a: A): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMinToMaxBackwards", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#fromMinToMaxBackwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMinToMaxForwards", "tail" : "(a: A): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMinToMaxForwards", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#fromMinToMaxForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMaxToMaxForwards", "tail" : "(a: A): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMaxToMaxForwards", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#fromMaxToMaxForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMinToMinForwards", "tail" : "(a: A): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMinToMinForwards", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#fromMinToMinForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "backwards", "tail" : "(a: A, from: Int): IsEq[Option[Int]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.backwards", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#backwards(a:A,from:Int):cats.laws.IsEq[Option[Int]]", "kind" : "def"}, {"label" : "forward", "tail" : "(a: A, from: Int): IsEq[Option[Int]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.forward", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#forward(a:A,from:Int):cats.laws.IsEq[Option[Int]]", "kind" : "def"}, {"label" : "max", "tail" : "(a: A): IsEq[Int]", "member" : "cron4s.testkit.laws.EnumeratedLaws.max", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#max(a:A):cats.laws.IsEq[Int]", "kind" : "def"}, {"label" : "min", "tail" : "(a: A): IsEq[Int]", "member" : "cron4s.testkit.laws.EnumeratedLaws.min", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#min(a:A):cats.laws.IsEq[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "TC", "tail" : "(): Enumerated[A]", "member" : "cron4s.testkit.laws.EnumeratedLaws.TC", "link" : "cron4s\/testkit\/laws\/EnumeratedLaws.html#TC:cron4s.base.Enumerated[A]", "kind" : "implicit abstract def"}], "shortDescription" : "Created by alonsodomin on 27\/08\/2016."}, {"name" : "cron4s.testkit.laws.FieldExprLaws", "object" : "cron4s\/testkit\/laws\/FieldExprLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: FieldExpr[E, F]): FieldExprLaws[E, F] { val TC: cron4s.expr.FieldExpr[E,F] }", "member" : "cron4s.testkit.laws.FieldExprLaws.apply", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#apply[E[_<:cron4s.CronField],F<:cron4s.CronField](implicitev:cron4s.expr.FieldExpr[E,F]):cron4s.testkit.laws.FieldExprLaws[E,F]{valTC:cron4s.expr.FieldExpr[E,F]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/FieldExprLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/laws\/FieldExprLaws.html", "kind" : "trait", "members_trait" : [{"label" : "implicationEquivalence", "tail" : "(left: E[F], right: EE[F])(EE: FieldExpr[EE, F]): IsEq[Boolean]", "member" : "cron4s.testkit.laws.FieldExprLaws.implicationEquivalence", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#implicationEquivalence[EE[_<:cron4s.CronField]](left:E[F],right:EE[F])(implicitEE:cron4s.expr.FieldExpr[EE,F]):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "implicationCommutative", "tail" : "(left: E[F], right: EE[F])(EE: FieldExpr[EE, F]): IsEq[Boolean]", "member" : "cron4s.testkit.laws.FieldExprLaws.implicationCommutative", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#implicationCommutative[EE[_<:cron4s.CronField]](left:E[F],right:EE[F])(implicitEE:cron4s.expr.FieldExpr[EE,F]):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "matchable", "tail" : "(expr: E[F], value: Int): IsEq[Boolean]", "member" : "cron4s.testkit.laws.FieldExprLaws.matchable", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#matchable(expr:E[F],value:Int):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "fromMaxToMinBackwards", "tail" : "(a: E[F]): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMaxToMinBackwards", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#fromMaxToMinBackwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMaxToMinForwards", "tail" : "(a: E[F]): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMaxToMinForwards", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#fromMaxToMinForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMinToMaxBackwards", "tail" : "(a: E[F]): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMinToMaxBackwards", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#fromMinToMaxBackwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMinToMaxForwards", "tail" : "(a: E[F]): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMinToMaxForwards", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#fromMinToMaxForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMaxToMaxForwards", "tail" : "(a: E[F]): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMaxToMaxForwards", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#fromMaxToMaxForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "fromMinToMinForwards", "tail" : "(a: E[F]): IsEq[Option[(Int, Int)]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.fromMinToMinForwards", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#fromMinToMinForwards(a:A):cats.laws.IsEq[Option[(Int,Int)]]", "kind" : "def"}, {"label" : "backwards", "tail" : "(a: E[F], from: Int): IsEq[Option[Int]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.backwards", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#backwards(a:A,from:Int):cats.laws.IsEq[Option[Int]]", "kind" : "def"}, {"label" : "forward", "tail" : "(a: E[F], from: Int): IsEq[Option[Int]]", "member" : "cron4s.testkit.laws.EnumeratedLaws.forward", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#forward(a:A,from:Int):cats.laws.IsEq[Option[Int]]", "kind" : "def"}, {"label" : "max", "tail" : "(a: E[F]): IsEq[Int]", "member" : "cron4s.testkit.laws.EnumeratedLaws.max", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#max(a:A):cats.laws.IsEq[Int]", "kind" : "def"}, {"label" : "min", "tail" : "(a: E[F]): IsEq[Int]", "member" : "cron4s.testkit.laws.EnumeratedLaws.min", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#min(a:A):cats.laws.IsEq[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "TC", "tail" : "(): FieldExpr[E, F]", "member" : "cron4s.testkit.laws.FieldExprLaws.TC", "link" : "cron4s\/testkit\/laws\/FieldExprLaws.html#TC:cron4s.expr.FieldExpr[E,F]", "kind" : "implicit abstract def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.laws.IsDateTimeLaws", "object" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(dtEv: IsDateTime[DateTime], eqEv: Eq[DateTime]): IsDateTimeLaws[DateTime]", "member" : "cron4s.testkit.laws.IsDateTimeLaws.apply", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#apply[DateTime](implicitdtEv:cron4s.datetime.IsDateTime[DateTime],impliciteqEv:cats.Eq[DateTime]):cron4s.testkit.laws.IsDateTimeLaws[DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html", "kind" : "trait", "members_trait" : [{"label" : "settable", "tail" : "(dt: DateTime, fieldValue: CronFieldValue[F]): Prop", "member" : "cron4s.testkit.laws.IsDateTimeLaws.settable", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#settable[F<:cron4s.CronField](dt:DateTime,fieldValue:cron4s.testkit.CronFieldValue[F]):org.scalacheck.Prop", "kind" : "def"}, {"label" : "immutability", "tail" : "(dt: DateTime, fieldValue: CronFieldValue[F]): Prop", "member" : "cron4s.testkit.laws.IsDateTimeLaws.immutability", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#immutability[F<:cron4s.CronField](dt:DateTime,fieldValue:cron4s.testkit.CronFieldValue[F]):org.scalacheck.Prop", "kind" : "def"}, {"label" : "gettable", "tail" : "(dt: DateTime, field: F): IsEq[Boolean]", "member" : "cron4s.testkit.laws.IsDateTimeLaws.gettable", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#gettable[F<:cron4s.CronField](dt:DateTime,field:F):cats.kernel.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(): Eq[DateTime]", "member" : "cron4s.testkit.laws.IsDateTimeLaws.eq", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#eq:cats.Eq[DateTime]", "kind" : "implicit abstract def"}, {"label" : "DT", "tail" : "(): IsDateTime[DateTime]", "member" : "cron4s.testkit.laws.IsDateTimeLaws.DT", "link" : "cron4s\/testkit\/laws\/IsDateTimeLaws.html#DT:cron4s.datetime.IsDateTime[DateTime]", "kind" : "implicit abstract def"}], "shortDescription" : "Created by alonsodomin on 29\/08\/2016."}, {"name" : "cron4s.testkit.laws.PredicateLaws", "shortDescription" : "Created by alonsodomin on 10\/04\/2017.", "object" : "cron4s\/testkit\/laws\/PredicateLaws$.html", "members_object" : [{"label" : "allMatch", "tail" : "(preds: F[Predicate[A]], value: A)(F: Foldable[F]): IsEq[Boolean]", "member" : "cron4s.testkit.laws.PredicateLaws.allMatch", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#allMatch[F[_],A](preds:F[cron4s.base.Predicate[A]],value:A)(implicitF:cats.Foldable[F]):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "someMatch", "tail" : "(preds: F[Predicate[A]], value: A)(F: Foldable[F]): IsEq[Boolean]", "member" : "cron4s.testkit.laws.PredicateLaws.someMatch", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#someMatch[F[_],A](preds:F[cron4s.base.Predicate[A]],value:A)(implicitF:cats.Foldable[F]):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "noMatch", "tail" : "(preds: F[Predicate[A]], value: A)(F: Foldable[F]): IsEq[Boolean]", "member" : "cron4s.testkit.laws.PredicateLaws.noMatch", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#noMatch[F[_],A](preds:F[cron4s.base.Predicate[A]],value:A)(implicitF:cats.Foldable[F]):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "disjunction", "tail" : "(self: Predicate[A], other: Predicate[A], value: A): IsEq[Boolean]", "member" : "cron4s.testkit.laws.PredicateLaws.disjunction", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#disjunction[A](self:cron4s.base.Predicate[A],other:cron4s.base.Predicate[A],value:A):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "conjuction", "tail" : "(self: Predicate[A], other: Predicate[A], value: A): IsEq[Boolean]", "member" : "cron4s.testkit.laws.PredicateLaws.conjuction", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#conjuction[A](self:cron4s.base.Predicate[A],other:cron4s.base.Predicate[A],value:A):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "negation", "tail" : "(self: Predicate[A], a: A): IsEq[Boolean]", "member" : "cron4s.testkit.laws.PredicateLaws.negation", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#negation[A](self:cron4s.base.Predicate[A],a:A):cats.laws.IsEq[Boolean]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/laws\/PredicateLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "cron4s.datetime" : [{"name" : "cron4s.datetime.DateTimeCron", "object" : "cron4s\/datetime\/DateTimeCron$.html", "members_object" : [{"label" : "dateCronInstance", "tail" : ": DateTimeCron[DateCronExpr]", "member" : "cron4s.datetime.DateTimeCron.dateCronInstance", "link" : "cron4s\/datetime\/DateTimeCron$.html#dateCronInstance:cron4s.datetime.DateTimeCron[cron4s.expr.DateCronExpr]", "kind" : "implicit val"}, {"label" : "timeCronInstance", "tail" : ": DateTimeCron[TimeCronExpr]", "member" : "cron4s.datetime.DateTimeCron.timeCronInstance", "link" : "cron4s\/datetime\/DateTimeCron$.html#timeCronInstance:cron4s.datetime.DateTimeCron[cron4s.expr.TimeCronExpr]", "kind" : "implicit val"}, {"label" : "fullCronInstance", "tail" : ": DateTimeCron[expr.CronExpr]", "member" : "cron4s.datetime.DateTimeCron.fullCronInstance", "link" : "cron4s\/datetime\/DateTimeCron$.html#fullCronInstance:cron4s.datetime.DateTimeCron[cron4s.expr.CronExpr]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(ev: DateTimeCron[T]): DateTimeCron[T]", "member" : "cron4s.datetime.DateTimeCron.apply", "link" : "cron4s\/datetime\/DateTimeCron$.html#apply[T](implicitev:cron4s.datetime.DateTimeCron[T]):cron4s.datetime.DateTimeCron[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeCron$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeCron$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeCron$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeCron$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeCron$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeCron$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeCron$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeCron$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeCron$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeCron$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeCron$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeCron$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/DateTimeCron$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeCron$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeCron$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeCron$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeCron$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeCron$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeCron$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/datetime\/DateTimeCron.html", "kind" : "trait", "members_trait" : [{"label" : "field", "tail" : "(expr: T)(selector: FieldSelector[T, F]): Out[F]", "member" : "cron4s.datetime.DateTimeCron.field", "link" : "cron4s\/datetime\/DateTimeCron.html#field[F<:cron4s.CronField](expr:T)(implicitselector:cron4s.expr.FieldSelector[T,F]):selector.Out[F]", "kind" : "def"}, {"label" : "prev", "tail" : "(expr: T, dt: IsDateTime[DateTime])(from: DateTime): Option[DateTime]", "member" : "cron4s.datetime.DateTimeCron.prev", "link" : "cron4s\/datetime\/DateTimeCron.html#prev[DateTime](expr:T,dt:cron4s.datetime.IsDateTime[DateTime])(from:DateTime):Option[DateTime]", "kind" : "def"}, {"label" : "next", "tail" : "(expr: T, dt: IsDateTime[DateTime])(from: DateTime): Option[DateTime]", "member" : "cron4s.datetime.DateTimeCron.next", "link" : "cron4s\/datetime\/DateTimeCron.html#next[DateTime](expr:T,dt:cron4s.datetime.IsDateTime[DateTime])(from:DateTime):Option[DateTime]", "kind" : "def"}, {"label" : "anyOf", "tail" : "(expr: T, dt: IsDateTime[DateTime]): Predicate[DateTime]", "member" : "cron4s.datetime.DateTimeCron.anyOf", "link" : "cron4s\/datetime\/DateTimeCron.html#anyOf[DateTime](expr:T,dt:cron4s.datetime.IsDateTime[DateTime]):cron4s.base.Predicate[DateTime]", "kind" : "def"}, {"label" : "allOf", "tail" : "(expr: T, dt: IsDateTime[DateTime]): Predicate[DateTime]", "member" : "cron4s.datetime.DateTimeCron.allOf", "link" : "cron4s\/datetime\/DateTimeCron.html#allOf[DateTime](expr:T,dt:cron4s.datetime.IsDateTime[DateTime]):cron4s.base.Predicate[DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeCron.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeCron.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeCron.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeCron.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeCron.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeCron.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeCron.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeCron.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeCron.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeCron.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeCron.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeCron.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/DateTimeCron.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeCron.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeCron.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeCron.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeCron.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeCron.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeCron.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "supportedFields", "tail" : "(): List[CronField]", "member" : "cron4s.datetime.DateTimeCron.supportedFields", "link" : "cron4s\/datetime\/DateTimeCron.html#supportedFields:List[cron4s.CronField]", "kind" : "abstract def"}, {"label" : "ranges", "tail" : "(expr: T): Map[CronField, IndexedSeq[Int]]", "member" : "cron4s.datetime.DateTimeCron.ranges", "link" : "cron4s\/datetime\/DateTimeCron.html#ranges(expr:T):Map[cron4s.CronField,IndexedSeq[Int]]", "kind" : "abstract def"}, {"label" : "step", "tail" : "(expr: T, dt: IsDateTime[DateTime])(from: DateTime, stepSize: Int): Option[DateTime]", "member" : "cron4s.datetime.DateTimeCron.step", "link" : "cron4s\/datetime\/DateTimeCron.html#step[DateTime](expr:T,dt:cron4s.datetime.IsDateTime[DateTime])(from:DateTime,stepSize:Int):Option[DateTime]", "kind" : "abstract def"}, {"label" : "matches", "tail" : "(expr: T, dt: IsDateTime[DateTime])(M: MonoidK[Predicate]): Predicate[DateTime]", "member" : "cron4s.datetime.DateTimeCron.matches", "link" : "cron4s\/datetime\/DateTimeCron.html#matches[DateTime](expr:T,dt:cron4s.datetime.IsDateTime[DateTime])(implicitM:cats.MonoidK[cron4s.base.Predicate]):cron4s.base.Predicate[DateTime]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 14\/01\/2017."}, {"name" : "cron4s.datetime.DateTimeError", "shortDescription" : "", "object" : "cron4s\/datetime\/DateTimeError$.html", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cron4s\/datetime\/DateTimeError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cron4s\/datetime\/DateTimeError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cron4s\/datetime\/DateTimeError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cron4s\/datetime\/DateTimeError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cron4s\/datetime\/DateTimeError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/DateTimeError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/DateTimeError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/DateTimeError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cron4s\/datetime\/DateTimeError.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cron4s\/datetime\/DateTimeError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cron4s\/datetime\/DateTimeError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cron4s\/datetime\/DateTimeError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cron4s\/datetime\/DateTimeError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "dateTimeErrorEq", "tail" : ": Eq[DateTimeError]", "member" : "cron4s.datetime.DateTimeError.dateTimeErrorEq", "link" : "cron4s\/datetime\/DateTimeError$.html#dateTimeErrorEq:cats.Eq[cron4s.datetime.DateTimeError]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/DateTimeError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/datetime\/DateTimeError.html", "kind" : "class"}, {"name" : "cron4s.datetime.DateTimeNode", "object" : "cron4s\/datetime\/DateTimeNode$.html", "members_object" : [{"label" : "derive", "tail" : "(E0: FieldExpr[E, F]): DateTimeNode[E, F]", "member" : "cron4s.datetime.DateTimeNode.derive", "link" : "cron4s\/datetime\/DateTimeNode$.html#derive[E[_<:cron4s.CronField],F<:cron4s.CronField](implicitE0:cron4s.expr.FieldExpr[E,F]):cron4s.datetime.DateTimeNode[E,F]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(ev: DateTimeNode[E, F]): DateTimeNode[E, F]", "member" : "cron4s.datetime.DateTimeNode.apply", "link" : "cron4s\/datetime\/DateTimeNode$.html#apply[E[_<:cron4s.CronField],F<:cron4s.CronField](implicitev:cron4s.datetime.DateTimeNode[E,F]):cron4s.datetime.DateTimeNode[E,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeNode$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/DateTimeNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeNode$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/datetime\/DateTimeNode.html", "kind" : "trait", "members_trait" : [{"label" : "stepIn", "tail" : "(expr: E[F], DT: IsDateTime[DateTime])(dateTime: DateTime, step: Int): Option[DateTime]", "member" : "cron4s.datetime.DateTimeNode.stepIn", "link" : "cron4s\/datetime\/DateTimeNode.html#stepIn[DateTime](expr:E[F],DT:cron4s.datetime.IsDateTime[DateTime])(dateTime:DateTime,step:Int):Option[DateTime]", "kind" : "def"}, {"label" : "prevIn", "tail" : "(expr: E[F], DT: IsDateTime[DateTime])(dateTime: DateTime): Option[DateTime]", "member" : "cron4s.datetime.DateTimeNode.prevIn", "link" : "cron4s\/datetime\/DateTimeNode.html#prevIn[DateTime](expr:E[F],DT:cron4s.datetime.IsDateTime[DateTime])(dateTime:DateTime):Option[DateTime]", "kind" : "def"}, {"label" : "nextIn", "tail" : "(expr: E[F], DT: IsDateTime[DateTime])(dateTime: DateTime): Option[DateTime]", "member" : "cron4s.datetime.DateTimeNode.nextIn", "link" : "cron4s\/datetime\/DateTimeNode.html#nextIn[DateTime](expr:E[F],DT:cron4s.datetime.IsDateTime[DateTime])(dateTime:DateTime):Option[DateTime]", "kind" : "def"}, {"label" : "matchesIn", "tail" : "(expr: E[F], DT: IsDateTime[DateTime]): Predicate[DateTime]", "member" : "cron4s.datetime.DateTimeNode.matchesIn", "link" : "cron4s\/datetime\/DateTimeNode.html#matchesIn[DateTime](expr:E[F],DT:cron4s.datetime.IsDateTime[DateTime]):cron4s.base.Predicate[DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/DateTimeNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeNode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "E", "tail" : "(): FieldExpr[E, F]", "member" : "cron4s.datetime.DateTimeNode.E", "link" : "cron4s\/datetime\/DateTimeNode.html#E:cron4s.expr.FieldExpr[E,F]", "kind" : "implicit abstract def"}], "shortDescription" : ""}, {"name" : "cron4s.datetime.DateTimeUnit", "object" : "cron4s\/datetime\/DateTimeUnit$.html", "members_object" : [{"label" : "Months", "tail" : "", "member" : "cron4s.datetime.DateTimeUnit.Months", "link" : "cron4s\/datetime\/DateTimeUnit$.html#Months", "kind" : "case object"}, {"label" : "Weeks", "tail" : "", "member" : "cron4s.datetime.DateTimeUnit.Weeks", "link" : "cron4s\/datetime\/DateTimeUnit$.html#Weeks", "kind" : "case object"}, {"label" : "Days", "tail" : "", "member" : "cron4s.datetime.DateTimeUnit.Days", "link" : "cron4s\/datetime\/DateTimeUnit$.html#Days", "kind" : "case object"}, {"label" : "Hours", "tail" : "", "member" : "cron4s.datetime.DateTimeUnit.Hours", "link" : "cron4s\/datetime\/DateTimeUnit$.html#Hours", "kind" : "case object"}, {"label" : "Minutes", "tail" : "", "member" : "cron4s.datetime.DateTimeUnit.Minutes", "link" : "cron4s\/datetime\/DateTimeUnit$.html#Minutes", "kind" : "case object"}, {"label" : "Seconds", "tail" : "", "member" : "cron4s.datetime.DateTimeUnit.Seconds", "link" : "cron4s\/datetime\/DateTimeUnit$.html#Seconds", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeUnit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeUnit$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeUnit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeUnit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeUnit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeUnit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeUnit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeUnit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeUnit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeUnit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeUnit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeUnit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/DateTimeUnit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeUnit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeUnit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeUnit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeUnit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeUnit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeUnit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/datetime\/DateTimeUnit.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/DateTimeUnit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/DateTimeUnit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/DateTimeUnit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/DateTimeUnit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/DateTimeUnit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/DateTimeUnit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/DateTimeUnit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeUnit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeUnit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/DateTimeUnit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/DateTimeUnit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/DateTimeUnit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/DateTimeUnit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/DateTimeUnit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/DateTimeUnit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/DateTimeUnit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/DateTimeUnit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/DateTimeUnit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/DateTimeUnit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 09\/04\/2017."}, {"name" : "cron4s.datetime.InvalidFieldValue", "shortDescription" : "", "members_case class" : [{"member" : "cron4s.datetime.InvalidFieldValue#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Int", "member" : "cron4s.datetime.InvalidFieldValue.value", "link" : "cron4s\/datetime\/InvalidFieldValue.html#value:Int", "kind" : "val"}, {"label" : "field", "tail" : ": CronField", "member" : "cron4s.datetime.InvalidFieldValue.field", "link" : "cron4s\/datetime\/InvalidFieldValue.html#field:cron4s.CronField", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/datetime\/InvalidFieldValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cron4s\/datetime\/InvalidFieldValue.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cron4s\/datetime\/InvalidFieldValue.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cron4s\/datetime\/InvalidFieldValue.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cron4s\/datetime\/InvalidFieldValue.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cron4s\/datetime\/InvalidFieldValue.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/InvalidFieldValue.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/InvalidFieldValue.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/InvalidFieldValue.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cron4s\/datetime\/InvalidFieldValue.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cron4s\/datetime\/InvalidFieldValue.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cron4s\/datetime\/InvalidFieldValue.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cron4s\/datetime\/InvalidFieldValue.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cron4s\/datetime\/InvalidFieldValue.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/InvalidFieldValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/InvalidFieldValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/InvalidFieldValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/InvalidFieldValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/InvalidFieldValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/InvalidFieldValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/InvalidFieldValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/InvalidFieldValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/InvalidFieldValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/InvalidFieldValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/InvalidFieldValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/InvalidFieldValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/InvalidFieldValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/InvalidFieldValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/InvalidFieldValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/InvalidFieldValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/datetime\/InvalidFieldValue.html", "kind" : "case class"}, {"name" : "cron4s.datetime.IsDateTime", "object" : "cron4s\/datetime\/IsDateTime$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: IsDateTime[DateTime]): IsDateTime[DateTime]", "member" : "cron4s.datetime.IsDateTime.apply", "link" : "cron4s\/datetime\/IsDateTime$.html#apply[DateTime](implicitev:cron4s.datetime.IsDateTime[DateTime]):cron4s.datetime.IsDateTime[DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/IsDateTime$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/IsDateTime$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/IsDateTime$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/IsDateTime$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/IsDateTime$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/IsDateTime$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/IsDateTime$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/IsDateTime$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/IsDateTime$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/IsDateTime$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/IsDateTime$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/IsDateTime$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/IsDateTime$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/IsDateTime$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/IsDateTime$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/IsDateTime$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/IsDateTime$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/IsDateTime$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/IsDateTime$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/datetime\/IsDateTime.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/IsDateTime.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/IsDateTime.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/IsDateTime.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/IsDateTime.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/IsDateTime.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/IsDateTime.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/IsDateTime.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/IsDateTime.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/IsDateTime.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/IsDateTime.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/IsDateTime.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/IsDateTime.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/datetime\/IsDateTime.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/IsDateTime.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/datetime\/IsDateTime.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/datetime\/IsDateTime.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/IsDateTime.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/IsDateTime.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/IsDateTime.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "set", "tail" : "(dateTime: DateTime, field: F, value: Int): Either[DateTimeError, DateTime]", "member" : "cron4s.datetime.IsDateTime.set", "link" : "cron4s\/datetime\/IsDateTime.html#set[F<:cron4s.CronField](dateTime:DateTime,field:F,value:Int):Either[cron4s.datetime.DateTimeError,DateTime]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(dateTime: DateTime, field: F): Either[DateTimeError, Int]", "member" : "cron4s.datetime.IsDateTime.get", "link" : "cron4s\/datetime\/IsDateTime.html#get[F<:cron4s.CronField](dateTime:DateTime,field:F):Either[cron4s.datetime.DateTimeError,Int]", "kind" : "abstract def"}, {"label" : "supportedFields", "tail" : "(dateTime: DateTime): List[CronField]", "member" : "cron4s.datetime.IsDateTime.supportedFields", "link" : "cron4s\/datetime\/IsDateTime.html#supportedFields(dateTime:DateTime):List[cron4s.CronField]", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(dateTime: DateTime, amount: Int, unit: DateTimeUnit): Option[DateTime]", "member" : "cron4s.datetime.IsDateTime.plus", "link" : "cron4s\/datetime\/IsDateTime.html#plus(dateTime:DateTime,amount:Int,unit:cron4s.datetime.DateTimeUnit):Option[DateTime]", "kind" : "abstract def"}], "shortDescription" : "Bridge adapter between specific date-time libraries and expression support"}, {"name" : "cron4s.datetime.UnsupportedField", "shortDescription" : "", "members_case class" : [{"member" : "cron4s.datetime.UnsupportedField#<init>", "error" : "unsupported entity"}, {"label" : "field", "tail" : ": CronField", "member" : "cron4s.datetime.UnsupportedField.field", "link" : "cron4s\/datetime\/UnsupportedField.html#field:cron4s.CronField", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/datetime\/UnsupportedField.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cron4s\/datetime\/UnsupportedField.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cron4s\/datetime\/UnsupportedField.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cron4s\/datetime\/UnsupportedField.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cron4s\/datetime\/UnsupportedField.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cron4s\/datetime\/UnsupportedField.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/UnsupportedField.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/UnsupportedField.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/datetime\/UnsupportedField.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cron4s\/datetime\/UnsupportedField.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cron4s\/datetime\/UnsupportedField.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cron4s\/datetime\/UnsupportedField.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cron4s\/datetime\/UnsupportedField.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cron4s\/datetime\/UnsupportedField.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/datetime\/UnsupportedField.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/datetime\/UnsupportedField.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/datetime\/UnsupportedField.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/datetime\/UnsupportedField.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/datetime\/UnsupportedField.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/datetime\/UnsupportedField.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/datetime\/UnsupportedField.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/UnsupportedField.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/UnsupportedField.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/datetime\/UnsupportedField.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/datetime\/UnsupportedField.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/datetime\/UnsupportedField.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/datetime\/UnsupportedField.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/datetime\/UnsupportedField.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/datetime\/UnsupportedField.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/datetime\/UnsupportedField.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/datetime\/UnsupportedField.html", "kind" : "case class"}], "cron4s.base" : [{"name" : "cron4s.base.Direction", "shortDescription" : "", "object" : "cron4s\/base\/Direction$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Direction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Direction.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Direction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Direction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Direction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Direction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Direction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Direction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Direction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Direction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Direction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Direction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/base\/Direction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Direction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/base\/Direction.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/base\/Direction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Direction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Direction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Direction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reverse", "tail" : "(): Direction", "member" : "cron4s.base.Direction.reverse", "link" : "cron4s\/base\/Direction.html#reverse:cron4s.base.Direction", "kind" : "abstract def"}], "members_object" : [{"label" : "Backwards", "tail" : "", "member" : "cron4s.base.Direction.Backwards", "link" : "cron4s\/base\/Direction$.html#Backwards", "kind" : "case object"}, {"label" : "Forward", "tail" : "", "member" : "cron4s.base.Direction.Forward", "link" : "cron4s\/base\/Direction$.html#Forward", "kind" : "case object"}, {"label" : "ofSign", "tail" : "(step: Int): Direction", "member" : "cron4s.base.Direction.ofSign", "link" : "cron4s\/base\/Direction$.html#ofSign(step:Int):cron4s.base.Direction", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Direction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Direction$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Direction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Direction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Direction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Direction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Direction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Direction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Direction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Direction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Direction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Direction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/base\/Direction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Direction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/base\/Direction$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/base\/Direction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Direction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Direction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Direction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/base\/Direction.html", "kind" : "class"}, {"name" : "cron4s.base.Enumerated", "object" : "cron4s\/base\/Enumerated$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Enumerated[A]): Enumerated[A]", "member" : "cron4s.base.Enumerated.apply", "link" : "cron4s\/base\/Enumerated$.html#apply[A](implicitev:cron4s.base.Enumerated[A]):cron4s.base.Enumerated[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Enumerated$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Enumerated$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Enumerated$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Enumerated$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Enumerated$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Enumerated$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Enumerated$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Enumerated$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Enumerated$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Enumerated$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Enumerated$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Enumerated$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/base\/Enumerated$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Enumerated$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/base\/Enumerated$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/base\/Enumerated$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Enumerated$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Enumerated$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Enumerated$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/base\/Enumerated.html", "kind" : "trait", "members_trait" : [{"label" : "prev", "tail" : "(a: A)(from: Int): Option[Int]", "member" : "cron4s.base.Enumerated.prev", "link" : "cron4s\/base\/Enumerated.html#prev(a:A)(from:Int):Option[Int]", "kind" : "def"}, {"label" : "next", "tail" : "(a: A)(from: Int): Option[Int]", "member" : "cron4s.base.Enumerated.next", "link" : "cron4s\/base\/Enumerated.html#next(a:A)(from:Int):Option[Int]", "kind" : "def"}, {"label" : "step", "tail" : "(a: A)(from: Int, stepSize: Int): Option[(Int, Int)]", "member" : "cron4s.base.Enumerated.step", "link" : "cron4s\/base\/Enumerated.html#step(a:A)(from:Int,stepSize:Int):Option[(Int,Int)]", "kind" : "def"}, {"label" : "step", "tail" : "(a: A, from: Int, step: Step): Option[(Int, Int)]", "member" : "cron4s.base.Enumerated.step", "link" : "cron4s\/base\/Enumerated.html#step(a:A,from:Int,step:cron4s.base.Step):Option[(Int,Int)]", "kind" : "def"}, {"label" : "max", "tail" : "(a: A): Int", "member" : "cron4s.base.Enumerated.max", "link" : "cron4s\/base\/Enumerated.html#max(a:A):Int", "kind" : "def"}, {"label" : "min", "tail" : "(a: A): Int", "member" : "cron4s.base.Enumerated.min", "link" : "cron4s\/base\/Enumerated.html#min(a:A):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Enumerated.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Enumerated.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Enumerated.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Enumerated.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Enumerated.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Enumerated.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Enumerated.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Enumerated.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Enumerated.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Enumerated.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Enumerated.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Enumerated.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/base\/Enumerated.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Enumerated.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/base\/Enumerated.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/base\/Enumerated.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Enumerated.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Enumerated.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Enumerated.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "range", "tail" : "(a: A): IndexedSeq[Int]", "member" : "cron4s.base.Enumerated.range", "link" : "cron4s\/base\/Enumerated.html#range(a:A):IndexedSeq[Int]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "cron4s.base.Predicate", "object" : "cron4s\/base\/Predicate$.html", "members_object" : [{"label" : "disjunction", "tail" : "", "member" : "cron4s.base.Predicate.disjunction", "link" : "cron4s\/base\/Predicate$.html#disjunction", "kind" : "object"}, {"label" : "conjunction", "tail" : "", "member" : "cron4s.base.Predicate.conjunction", "link" : "cron4s\/base\/Predicate$.html#conjunction", "kind" : "object"}, {"label" : "contravariant", "tail" : ": Contravariant[Predicate]", "member" : "cron4s.base.Predicate.contravariant", "link" : "cron4s\/base\/Predicate$.html#contravariant:cats.Contravariant[cron4s.base.Predicate]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(f: (A) => Boolean): Predicate[A]", "member" : "cron4s.base.Predicate.apply", "link" : "cron4s\/base\/Predicate$.html#apply[A](f:A=>Boolean):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Predicate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Predicate$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Predicate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Predicate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Predicate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Predicate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Predicate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Predicate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Predicate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Predicate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Predicate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Predicate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/base\/Predicate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Predicate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/base\/Predicate$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/base\/Predicate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Predicate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Predicate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Predicate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/base\/Predicate.html", "kind" : "trait", "members_trait" : [{"label" : "unary_!", "tail" : "(): Predicate[A]", "member" : "cron4s.base.Predicate.unary_!", "link" : "cron4s\/base\/Predicate.html#unary_!:cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "||", "tail" : "(m: => Predicate[A]): Predicate[A]", "member" : "cron4s.base.Predicate.||", "link" : "cron4s\/base\/Predicate.html#||(m:=>cron4s.base.Predicate[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "&&", "tail" : "(m: => Predicate[A]): Predicate[A]", "member" : "cron4s.base.Predicate.&&", "link" : "cron4s\/base\/Predicate.html#&&(m:=>cron4s.base.Predicate[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "or", "tail" : "(m: => Predicate[A]): Predicate[A]", "member" : "cron4s.base.Predicate.or", "link" : "cron4s\/base\/Predicate.html#or(m:=>cron4s.base.Predicate[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "and", "tail" : "(m: => Predicate[A]): Predicate[A]", "member" : "cron4s.base.Predicate.and", "link" : "cron4s\/base\/Predicate.html#and(m:=>cron4s.base.Predicate[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "cron4s\/base\/Predicate.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Boolean) => A): (A) => A", "member" : "scala.Function1.andThen", "link" : "cron4s\/base\/Predicate.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => A): (A) => Boolean", "member" : "scala.Function1.compose", "link" : "cron4s\/base\/Predicate.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Predicate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Predicate.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Predicate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Predicate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Predicate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Predicate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Predicate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Predicate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Predicate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Predicate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Predicate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Predicate.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Predicate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/base\/Predicate.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/base\/Predicate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Predicate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Predicate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Predicate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Boolean", "member" : "cron4s.base.Predicate.apply", "link" : "cron4s\/base\/Predicate.html#apply(a:A):Boolean", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 02\/01\/2016."}, {"name" : "cron4s.base.Step", "shortDescription" : "Created by alonsodomin on 23\/08\/2016.", "object" : "cron4s\/base\/Step$.html", "members_object" : [{"label" : "apply", "tail" : "(stepSize: Int): Step", "member" : "cron4s.base.Step.apply", "link" : "cron4s\/base\/Step$.html#apply(stepSize:Int):cron4s.base.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Step$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Step$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Step$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Step$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Step$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Step$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Step$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Step$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Step$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Step$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Step$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Step$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/base\/Step$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Step$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/base\/Step$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/base\/Step$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Step$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Step$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Step$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "reverse", "tail" : "(): Step", "member" : "cron4s.base.Step.reverse", "link" : "cron4s\/base\/Step.html#reverse:cron4s.base.Step", "kind" : "def"}, {"label" : "direction", "tail" : ": Direction", "member" : "cron4s.base.Step.direction", "link" : "cron4s\/base\/Step.html#direction:cron4s.base.Direction", "kind" : "val"}, {"label" : "amount", "tail" : ": Int", "member" : "cron4s.base.Step.amount", "link" : "cron4s\/base\/Step.html#amount:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/base\/Step.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/base\/Step.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/base\/Step.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/base\/Step.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/base\/Step.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/base\/Step.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/base\/Step.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/base\/Step.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Step.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Step.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/base\/Step.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/base\/Step.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/base\/Step.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/base\/Step.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/base\/Step.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/base\/Step.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/base\/Step.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/base\/Step.html", "kind" : "case class"}], "cron4s" : [{"name" : "cron4s.Cron", "shortDescription" : "The entry point for parsing cron expressions", "object" : "cron4s\/Cron$.html", "members_object" : [{"label" : "unsafeParse", "tail" : "(e: String): CronExpr", "member" : "cron4s.Cron.unsafeParse", "link" : "cron4s\/Cron$.html#unsafeParse(e:String):cron4s.CronExpr", "kind" : "def"}, {"label" : "tryParse", "tail" : "(e: String): Try[CronExpr]", "member" : "cron4s.Cron.tryParse", "link" : "cron4s\/Cron$.html#tryParse(e:String):scala.util.Try[cron4s.CronExpr]", "kind" : "def"}, {"label" : "parse", "tail" : "(e: String): Either[Error, CronExpr]", "member" : "cron4s.Cron.parse", "link" : "cron4s\/Cron$.html#parse(e:String):Either[cron4s.Error,cron4s.CronExpr]", "kind" : "def"}, {"label" : "apply", "tail" : "(e: String): Either[Error, CronExpr]", "member" : "cron4s.Cron.apply", "link" : "cron4s\/Cron$.html#apply(e:String):Either[cron4s.Error,cron4s.CronExpr]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/Cron$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/Cron$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/Cron$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/Cron$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/Cron$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/Cron$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/Cron$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Cron$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Cron$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Cron$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/Cron$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/Cron$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/Cron$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/Cron$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/Cron$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/Cron$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/Cron$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/Cron$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/Cron$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.CronField", "object" : "cron4s\/CronField$.html", "members_object" : [{"label" : "All", "tail" : ": List[CronField]", "member" : "cron4s.CronField.All", "link" : "cron4s\/CronField$.html#All:List[cron4s.CronField]", "kind" : "final val"}, {"label" : "DayOfWeek", "tail" : "", "member" : "cron4s.CronField.DayOfWeek", "link" : "cron4s\/CronField$.html#DayOfWeek", "kind" : "case object"}, {"label" : "DayOfWeek", "tail" : "", "member" : "cron4s.CronField.DayOfWeek", "link" : "cron4s\/CronField$.html#DayOfWeekextendsCronField", "kind" : "sealed trait"}, {"label" : "Month", "tail" : "", "member" : "cron4s.CronField.Month", "link" : "cron4s\/CronField$.html#Month", "kind" : "case object"}, {"label" : "Month", "tail" : "", "member" : "cron4s.CronField.Month", "link" : "cron4s\/CronField$.html#MonthextendsCronField", "kind" : "sealed trait"}, {"label" : "DayOfMonth", "tail" : "", "member" : "cron4s.CronField.DayOfMonth", "link" : "cron4s\/CronField$.html#DayOfMonth", "kind" : "case object"}, {"label" : "DayOfMonth", "tail" : "", "member" : "cron4s.CronField.DayOfMonth", "link" : "cron4s\/CronField$.html#DayOfMonthextendsCronField", "kind" : "sealed trait"}, {"label" : "Hour", "tail" : "", "member" : "cron4s.CronField.Hour", "link" : "cron4s\/CronField$.html#Hour", "kind" : "case object"}, {"label" : "Hour", "tail" : "", "member" : "cron4s.CronField.Hour", "link" : "cron4s\/CronField$.html#HourextendsCronField", "kind" : "sealed trait"}, {"label" : "Minute", "tail" : "", "member" : "cron4s.CronField.Minute", "link" : "cron4s\/CronField$.html#Minute", "kind" : "case object"}, {"label" : "Minute", "tail" : "", "member" : "cron4s.CronField.Minute", "link" : "cron4s\/CronField$.html#MinuteextendsCronField", "kind" : "sealed trait"}, {"label" : "Second", "tail" : "", "member" : "cron4s.CronField.Second", "link" : "cron4s\/CronField$.html#Second", "kind" : "case object"}, {"label" : "Second", "tail" : "", "member" : "cron4s.CronField.Second", "link" : "cron4s\/CronField$.html#SecondextendsCronField", "kind" : "sealed trait"}, {"label" : "cronFieldShow", "tail" : ": Show[CronField]", "member" : "cron4s.CronFieldInstances.cronFieldShow", "link" : "cron4s\/CronField$.html#cronFieldShow:cats.Show[cron4s.CronField]", "kind" : "implicit val"}, {"label" : "cronFieldEq", "tail" : ": Eq[CronField]", "member" : "cron4s.CronFieldInstances.cronFieldEq", "link" : "cron4s\/CronField$.html#cronFieldEq:cats.Eq[cron4s.CronField]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/CronField$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/CronField$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/CronField$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/CronField$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/CronField$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/CronField$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/CronField$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronField$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronField$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronField$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/CronField$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/CronField$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/CronField$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/CronField$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/CronField$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/CronField$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/CronField$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/CronField$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/CronField$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/CronField.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/CronField.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/CronField.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/CronField.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/CronField.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/CronField.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/CronField.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/CronField.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronField.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronField.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronField.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/CronField.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/CronField.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/CronField.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/CronField.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/CronField.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/CronField.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/CronField.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/CronField.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/CronField.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Each of the different fields supported in CRON expressions"}, {"name" : "cron4s.CronUnit", "object" : "cron4s\/CronUnit$.html", "members_object" : [{"label" : "DaysOfWeek", "tail" : "", "member" : "cron4s.CronUnits.DaysOfWeek", "link" : "cron4s\/CronUnit$.html#DaysOfWeek", "kind" : "implicit case object"}, {"label" : "Months", "tail" : "", "member" : "cron4s.CronUnits.Months", "link" : "cron4s\/CronUnit$.html#Months", "kind" : "implicit case object"}, {"label" : "DaysOfMonth", "tail" : "", "member" : "cron4s.CronUnits.DaysOfMonth", "link" : "cron4s\/CronUnit$.html#DaysOfMonth", "kind" : "implicit case object"}, {"label" : "Hours", "tail" : "", "member" : "cron4s.CronUnits.Hours", "link" : "cron4s\/CronUnit$.html#Hours", "kind" : "implicit case object"}, {"label" : "Minutes", "tail" : "", "member" : "cron4s.CronUnits.Minutes", "link" : "cron4s\/CronUnit$.html#Minutes", "kind" : "implicit case object"}, {"label" : "Seconds", "tail" : "", "member" : "cron4s.CronUnits.Seconds", "link" : "cron4s\/CronUnit$.html#Seconds", "kind" : "implicit case object"}, {"label" : "All", "tail" : ": List[CronUnit[_ <: CronField]]", "member" : "cron4s.CronUnit.All", "link" : "cron4s\/CronUnit$.html#All:List[cron4s.CronUnit[_<:cron4s.CronField]]", "kind" : "final val"}, {"label" : "apply", "tail" : "(unit: CronUnit[F]): CronUnit[F]", "member" : "cron4s.CronUnit.apply", "link" : "cron4s\/CronUnit$.html#apply[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):cron4s.CronUnit[F]", "kind" : "def"}, {"label" : "daysOfWeekInstance", "tail" : ": Enumerated[CronUnit[DayOfWeek]]", "member" : "cron4s.CronUnitInstances.daysOfWeekInstance", "link" : "cron4s\/CronUnit$.html#daysOfWeekInstance:cron4s.base.Enumerated[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit val"}, {"label" : "monthsInstance", "tail" : ": Enumerated[CronUnit[Month]]", "member" : "cron4s.CronUnitInstances.monthsInstance", "link" : "cron4s\/CronUnit$.html#monthsInstance:cron4s.base.Enumerated[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit val"}, {"label" : "daysOfMonthInstance", "tail" : ": Enumerated[CronUnit[DayOfMonth]]", "member" : "cron4s.CronUnitInstances.daysOfMonthInstance", "link" : "cron4s\/CronUnit$.html#daysOfMonthInstance:cron4s.base.Enumerated[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit val"}, {"label" : "hoursInstance", "tail" : ": Enumerated[CronUnit[Hour]]", "member" : "cron4s.CronUnitInstances.hoursInstance", "link" : "cron4s\/CronUnit$.html#hoursInstance:cron4s.base.Enumerated[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit val"}, {"label" : "minutesInstance", "tail" : ": Enumerated[CronUnit[Minute]]", "member" : "cron4s.CronUnitInstances.minutesInstance", "link" : "cron4s\/CronUnit$.html#minutesInstance:cron4s.base.Enumerated[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit val"}, {"label" : "secondsInstance", "tail" : ": Enumerated[CronUnit[Second]]", "member" : "cron4s.CronUnitInstances.secondsInstance", "link" : "cron4s\/CronUnit$.html#secondsInstance:cron4s.base.Enumerated[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit val"}, {"label" : "cronUnitShow", "tail" : "(): Show[CronUnit[F]]", "member" : "cron4s.CronUnits.cronUnitShow", "link" : "cron4s\/CronUnit$.html#cronUnitShow[F<:cron4s.CronField]:cats.Show[cron4s.CronUnit[F]]", "kind" : "implicit def"}, {"label" : "cronUnitEq", "tail" : "(): Eq[CronUnit[F]]", "member" : "cron4s.CronUnits.cronUnitEq", "link" : "cron4s\/CronUnit$.html#cronUnitEq[F<:cron4s.CronField]:cats.Eq[cron4s.CronUnit[F]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/CronUnit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/CronUnit$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/CronUnit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/CronUnit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/CronUnit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/CronUnit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/CronUnit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronUnit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronUnit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronUnit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/CronUnit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/CronUnit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/CronUnit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/CronUnit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/CronUnit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/CronUnit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/CronUnit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/CronUnit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/CronUnit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/CronUnit.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/CronUnit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/CronUnit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/CronUnit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/CronUnit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/CronUnit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/CronUnit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/CronUnit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronUnit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronUnit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/CronUnit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/CronUnit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/CronUnit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/CronUnit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/CronUnit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/CronUnit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/CronUnit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/CronUnit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/CronUnit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/CronUnit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "range", "tail" : "(): IndexedSeq[Int]", "member" : "cron4s.CronUnit.range", "link" : "cron4s\/CronUnit.html#range:IndexedSeq[Int]", "kind" : "abstract def"}, {"label" : "field", "tail" : "(): F", "member" : "cron4s.CronUnit.field", "link" : "cron4s\/CronUnit.html#field:F", "kind" : "abstract def"}], "shortDescription" : "A Cron Unit is the representation of valid values that are acceptedat a given Cron Field."}, {"name" : "cron4s.Error", "shortDescription" : "Created by alonsodomin on 30\/08\/2016.", "object" : "cron4s\/Error$.html", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cron4s\/Error.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cron4s\/Error.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cron4s\/Error.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cron4s\/Error.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cron4s\/Error.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/Error.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/Error.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/Error.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cron4s\/Error.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cron4s\/Error.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cron4s\/Error.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cron4s\/Error.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cron4s\/Error.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/Error.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/Error.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/Error.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/Error.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/Error.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/Error.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/Error.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Error.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Error.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Error.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/Error.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/Error.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/Error.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/Error.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/Error.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/Error.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/Error.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/Error.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "errorShow", "tail" : ": Show[Error]", "member" : "cron4s.Error.errorShow", "link" : "cron4s\/Error$.html#errorShow:cats.Show[cron4s.Error]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/Error$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/Error$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/Error$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/Error$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/Error$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/Error$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/Error$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Error$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Error$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/Error$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/Error$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/Error$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/Error$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/Error$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/Error$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/Error$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/Error$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/Error$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/Error$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/Error.html", "kind" : "class"}, {"name" : "cron4s.ExprTooShort", "case object" : "cron4s\/ExprTooShort$.html", "shortDescription" : "", "members_case object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/ExprTooShort$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "cron4s\/ExprTooShort$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cron4s\/ExprTooShort$.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cron4s\/ExprTooShort$.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cron4s\/ExprTooShort$.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cron4s\/ExprTooShort$.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cron4s\/ExprTooShort$.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/ExprTooShort$.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/ExprTooShort$.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/ExprTooShort$.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cron4s\/ExprTooShort$.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cron4s\/ExprTooShort$.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cron4s\/ExprTooShort$.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cron4s\/ExprTooShort$.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cron4s\/ExprTooShort$.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/ExprTooShort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/ExprTooShort$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/ExprTooShort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/ExprTooShort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/ExprTooShort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/ExprTooShort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/ExprTooShort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ExprTooShort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ExprTooShort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ExprTooShort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/ExprTooShort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/ExprTooShort$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/ExprTooShort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/ExprTooShort$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/ExprTooShort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/ExprTooShort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/ExprTooShort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "cron4s.InvalidCron", "shortDescription" : "", "members_case class" : [{"member" : "cron4s.InvalidCron#<init>", "error" : "unsupported entity"}, {"label" : "reason", "tail" : ": NonEmptyList[ValidationError]", "member" : "cron4s.InvalidCron.reason", "link" : "cron4s\/InvalidCron.html#reason:cats.data.NonEmptyList[cron4s.ValidationError]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/InvalidCron.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cron4s\/InvalidCron.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cron4s\/InvalidCron.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cron4s\/InvalidCron.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cron4s\/InvalidCron.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cron4s\/InvalidCron.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/InvalidCron.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/InvalidCron.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/InvalidCron.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cron4s\/InvalidCron.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cron4s\/InvalidCron.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cron4s\/InvalidCron.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cron4s\/InvalidCron.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cron4s\/InvalidCron.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/InvalidCron.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/InvalidCron.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/InvalidCron.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/InvalidCron.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/InvalidCron.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/InvalidCron.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/InvalidCron.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidCron.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidCron.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidCron.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/InvalidCron.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/InvalidCron.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/InvalidCron.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/InvalidCron.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/InvalidCron.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/InvalidCron.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/InvalidCron.html", "kind" : "case class"}, {"name" : "cron4s.InvalidField", "shortDescription" : "", "object" : "cron4s\/InvalidField$.html", "members_object" : [{"label" : "invalidFieldShow", "tail" : ": Show[InvalidField]", "member" : "cron4s.InvalidField.invalidFieldShow", "link" : "cron4s\/InvalidField$.html#invalidFieldShow:cats.Show[cron4s.InvalidField]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/InvalidField$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/InvalidField$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/InvalidField$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/InvalidField$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/InvalidField$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/InvalidField$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/InvalidField$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidField$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidField$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidField$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/InvalidField$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/InvalidField$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/InvalidField$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/InvalidField$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/InvalidField$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/InvalidField$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/InvalidField$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/InvalidField$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/InvalidField$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "cron4s.InvalidField#<init>", "error" : "unsupported entity"}, {"label" : "msg", "tail" : ": String", "member" : "cron4s.InvalidField.msg", "link" : "cron4s\/InvalidField.html#msg:String", "kind" : "val"}, {"label" : "field", "tail" : ": CronField", "member" : "cron4s.InvalidField.field", "link" : "cron4s\/InvalidField.html#field:cron4s.CronField", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/InvalidField.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/InvalidField.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/InvalidField.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/InvalidField.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/InvalidField.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/InvalidField.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/InvalidField.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/InvalidField.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidField.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidField.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidField.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/InvalidField.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/InvalidField.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/InvalidField.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/InvalidField.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/InvalidField.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/InvalidField.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/InvalidField.html", "kind" : "case class"}, {"name" : "cron4s.InvalidFieldCombination", "shortDescription" : "", "object" : "cron4s\/InvalidFieldCombination$.html", "members_object" : [{"label" : "invalidFieldCombinationShow", "tail" : ": Show[InvalidFieldCombination]", "member" : "cron4s.InvalidFieldCombination.invalidFieldCombinationShow", "link" : "cron4s\/InvalidFieldCombination$.html#invalidFieldCombinationShow:cats.Show[cron4s.InvalidFieldCombination]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/InvalidFieldCombination$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/InvalidFieldCombination$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/InvalidFieldCombination$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/InvalidFieldCombination$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/InvalidFieldCombination$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/InvalidFieldCombination$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/InvalidFieldCombination$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidFieldCombination$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidFieldCombination$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidFieldCombination$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/InvalidFieldCombination$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/InvalidFieldCombination$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/InvalidFieldCombination$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/InvalidFieldCombination$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/InvalidFieldCombination$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/InvalidFieldCombination$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/InvalidFieldCombination$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/InvalidFieldCombination$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/InvalidFieldCombination$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "cron4s.InvalidFieldCombination#<init>", "error" : "unsupported entity"}, {"label" : "msg", "tail" : ": String", "member" : "cron4s.InvalidFieldCombination.msg", "link" : "cron4s\/InvalidFieldCombination.html#msg:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/InvalidFieldCombination.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/InvalidFieldCombination.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/InvalidFieldCombination.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/InvalidFieldCombination.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/InvalidFieldCombination.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/InvalidFieldCombination.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/InvalidFieldCombination.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/InvalidFieldCombination.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidFieldCombination.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidFieldCombination.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/InvalidFieldCombination.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/InvalidFieldCombination.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/InvalidFieldCombination.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/InvalidFieldCombination.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/InvalidFieldCombination.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/InvalidFieldCombination.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/InvalidFieldCombination.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/InvalidFieldCombination.html", "kind" : "case class"}, {"name" : "cron4s.ParseFailed", "shortDescription" : "", "object" : "cron4s\/ParseFailed$.html", "members_object" : [{"label" : "apply", "tail" : "(msg: String, found: String, position: Int): ParseFailed", "member" : "cron4s.ParseFailed.apply", "link" : "cron4s\/ParseFailed$.html#apply(msg:String,found:String,position:Int):cron4s.ParseFailed", "kind" : "def"}, {"label" : "apply", "tail" : "(expected: String, position: Int, found: Option[String]): ParseFailed", "member" : "cron4s.ParseFailed.apply", "link" : "cron4s\/ParseFailed$.html#apply(expected:String,position:Int,found:Option[String]):cron4s.ParseFailed", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/ParseFailed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/ParseFailed$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/ParseFailed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/ParseFailed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/ParseFailed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/ParseFailed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/ParseFailed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ParseFailed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ParseFailed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ParseFailed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/ParseFailed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/ParseFailed$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/ParseFailed$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/ParseFailed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/ParseFailed$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/ParseFailed$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/ParseFailed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/ParseFailed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/ParseFailed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "cron4s.ParseFailed#<init>", "error" : "unsupported entity"}, {"label" : "found", "tail" : ": Option[String]", "member" : "cron4s.ParseFailed.found", "link" : "cron4s\/ParseFailed.html#found:Option[String]", "kind" : "val"}, {"label" : "position", "tail" : ": Int", "member" : "cron4s.ParseFailed.position", "link" : "cron4s\/ParseFailed.html#position:Int", "kind" : "val"}, {"label" : "expected", "tail" : ": String", "member" : "cron4s.ParseFailed.expected", "link" : "cron4s\/ParseFailed.html#expected:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/ParseFailed.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cron4s\/ParseFailed.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cron4s\/ParseFailed.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cron4s\/ParseFailed.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cron4s\/ParseFailed.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cron4s\/ParseFailed.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/ParseFailed.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/ParseFailed.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cron4s\/ParseFailed.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cron4s\/ParseFailed.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cron4s\/ParseFailed.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cron4s\/ParseFailed.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cron4s\/ParseFailed.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cron4s\/ParseFailed.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/ParseFailed.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/ParseFailed.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/ParseFailed.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/ParseFailed.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/ParseFailed.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/ParseFailed.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/ParseFailed.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ParseFailed.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ParseFailed.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ParseFailed.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/ParseFailed.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/ParseFailed.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/ParseFailed.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/ParseFailed.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/ParseFailed.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/ParseFailed.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/ParseFailed.html", "kind" : "case class"}, {"name" : "cron4s.ValidationError", "object" : "cron4s\/ValidationError$.html", "members_object" : [{"label" : "validationErrorShow", "tail" : ": Show[ValidationError]", "member" : "cron4s.ValidationError.validationErrorShow", "link" : "cron4s\/ValidationError$.html#validationErrorShow:cats.Show[cron4s.ValidationError]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/ValidationError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/ValidationError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/ValidationError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/ValidationError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/ValidationError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/ValidationError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/ValidationError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ValidationError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ValidationError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ValidationError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/ValidationError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/ValidationError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/ValidationError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/ValidationError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/ValidationError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/ValidationError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/ValidationError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/ValidationError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/ValidationError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/ValidationError.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/ValidationError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/ValidationError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/ValidationError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/ValidationError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/ValidationError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/ValidationError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/ValidationError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ValidationError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ValidationError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/ValidationError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/ValidationError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/ValidationError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/ValidationError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/ValidationError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/ValidationError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/ValidationError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/ValidationError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/ValidationError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/ValidationError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "cron4s.validation" : [{"name" : "cron4s.validation.NodeValidator", "object" : "cron4s\/validation\/NodeValidator$.html", "members_object" : [{"label" : "alwaysValid", "tail" : "(): NodeValidator[A]", "member" : "cron4s.validation.NodeValidator.alwaysValid", "link" : "cron4s\/validation\/NodeValidator$.html#alwaysValid[A]:cron4s.validation.NodeValidator[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(validator: NodeValidator[A]): NodeValidator[A]", "member" : "cron4s.validation.NodeValidator.apply", "link" : "cron4s\/validation\/NodeValidator$.html#apply[A](implicitvalidator:cron4s.validation.NodeValidator[A]):cron4s.validation.NodeValidator[A]", "kind" : "def"}, {"label" : "everyValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[EveryNode[F]]", "member" : "cron4s.validation.NodeValidatorInstances.everyValidator", "link" : "cron4s\/validation\/NodeValidator$.html#everyValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.EveryNode[F]]", "kind" : "implicit def"}, {"label" : "severalValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[SeveralNode[F]]", "member" : "cron4s.validation.NodeValidatorInstances.severalValidator", "link" : "cron4s\/validation\/NodeValidator$.html#severalValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.SeveralNode[F]]", "kind" : "implicit def"}, {"label" : "betweenValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[BetweenNode[F]]", "member" : "cron4s.validation.NodeValidatorInstances.betweenValidator", "link" : "cron4s\/validation\/NodeValidator$.html#betweenValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.BetweenNode[F]]", "kind" : "implicit def"}, {"label" : "constValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[ConstNode[F]]", "member" : "cron4s.validation.NodeValidatorInstances.constValidator", "link" : "cron4s\/validation\/NodeValidator$.html#constValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.ConstNode[F]]", "kind" : "implicit def"}, {"label" : "anyValidator", "tail" : "(): NodeValidator[AnyNode[F]]", "member" : "cron4s.validation.NodeValidatorInstances.anyValidator", "link" : "cron4s\/validation\/NodeValidator$.html#anyValidator[F<:cron4s.CronField]:cron4s.validation.NodeValidator[cron4s.expr.AnyNode[F]]", "kind" : "implicit def"}, {"label" : "eachValidator", "tail" : "(): NodeValidator[EachNode[F]]", "member" : "cron4s.validation.NodeValidatorInstances.eachValidator", "link" : "cron4s\/validation\/NodeValidator$.html#eachValidator[F<:cron4s.CronField]:cron4s.validation.NodeValidator[cron4s.expr.EachNode[F]]", "kind" : "implicit def"}, {"label" : "fieldNodeWithAnyValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[FieldNodeWithAny[F]]", "member" : "cron4s.validation.LowPriorityNodeValidatorInstances.fieldNodeWithAnyValidator", "link" : "cron4s\/validation\/NodeValidator$.html#fieldNodeWithAnyValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "implicit def"}, {"label" : "fieldNodeValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[FieldNode[F]]", "member" : "cron4s.validation.LowPriorityNodeValidatorInstances.fieldNodeValidator", "link" : "cron4s\/validation\/NodeValidator$.html#fieldNodeValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.FieldNode[F]]", "kind" : "implicit def"}, {"label" : "divisibleNodeValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[DivisibleNode[F]]", "member" : "cron4s.validation.LowPriorityNodeValidatorInstances.divisibleNodeValidator", "link" : "cron4s\/validation\/NodeValidator$.html#divisibleNodeValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.DivisibleNode[F]]", "kind" : "implicit def"}, {"label" : "enumerableNodeValidator", "tail" : "(ev: Enumerated[CronUnit[F]]): NodeValidator[EnumerableNode[F]]", "member" : "cron4s.validation.LowPriorityNodeValidatorInstances.enumerableNodeValidator", "link" : "cron4s\/validation\/NodeValidator$.html#enumerableNodeValidator[F<:cron4s.CronField](implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):cron4s.validation.NodeValidator[cron4s.expr.EnumerableNode[F]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/validation\/NodeValidator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/validation\/NodeValidator$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/validation\/NodeValidator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/validation\/NodeValidator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/validation\/NodeValidator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/validation\/NodeValidator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/validation\/NodeValidator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/validation\/NodeValidator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/validation\/NodeValidator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/validation\/NodeValidator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/validation\/NodeValidator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/validation\/NodeValidator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/validation\/NodeValidator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/validation\/NodeValidator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/validation\/NodeValidator$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/validation\/NodeValidator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/validation\/NodeValidator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/validation\/NodeValidator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/validation\/NodeValidator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/validation\/NodeValidator.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/validation\/NodeValidator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/validation\/NodeValidator.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/validation\/NodeValidator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/validation\/NodeValidator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/validation\/NodeValidator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/validation\/NodeValidator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/validation\/NodeValidator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/validation\/NodeValidator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/validation\/NodeValidator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/validation\/NodeValidator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/validation\/NodeValidator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/validation\/NodeValidator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/validation\/NodeValidator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/validation\/NodeValidator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/validation\/NodeValidator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/validation\/NodeValidator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/validation\/NodeValidator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/validation\/NodeValidator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/validation\/NodeValidator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "validate", "tail" : "(node: A): List[InvalidField]", "member" : "cron4s.validation.NodeValidator.validate", "link" : "cron4s\/validation\/NodeValidator.html#validate(node:A):List[cron4s.InvalidField]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 18\/12\/2016."}], "cron4s.testkit.discipline" : [{"name" : "cron4s.testkit.discipline.DateTimeCronTests", "object" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html", "members_object" : [{"label" : "apply", "tail" : "(dtEv: IsDateTime[DateTime], cron: DateTimeCron[E]): DateTimeCronTests[E, DateTime]", "member" : "cron4s.testkit.discipline.DateTimeCronTests.apply", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#apply[E,DateTime](implicitdtEv:cron4s.datetime.IsDateTime[DateTime],implicitcron:cron4s.datetime.DateTimeCron[E]):cron4s.testkit.discipline.DateTimeCronTests[E,DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "dateTimeCron", "tail" : "(arbE: Arbitrary[E], arbDateTime: Arbitrary[DateTime], dateTimeEq: Eq[DateTime]): RuleSet", "member" : "cron4s.testkit.discipline.DateTimeCronTests.dateTimeCron", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#dateTimeCron(implicitarbE:org.scalacheck.Arbitrary[E],implicitarbDateTime:org.scalacheck.Arbitrary[DateTime],implicitdateTimeEq:cats.Eq[DateTime]):DateTimeCronTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): DateTimeCronLaws[E, DateTime]", "member" : "cron4s.testkit.discipline.DateTimeCronTests.laws", "link" : "cron4s\/testkit\/discipline\/DateTimeCronTests.html#laws:cron4s.testkit.laws.DateTimeCronLaws[E,DateTime]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 29\/01\/2017."}, {"name" : "cron4s.testkit.discipline.DateTimeNodeTests", "object" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html", "members_object" : [{"label" : "apply", "tail" : "(dtEv: IsDateTime[DateTime], expr: FieldExpr[E, F]): DateTimeNodeTests[E, F, DateTime]", "member" : "cron4s.testkit.discipline.DateTimeNodeTests.apply", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#apply[E[_<:cron4s.CronField],F<:cron4s.CronField,DateTime](implicitdtEv:cron4s.datetime.IsDateTime[DateTime],implicitexpr:cron4s.expr.FieldExpr[E,F]):cron4s.testkit.discipline.DateTimeNodeTests[E,F,DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "dateTime", "tail" : "(arbNode: Arbitrary[E[F]], arbDateTime: Arbitrary[DateTime], dateTimeEq: Eq[DateTime]): RuleSet", "member" : "cron4s.testkit.discipline.DateTimeNodeTests.dateTime", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#dateTime(implicitarbNode:org.scalacheck.Arbitrary[E[F]],implicitarbDateTime:org.scalacheck.Arbitrary[DateTime],implicitdateTimeEq:cats.Eq[DateTime]):DateTimeNodeTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): DateTimeNodeLaws[E, F, DateTime]", "member" : "cron4s.testkit.discipline.DateTimeNodeTests.laws", "link" : "cron4s\/testkit\/discipline\/DateTimeNodeTests.html#laws:cron4s.testkit.laws.DateTimeNodeLaws[E,F,DateTime]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.discipline.EnumeratedTests", "object" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: Enumerated[A]): EnumeratedTests[A]", "member" : "cron4s.testkit.discipline.EnumeratedTests.apply", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#apply[A](implicitev:cron4s.base.Enumerated[A]):cron4s.testkit.discipline.EnumeratedTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/discipline\/EnumeratedTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "enumerated", "tail" : "(arbAF: Arbitrary[A], arbFrom: Arbitrary[Int]): RuleSet", "member" : "cron4s.testkit.discipline.EnumeratedTests.enumerated", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#enumerated(implicitarbAF:org.scalacheck.Arbitrary[A],implicitarbFrom:org.scalacheck.Arbitrary[Int]):EnumeratedTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): EnumeratedLaws[A]", "member" : "cron4s.testkit.discipline.EnumeratedTests.laws", "link" : "cron4s\/testkit\/discipline\/EnumeratedTests.html#laws:cron4s.testkit.laws.EnumeratedLaws[A]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 27\/08\/2016."}, {"name" : "cron4s.testkit.discipline.FieldExprTests", "object" : "cron4s\/testkit\/discipline\/FieldExprTests$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: FieldExpr[E, F]): FieldExprTests[E, F]", "member" : "cron4s.testkit.discipline.FieldExprTests.apply", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#apply[E[_<:cron4s.CronField],F<:cron4s.CronField](implicitev:cron4s.expr.FieldExpr[E,F]):cron4s.testkit.discipline.FieldExprTests[E,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/FieldExprTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/discipline\/FieldExprTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "expr", "tail" : "(arbEF: Arbitrary[E[F]], arbEEF: Arbitrary[EE[F]], arbFrom: Arbitrary[Int], e: FieldExpr[EE, F]): RuleSet", "member" : "cron4s.testkit.discipline.FieldExprTests.expr", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#expr[EE[_<:cron4s.CronField]](implicitarbEF:org.scalacheck.Arbitrary[E[F]],implicitarbEEF:org.scalacheck.Arbitrary[EE[F]],implicitarbFrom:org.scalacheck.Arbitrary[Int],implicite:cron4s.expr.FieldExpr[EE,F]):FieldExprTests.this.RuleSet", "kind" : "def"}, {"label" : "enumerated", "tail" : "(arbAF: Arbitrary[E[F]], arbFrom: Arbitrary[Int]): RuleSet", "member" : "cron4s.testkit.discipline.EnumeratedTests.enumerated", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#enumerated(implicitarbAF:org.scalacheck.Arbitrary[A],implicitarbFrom:org.scalacheck.Arbitrary[Int]):EnumeratedTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): FieldExprLaws[E, F]", "member" : "cron4s.testkit.discipline.FieldExprTests.laws", "link" : "cron4s\/testkit\/discipline\/FieldExprTests.html#laws:cron4s.testkit.laws.FieldExprLaws[E,F]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.discipline.IsDateTimeTests", "object" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html", "members_object" : [{"label" : "apply", "tail" : "(dtEv: IsDateTime[DateTime], eqEv: Eq[DateTime]): IsDateTimeTests[DateTime]", "member" : "cron4s.testkit.discipline.IsDateTimeTests.apply", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#apply[DateTime](implicitdtEv:cron4s.datetime.IsDateTime[DateTime],impliciteqEv:cats.Eq[DateTime]):cron4s.testkit.discipline.IsDateTimeTests[DateTime]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html", "kind" : "trait", "members_trait" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "dateTime", "tail" : "(arbDateTime: Arbitrary[DateTime], arbFieldValue: Arbitrary[CronFieldValue[F]], arbField: Arbitrary[F]): RuleSet", "member" : "cron4s.testkit.discipline.IsDateTimeTests.dateTime", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#dateTime[F<:cron4s.CronField](implicitarbDateTime:org.scalacheck.Arbitrary[DateTime],implicitarbFieldValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[F]],implicitarbField:org.scalacheck.Arbitrary[F]):IsDateTimeTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): IsDateTimeLaws[DateTime]", "member" : "cron4s.testkit.discipline.IsDateTimeTests.laws", "link" : "cron4s\/testkit\/discipline\/IsDateTimeTests.html#laws:cron4s.testkit.laws.IsDateTimeLaws[DateTime]", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 29\/08\/2016."}, {"name" : "cron4s.testkit.discipline.PredicateTests", "shortDescription" : "Created by alonsodomin on 10\/04\/2017.", "object" : "cron4s\/testkit\/discipline\/PredicateTests$.html", "members_object" : [{"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "predicate", "tail" : "(arg0: Foldable[F], arbPred: Arbitrary[Predicate[A]], arbFold: Arbitrary[F[Predicate[A]]], arbA: Arbitrary[A]): RuleSet", "member" : "cron4s.testkit.discipline.PredicateTests.predicate", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#predicate[F[_],A](implicitevidence$1:cats.Foldable[F],implicitarbPred:org.scalacheck.Arbitrary[cron4s.base.Predicate[A]],implicitarbFold:org.scalacheck.Arbitrary[F[cron4s.base.Predicate[A]]],implicitarbA:org.scalacheck.Arbitrary[A]):cron4s.testkit.discipline.PredicateTests.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/discipline\/PredicateTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "cron4s.testkit.gen" : [{"name" : "cron4s.testkit.gen.ArbitraryBetweenNode", "trait" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryBetweenDayOfWeek", "tail" : ": Arbitrary[BetweenNode[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryBetweenNode.arbitraryBetweenDayOfWeek", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryBetweenDayOfWeek:org.scalacheck.Arbitrary[cron4s.expr.BetweenNode[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryBetweenMonth", "tail" : ": Arbitrary[BetweenNode[Month]]", "member" : "cron4s.testkit.gen.ArbitraryBetweenNode.arbitraryBetweenMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryBetweenMonth:org.scalacheck.Arbitrary[cron4s.expr.BetweenNode[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryBetweenDayOfMonth", "tail" : ": Arbitrary[BetweenNode[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryBetweenNode.arbitraryBetweenDayOfMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryBetweenDayOfMonth:org.scalacheck.Arbitrary[cron4s.expr.BetweenNode[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryBetweenHour", "tail" : ": Arbitrary[BetweenNode[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryBetweenNode.arbitraryBetweenHour", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryBetweenHour:org.scalacheck.Arbitrary[cron4s.expr.BetweenNode[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryBetweenMinute", "tail" : ": Arbitrary[BetweenNode[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryBetweenNode.arbitraryBetweenMinute", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryBetweenMinute:org.scalacheck.Arbitrary[cron4s.expr.BetweenNode[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryBetweenSecond", "tail" : ": Arbitrary[BetweenNode[Second]]", "member" : "cron4s.testkit.gen.ArbitraryBetweenNode.arbitraryBetweenSecond", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryBetweenSecond:org.scalacheck.Arbitrary[cron4s.expr.BetweenNode[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryBetweenNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.gen.ArbitraryConstNode", "trait" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryConstDayOfWeek", "tail" : ": Arbitrary[ConstNode[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryConstNode.arbitraryConstDayOfWeek", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryConstDayOfWeek:org.scalacheck.Arbitrary[cron4s.expr.ConstNode[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryConstMonth", "tail" : ": Arbitrary[ConstNode[Month]]", "member" : "cron4s.testkit.gen.ArbitraryConstNode.arbitraryConstMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryConstMonth:org.scalacheck.Arbitrary[cron4s.expr.ConstNode[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryConstDayOfMonth", "tail" : ": Arbitrary[ConstNode[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryConstNode.arbitraryConstDayOfMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryConstDayOfMonth:org.scalacheck.Arbitrary[cron4s.expr.ConstNode[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryConstHour", "tail" : ": Arbitrary[ConstNode[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryConstNode.arbitraryConstHour", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryConstHour:org.scalacheck.Arbitrary[cron4s.expr.ConstNode[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryConstMinute", "tail" : ": Arbitrary[ConstNode[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryConstNode.arbitraryConstMinute", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryConstMinute:org.scalacheck.Arbitrary[cron4s.expr.ConstNode[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryConstSecond", "tail" : ": Arbitrary[ConstNode[Second]]", "member" : "cron4s.testkit.gen.ArbitraryConstNode.arbitraryConstSecond", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryConstSecond:org.scalacheck.Arbitrary[cron4s.expr.ConstNode[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryConstNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.gen.ArbitraryCronField", "trait" : "cron4s\/testkit\/gen\/ArbitraryCronField.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryDayOfWeek", "tail" : ": Arbitrary[DayOfWeek]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryDayOfWeek", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#arbitraryDayOfWeek:org.scalacheck.Arbitrary[cron4s.CronField.DayOfWeek]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonth", "tail" : ": Arbitrary[Month]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#arbitraryMonth:org.scalacheck.Arbitrary[cron4s.CronField.Month]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDayOfMonth", "tail" : ": Arbitrary[DayOfMonth]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryDayOfMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#arbitraryDayOfMonth:org.scalacheck.Arbitrary[cron4s.CronField.DayOfMonth]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHour", "tail" : ": Arbitrary[Hour]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryHour", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#arbitraryHour:org.scalacheck.Arbitrary[cron4s.CronField.Hour]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinute", "tail" : ": Arbitrary[Minute]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryMinute", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#arbitraryMinute:org.scalacheck.Arbitrary[cron4s.CronField.Minute]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecond", "tail" : ": Arbitrary[Second]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitrarySecond", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#arbitrarySecond:org.scalacheck.Arbitrary[cron4s.CronField.Second]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryCronField.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by domingueza on 31\/01\/2017."}, {"name" : "cron4s.testkit.gen.ArbitraryCronFieldValues", "trait" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryDayOfWeekValue", "tail" : ": Arbitrary[CronFieldValue[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryDayOfWeekValue", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#arbitraryDayOfWeekValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthValue", "tail" : ": Arbitrary[CronFieldValue[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryMonthValue", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#arbitraryMonthValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDayOfMonthValue", "tail" : ": Arbitrary[CronFieldValue[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryDayOfMonthValue", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#arbitraryDayOfMonthValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHourValue", "tail" : ": Arbitrary[CronFieldValue[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryHourValue", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#arbitraryHourValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinuteValue", "tail" : ": Arbitrary[CronFieldValue[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryMinuteValue", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#arbitraryMinuteValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondValue", "tail" : ": Arbitrary[CronFieldValue[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitrarySecondValue", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#arbitrarySecondValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "cronFieldValueGen", "tail" : "(unit: CronUnit[F])(ev: Enumerated[CronUnit[F]]): Gen[CronFieldValue[F]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.cronFieldValueGen", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#cronFieldValueGen[F<:cron4s.CronField](unit:cron4s.CronUnit[F])(implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.testkit.CronFieldValue[F]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryCronFieldValues.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 29\/08\/2016."}, {"name" : "cron4s.testkit.gen.ArbitraryCronUnits", "trait" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryCronUnits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.gen.ArbitraryEachNode", "trait" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryEachDayOfWeek", "tail" : ": Arbitrary[EachNode[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryEachNode.arbitraryEachDayOfWeek", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryEachDayOfWeek:org.scalacheck.Arbitrary[cron4s.expr.EachNode[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEachMonth", "tail" : ": Arbitrary[EachNode[Month]]", "member" : "cron4s.testkit.gen.ArbitraryEachNode.arbitraryEachMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryEachMonth:org.scalacheck.Arbitrary[cron4s.expr.EachNode[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEachDayOfMonth", "tail" : ": Arbitrary[EachNode[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryEachNode.arbitraryEachDayOfMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryEachDayOfMonth:org.scalacheck.Arbitrary[cron4s.expr.EachNode[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEachHour", "tail" : ": Arbitrary[EachNode[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryEachNode.arbitraryEachHour", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryEachHour:org.scalacheck.Arbitrary[cron4s.expr.EachNode[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEachMinute", "tail" : ": Arbitrary[EachNode[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryEachNode.arbitraryEachMinute", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryEachMinute:org.scalacheck.Arbitrary[cron4s.expr.EachNode[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEachSecond", "tail" : ": Arbitrary[EachNode[Second]]", "member" : "cron4s.testkit.gen.ArbitraryEachNode.arbitraryEachSecond", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryEachSecond:org.scalacheck.Arbitrary[cron4s.expr.EachNode[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryEachNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.gen.ArbitraryEveryNode", "trait" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryEveryDayOfWeek", "tail" : ": Arbitrary[EveryNode[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryEveryNode.arbitraryEveryDayOfWeek", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryEveryDayOfWeek:org.scalacheck.Arbitrary[cron4s.expr.EveryNode[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEveryMonth", "tail" : ": Arbitrary[EveryNode[Month]]", "member" : "cron4s.testkit.gen.ArbitraryEveryNode.arbitraryEveryMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryEveryMonth:org.scalacheck.Arbitrary[cron4s.expr.EveryNode[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEveryDayOfMonth", "tail" : ": Arbitrary[EveryNode[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryEveryNode.arbitraryEveryDayOfMonth", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryEveryDayOfMonth:org.scalacheck.Arbitrary[cron4s.expr.EveryNode[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEveryHour", "tail" : ": Arbitrary[EveryNode[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryEveryNode.arbitraryEveryHour", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryEveryHour:org.scalacheck.Arbitrary[cron4s.expr.EveryNode[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEveryMinute", "tail" : ": Arbitrary[EveryNode[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryEveryNode.arbitraryEveryMinute", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryEveryMinute:org.scalacheck.Arbitrary[cron4s.expr.EveryNode[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryEverySecond", "tail" : ": Arbitrary[EveryNode[Second]]", "member" : "cron4s.testkit.gen.ArbitraryEveryNode.arbitraryEverySecond", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryEverySecond:org.scalacheck.Arbitrary[cron4s.expr.EveryNode[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitraryEveryNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.gen.ArbitrarySeveralNode", "trait" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html", "kind" : "trait", "members_trait" : [{"label" : "arbitrarySeveralDayOfWeek", "tail" : ": Arbitrary[SeveralNode[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitrarySeveralNode.arbitrarySeveralDayOfWeek", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitrarySeveralDayOfWeek:org.scalacheck.Arbitrary[cron4s.expr.SeveralNode[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySeveralMonth", "tail" : ": Arbitrary[SeveralNode[Month]]", "member" : "cron4s.testkit.gen.ArbitrarySeveralNode.arbitrarySeveralMonth", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitrarySeveralMonth:org.scalacheck.Arbitrary[cron4s.expr.SeveralNode[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySeveralDayOfMonth", "tail" : ": Arbitrary[SeveralNode[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitrarySeveralNode.arbitrarySeveralDayOfMonth", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitrarySeveralDayOfMonth:org.scalacheck.Arbitrary[cron4s.expr.SeveralNode[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySeveralHour", "tail" : ": Arbitrary[SeveralNode[Hour]]", "member" : "cron4s.testkit.gen.ArbitrarySeveralNode.arbitrarySeveralHour", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitrarySeveralHour:org.scalacheck.Arbitrary[cron4s.expr.SeveralNode[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySeveralMinute", "tail" : ": Arbitrary[SeveralNode[Minute]]", "member" : "cron4s.testkit.gen.ArbitrarySeveralNode.arbitrarySeveralMinute", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitrarySeveralMinute:org.scalacheck.Arbitrary[cron4s.expr.SeveralNode[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySeveralSecond", "tail" : ": Arbitrary[SeveralNode[Second]]", "member" : "cron4s.testkit.gen.ArbitrarySeveralNode.arbitrarySeveralSecond", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitrarySeveralSecond:org.scalacheck.Arbitrary[cron4s.expr.SeveralNode[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitrarySeveralNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}, {"name" : "cron4s.testkit.gen.ArbitratyAnyNode", "trait" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryAnyDayOfWeek", "tail" : ": Arbitrary[AnyNode[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitratyAnyNode.arbitraryAnyDayOfWeek", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryAnyDayOfWeek:org.scalacheck.Arbitrary[cron4s.expr.AnyNode[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryAnyMonth", "tail" : ": Arbitrary[AnyNode[Month]]", "member" : "cron4s.testkit.gen.ArbitratyAnyNode.arbitraryAnyMonth", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryAnyMonth:org.scalacheck.Arbitrary[cron4s.expr.AnyNode[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryAnyDayOfMonth", "tail" : ": Arbitrary[AnyNode[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitratyAnyNode.arbitraryAnyDayOfMonth", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryAnyDayOfMonth:org.scalacheck.Arbitrary[cron4s.expr.AnyNode[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryAnyHour", "tail" : ": Arbitrary[AnyNode[Hour]]", "member" : "cron4s.testkit.gen.ArbitratyAnyNode.arbitraryAnyHour", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryAnyHour:org.scalacheck.Arbitrary[cron4s.expr.AnyNode[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryAnyMinute", "tail" : ": Arbitrary[AnyNode[Minute]]", "member" : "cron4s.testkit.gen.ArbitratyAnyNode.arbitraryAnyMinute", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryAnyMinute:org.scalacheck.Arbitrary[cron4s.expr.AnyNode[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryAnySecond", "tail" : ": Arbitrary[AnyNode[Second]]", "member" : "cron4s.testkit.gen.ArbitratyAnyNode.arbitraryAnySecond", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryAnySecond:org.scalacheck.Arbitrary[cron4s.expr.AnyNode[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/ArbitratyAnyNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 10\/02\/2017."}, {"name" : "cron4s.testkit.gen.CronGenerators", "trait" : "cron4s\/testkit\/gen\/CronGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryDateCron", "tail" : ": Arbitrary[DateCronExpr]", "member" : "cron4s.testkit.gen.CronGenerators.arbitraryDateCron", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryDateCron:org.scalacheck.Arbitrary[cron4s.expr.DateCronExpr]", "kind" : "implicit lazy val"}, {"label" : "arbitraryTimeCron", "tail" : ": Arbitrary[TimeCronExpr]", "member" : "cron4s.testkit.gen.CronGenerators.arbitraryTimeCron", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryTimeCron:org.scalacheck.Arbitrary[cron4s.expr.TimeCronExpr]", "kind" : "implicit lazy val"}, {"label" : "arbitraryFullCron", "tail" : ": Arbitrary[expr.CronExpr]", "member" : "cron4s.testkit.gen.CronGenerators.arbitraryFullCron", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryFullCron:org.scalacheck.Arbitrary[cron4s.expr.CronExpr]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/CronGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/CronGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 29\/01\/2017."}, {"name" : "cron4s.testkit.gen.NodeGenerators", "trait" : "cron4s\/testkit\/gen\/NodeGenerators.html", "kind" : "trait", "members_trait" : [{"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/gen\/NodeGenerators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 28\/08\/2016."}], "cron4s.syntax" : [{"name" : "cron4s.syntax.all", "shortDescription" : "", "object" : "cron4s\/syntax\/all$.html", "members_object" : [{"label" : "asOf", "tail" : "(c: C[Predicate[A]])(arg0: Foldable[C], M: MonoidK[Predicate]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.asOf", "link" : "cron4s\/syntax\/all$.html#asOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitevidence$2:cats.Foldable[C],implicitM:cats.MonoidK[cron4s.base.Predicate]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "allOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.allOf", "link" : "cron4s\/syntax\/all$.html#allOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "anyOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.anyOf", "link" : "cron4s\/syntax\/all$.html#anyOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "noneOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.noneOf", "link" : "cron4s\/syntax\/all$.html#noneOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "equalTo", "tail" : "(a: A)(arg0: Eq[A]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.equalTo", "link" : "cron4s\/syntax\/all$.html#equalTo[A](a:A)(implicitevidence$1:cats.Eq[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "not", "tail" : "(m: Predicate[A]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.not", "link" : "cron4s\/syntax\/all$.html#not[A](m:cron4s.base.Predicate[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "always", "tail" : "(value: => Boolean): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.always", "link" : "cron4s\/syntax\/all$.html#always[A](value:=>Boolean):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "toExprOps", "tail" : "(target: E[F])(tc: FieldExpr[E, F]): FieldExprOps[E, F]", "member" : "cron4s.syntax.FieldExprSyntax.toExprOps", "link" : "cron4s\/syntax\/all$.html#toExprOps[E[_<:cron4s.CronField],F<:cron4s.CronField](target:E[F])(implicittc:cron4s.expr.FieldExpr[E,F]):cron4s.syntax.FieldExprOps[E,F]", "kind" : "implicit def"}, {"label" : "toEnumeratedOps", "tail" : "(target: A)(tc: Enumerated[A]): EnumeratedOps[A]", "member" : "cron4s.syntax.EnumeratedSyntax.toEnumeratedOps", "link" : "cron4s\/syntax\/all$.html#toEnumeratedOps[A](target:A)(implicittc:cron4s.base.Enumerated[A]):cron4s.syntax.EnumeratedOps[A]", "kind" : "implicit def"}, {"label" : "toDateTimeNodeOps", "tail" : "(target: E[F])(tc0: DateTimeNode[E, F]): DateTimeNodeOps[E, F]", "member" : "cron4s.syntax.DateTimeNodeSyntax.toDateTimeNodeOps", "link" : "cron4s\/syntax\/all$.html#toDateTimeNodeOps[E[_<:cron4s.CronField],F<:cron4s.CronField,DateTime](target:E[F])(implicittc0:cron4s.datetime.DateTimeNode[E,F]):cron4s.syntax.DateTimeNodeOps[E,F]", "kind" : "implicit def"}, {"label" : "toDateTimeCronOps", "tail" : "(target: E)(tc0: DateTimeCron[E]): DateTimeCronOps[E]", "member" : "cron4s.syntax.DateTimeCronSyntax.toDateTimeCronOps", "link" : "cron4s\/syntax\/all$.html#toDateTimeCronOps[E,DateTime](target:E)(implicittc0:cron4s.datetime.DateTimeCron[E]):cron4s.syntax.DateTimeCronOps[E]", "kind" : "implicit def"}, {"label" : "supportedFields", "tail" : "(E: DateTimeCron[E]): List[CronField]", "member" : "cron4s.syntax.DateTimeCronFunctions.supportedFields", "link" : "cron4s\/syntax\/all$.html#supportedFields[E](implicitE:cron4s.datetime.DateTimeCron[E]):List[cron4s.CronField]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/syntax\/all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/syntax\/all$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/syntax\/all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/syntax\/all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/syntax\/all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/syntax\/all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/syntax\/all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/syntax\/all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/syntax\/all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/syntax\/all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/syntax\/all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/syntax\/all$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/syntax\/all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/syntax\/all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/syntax\/all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/syntax\/all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.syntax.cron", "shortDescription" : "", "object" : "cron4s\/syntax\/cron$.html", "members_object" : [{"label" : "toDateTimeCronOps", "tail" : "(target: E)(tc0: DateTimeCron[E]): DateTimeCronOps[E]", "member" : "cron4s.syntax.DateTimeCronSyntax.toDateTimeCronOps", "link" : "cron4s\/syntax\/cron$.html#toDateTimeCronOps[E,DateTime](target:E)(implicittc0:cron4s.datetime.DateTimeCron[E]):cron4s.syntax.DateTimeCronOps[E]", "kind" : "implicit def"}, {"label" : "supportedFields", "tail" : "(E: DateTimeCron[E]): List[CronField]", "member" : "cron4s.syntax.DateTimeCronFunctions.supportedFields", "link" : "cron4s\/syntax\/cron$.html#supportedFields[E](implicitE:cron4s.datetime.DateTimeCron[E]):List[cron4s.CronField]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/syntax\/cron$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/syntax\/cron$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/syntax\/cron$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/syntax\/cron$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/syntax\/cron$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/syntax\/cron$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/syntax\/cron$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/cron$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/cron$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/cron$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/syntax\/cron$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/syntax\/cron$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/syntax\/cron$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/syntax\/cron$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/syntax\/cron$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/syntax\/cron$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/syntax\/cron$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/syntax\/cron$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/syntax\/cron$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.syntax.enumerated", "shortDescription" : "", "object" : "cron4s\/syntax\/enumerated$.html", "members_object" : [{"label" : "toEnumeratedOps", "tail" : "(target: A)(tc: Enumerated[A]): EnumeratedOps[A]", "member" : "cron4s.syntax.EnumeratedSyntax.toEnumeratedOps", "link" : "cron4s\/syntax\/enumerated$.html#toEnumeratedOps[A](target:A)(implicittc:cron4s.base.Enumerated[A]):cron4s.syntax.EnumeratedOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/syntax\/enumerated$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/syntax\/enumerated$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/syntax\/enumerated$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/syntax\/enumerated$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/syntax\/enumerated$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/syntax\/enumerated$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/syntax\/enumerated$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/enumerated$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/enumerated$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/enumerated$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/syntax\/enumerated$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/syntax\/enumerated$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/syntax\/enumerated$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/syntax\/enumerated$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/syntax\/enumerated$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/syntax\/enumerated$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/syntax\/enumerated$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/syntax\/enumerated$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/syntax\/enumerated$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.syntax.field", "shortDescription" : "", "object" : "cron4s\/syntax\/field$.html", "members_object" : [{"label" : "toExprOps", "tail" : "(target: E[F])(tc: FieldExpr[E, F]): FieldExprOps[E, F]", "member" : "cron4s.syntax.FieldExprSyntax.toExprOps", "link" : "cron4s\/syntax\/field$.html#toExprOps[E[_<:cron4s.CronField],F<:cron4s.CronField](target:E[F])(implicittc:cron4s.expr.FieldExpr[E,F]):cron4s.syntax.FieldExprOps[E,F]", "kind" : "implicit def"}, {"label" : "toEnumeratedOps", "tail" : "(target: A)(tc: Enumerated[A]): EnumeratedOps[A]", "member" : "cron4s.syntax.EnumeratedSyntax.toEnumeratedOps", "link" : "cron4s\/syntax\/field$.html#toEnumeratedOps[A](target:A)(implicittc:cron4s.base.Enumerated[A]):cron4s.syntax.EnumeratedOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/syntax\/field$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/syntax\/field$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/syntax\/field$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/syntax\/field$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/syntax\/field$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/syntax\/field$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/syntax\/field$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/field$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/field$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/field$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/syntax\/field$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/syntax\/field$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/syntax\/field$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/syntax\/field$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/syntax\/field$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/syntax\/field$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/syntax\/field$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/syntax\/field$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/syntax\/field$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.syntax.node", "shortDescription" : "", "object" : "cron4s\/syntax\/node$.html", "members_object" : [{"label" : "toDateTimeNodeOps", "tail" : "(target: E[F])(tc0: DateTimeNode[E, F]): DateTimeNodeOps[E, F]", "member" : "cron4s.syntax.DateTimeNodeSyntax.toDateTimeNodeOps", "link" : "cron4s\/syntax\/node$.html#toDateTimeNodeOps[E[_<:cron4s.CronField],F<:cron4s.CronField,DateTime](target:E[F])(implicittc0:cron4s.datetime.DateTimeNode[E,F]):cron4s.syntax.DateTimeNodeOps[E,F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/syntax\/node$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/syntax\/node$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/syntax\/node$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/syntax\/node$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/syntax\/node$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/syntax\/node$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/syntax\/node$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/node$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/node$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/node$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/syntax\/node$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/syntax\/node$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/syntax\/node$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/syntax\/node$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/syntax\/node$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/syntax\/node$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/syntax\/node$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/syntax\/node$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/syntax\/node$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.syntax.predicate", "shortDescription" : "", "object" : "cron4s\/syntax\/predicate$.html", "members_object" : [{"label" : "asOf", "tail" : "(c: C[Predicate[A]])(arg0: Foldable[C], M: MonoidK[Predicate]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.asOf", "link" : "cron4s\/syntax\/predicate$.html#asOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitevidence$2:cats.Foldable[C],implicitM:cats.MonoidK[cron4s.base.Predicate]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "allOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.allOf", "link" : "cron4s\/syntax\/predicate$.html#allOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "anyOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.anyOf", "link" : "cron4s\/syntax\/predicate$.html#anyOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "noneOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.noneOf", "link" : "cron4s\/syntax\/predicate$.html#noneOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "equalTo", "tail" : "(a: A)(arg0: Eq[A]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.equalTo", "link" : "cron4s\/syntax\/predicate$.html#equalTo[A](a:A)(implicitevidence$1:cats.Eq[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "not", "tail" : "(m: Predicate[A]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.not", "link" : "cron4s\/syntax\/predicate$.html#not[A](m:cron4s.base.Predicate[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "always", "tail" : "(value: => Boolean): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.always", "link" : "cron4s\/syntax\/predicate$.html#always[A](value:=>Boolean):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/syntax\/predicate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/syntax\/predicate$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/syntax\/predicate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/syntax\/predicate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/syntax\/predicate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/syntax\/predicate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/syntax\/predicate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/predicate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/predicate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/predicate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/syntax\/predicate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/syntax\/predicate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/syntax\/predicate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/syntax\/predicate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/syntax\/predicate$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/syntax\/predicate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/syntax\/predicate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/syntax\/predicate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/syntax\/predicate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.syntax.PredicateSyntax", "trait" : "cron4s\/syntax\/PredicateSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "asOf", "tail" : "(c: C[Predicate[A]])(arg0: Foldable[C], M: MonoidK[Predicate]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.asOf", "link" : "cron4s\/syntax\/PredicateSyntax.html#asOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitevidence$2:cats.Foldable[C],implicitM:cats.MonoidK[cron4s.base.Predicate]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "allOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.allOf", "link" : "cron4s\/syntax\/PredicateSyntax.html#allOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "anyOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.anyOf", "link" : "cron4s\/syntax\/PredicateSyntax.html#anyOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "noneOf", "tail" : "(c: C[Predicate[A]])(ev: Foldable[C]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.noneOf", "link" : "cron4s\/syntax\/PredicateSyntax.html#noneOf[C[_],A](c:C[cron4s.base.Predicate[A]])(implicitev:cats.Foldable[C]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "equalTo", "tail" : "(a: A)(arg0: Eq[A]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.equalTo", "link" : "cron4s\/syntax\/PredicateSyntax.html#equalTo[A](a:A)(implicitevidence$1:cats.Eq[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "not", "tail" : "(m: Predicate[A]): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.not", "link" : "cron4s\/syntax\/PredicateSyntax.html#not[A](m:cron4s.base.Predicate[A]):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "always", "tail" : "(value: => Boolean): Predicate[A]", "member" : "cron4s.syntax.PredicateSyntax.always", "link" : "cron4s\/syntax\/PredicateSyntax.html#always[A](value:=>Boolean):cron4s.base.Predicate[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/syntax\/PredicateSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/syntax\/PredicateSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/syntax\/PredicateSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/syntax\/PredicateSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/syntax\/PredicateSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/syntax\/PredicateSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/syntax\/PredicateSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/PredicateSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/PredicateSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/syntax\/PredicateSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/syntax\/PredicateSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/syntax\/PredicateSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/syntax\/PredicateSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/syntax\/PredicateSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/syntax\/PredicateSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/syntax\/PredicateSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/syntax\/PredicateSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/syntax\/PredicateSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/syntax\/PredicateSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Created by alonsodomin on 29\/07\/2016."}], "cron4s.parsing" : [{"name" : "cron4s.parsing.CronLexer", "shortDescription" : "", "object" : "cron4s\/parsing\/CronLexer$.html", "members_object" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "cron4s\/parsing\/CronLexer$.html#OnceParser[+T<:<?>]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "cron4s\/parsing\/CronLexer$.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "cron4s\/parsing\/CronLexer$.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "cron4s\/parsing\/CronLexer$.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "cron4s\/parsing\/CronLexer$.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "cron4s\/parsing\/CronLexer$.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "cron4s\/parsing\/CronLexer$.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "cron4s\/parsing\/CronLexer$.html#ParseResult[+T<:<?>]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "tokenize", "tail" : "(expr: String): Either[cron4s.Error, List[CronToken]]", "member" : "cron4s.parsing.CronLexer.tokenize", "link" : "cron4s\/parsing\/CronLexer$.html#tokenize(expr:String):Either[cron4s.Error,List[cron4s.parsing.CronToken]]", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "cron4s.parsing.CronLexer.whiteSpace", "link" : "cron4s\/parsing\/CronLexer$.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "cron4s.parsing.CronLexer.skipWhitespace", "link" : "cron4s\/parsing\/CronLexer$.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "handleError", "tail" : "(err: NoSuccess): cron4s.Error", "member" : "cron4s.parsing.BaseParser.handleError", "link" : "cron4s\/parsing\/CronLexer$.html#handleError(err:BaseParser.this.NoSuccess):cron4s.Error", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "cron4s\/parsing\/CronLexer$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "cron4s\/parsing\/CronLexer$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "cron4s\/parsing\/CronLexer$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "cron4s\/parsing\/CronLexer$.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "cron4s\/parsing\/CronLexer$.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "cron4s\/parsing\/CronLexer$.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "cron4s\/parsing\/CronLexer$.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: => Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "cron4s\/parsing\/CronLexer$.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "cron4s\/parsing\/CronLexer$.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "cron4s\/parsing\/CronLexer$.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "cron4s\/parsing\/CronLexer$.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "cron4s\/parsing\/CronLexer$.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) => List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "cron4s\/parsing\/CronLexer$.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: => Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "cron4s\/parsing\/CronLexer$.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: => Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "cron4s\/parsing\/CronLexer$.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: => Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "cron4s\/parsing\/CronLexer$.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: => Parser[T], q: => Parser[(T, U) => U], combine: (T, U) => U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "cron4s\/parsing\/CronLexer$.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: => Parser[T], p: => Parser[U], q: => Parser[(T, U) => T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "cron4s\/parsing\/CronLexer$.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: => Parser[T], q: => Parser[(T, T) => T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "cron4s\/parsing\/CronLexer$.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: => Parser[T], q: => Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "cron4s\/parsing\/CronLexer$.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "cron4s\/parsing\/CronLexer$.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: => Parser[T], p0: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "cron4s\/parsing\/CronLexer$.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "cron4s\/parsing\/CronLexer$.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: => Parser[T], q: => Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "cron4s\/parsing\/CronLexer$.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "cron4s\/parsing\/CronLexer$.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: => Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "cron4s\/parsing\/CronLexer$.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "cron4s\/parsing\/CronLexer$.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "cron4s\/parsing\/CronLexer$.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "cron4s\/parsing\/CronLexer$.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(f: (ES) => Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "cron4s\/parsing\/CronLexer$.html#acceptSeq[ES](es:ES)(implicitf:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "cron4s\/parsing\/CronLexer$.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) => Boolean)(err: (Elem) => String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "cron4s\/parsing\/CronLexer$.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "cron4s\/parsing\/CronLexer$.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(f: (ES) => List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "cron4s\/parsing\/CronLexer$.html#accept[ES](es:ES)(implicitf:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "cron4s\/parsing\/CronLexer$.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "cron4s\/parsing\/CronLexer$.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) => Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "cron4s\/parsing\/CronLexer$.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: => Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "cron4s\/parsing\/CronLexer$.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) => ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "cron4s\/parsing\/CronLexer$.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) => ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "cron4s\/parsing\/CronLexer$.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "cron4s\/parsing\/CronLexer$.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/parsing\/CronLexer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/parsing\/CronLexer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/parsing\/CronLexer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/parsing\/CronLexer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/parsing\/CronLexer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/parsing\/CronLexer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/parsing\/CronLexer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronLexer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronLexer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronLexer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/parsing\/CronLexer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/parsing\/CronLexer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/parsing\/CronLexer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/parsing\/CronLexer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/parsing\/CronLexer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/parsing\/CronLexer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/parsing\/CronLexer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/parsing\/CronLexer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/parsing\/CronLexer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.parsing.CronParser", "shortDescription" : "", "object" : "cron4s\/parsing\/CronParser$.html", "members_object" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "cron4s\/parsing\/CronParser$.html#OnceParser[+T]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "cron4s\/parsing\/CronParser$.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "cron4s\/parsing\/CronParser$.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "cron4s\/parsing\/CronParser$.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "cron4s\/parsing\/CronParser$.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "cron4s\/parsing\/CronParser$.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "cron4s\/parsing\/CronParser$.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "cron4s\/parsing\/CronParser$.html#ParseResult[+T<:<?>]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "read", "tail" : "(tokens: List[CronToken]): Either[cron4s.Error, expr.CronExpr]", "member" : "cron4s.parsing.CronParser.read", "link" : "cron4s\/parsing\/CronParser$.html#read(tokens:List[cron4s.parsing.CronToken]):Either[cron4s.Error,cron4s.expr.CronExpr]", "kind" : "def"}, {"label" : "cron", "tail" : ": Parser[expr.CronExpr]", "member" : "cron4s.parsing.CronParser.cron", "link" : "cron4s\/parsing\/CronParser$.html#cron:cron4s.parsing.CronParser.Parser[cron4s.expr.CronExpr]", "kind" : "val"}, {"label" : "fieldWithAny", "tail" : "(base: Parser[ConstNode[F]])(unit: CronUnit[F]): Parser[FieldNodeWithAny[F]]", "member" : "cron4s.parsing.CronParser.fieldWithAny", "link" : "cron4s\/parsing\/CronParser$.html#fieldWithAny[F<:cron4s.CronField](base:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[F]])(implicitunit:cron4s.CronUnit[F]):cron4s.parsing.CronParser.Parser[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "field", "tail" : "(base: Parser[ConstNode[F]])(unit: CronUnit[F]): Parser[FieldNode[F]]", "member" : "cron4s.parsing.CronParser.field", "link" : "cron4s\/parsing\/CronParser$.html#field[F<:cron4s.CronField](base:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[F]])(implicitunit:cron4s.CronUnit[F]):cron4s.parsing.CronParser.Parser[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "every", "tail" : "(base: Parser[ConstNode[F]])(unit: CronUnit[F]): Parser[EveryNode[F]]", "member" : "cron4s.parsing.CronParser.every", "link" : "cron4s\/parsing\/CronParser$.html#every[F<:cron4s.CronField](base:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[F]])(implicitunit:cron4s.CronUnit[F]):cron4s.parsing.CronParser.Parser[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "several", "tail" : "(base: Parser[ConstNode[F]])(unit: CronUnit[F]): Parser[SeveralNode[F]]", "member" : "cron4s.parsing.CronParser.several", "link" : "cron4s\/parsing\/CronParser$.html#several[F<:cron4s.CronField](base:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[F]])(implicitunit:cron4s.CronUnit[F]):cron4s.parsing.CronParser.Parser[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "between", "tail" : "(base: Parser[ConstNode[F]])(unit: CronUnit[F]): Parser[BetweenNode[F]]", "member" : "cron4s.parsing.CronParser.between", "link" : "cron4s\/parsing\/CronParser$.html#between[F<:cron4s.CronField](base:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[F]])(implicitunit:cron4s.CronUnit[F]):cron4s.parsing.CronParser.Parser[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "any", "tail" : "(unit: CronUnit[F]): Parser[AnyNode[F]]", "member" : "cron4s.parsing.CronParser.any", "link" : "cron4s\/parsing\/CronParser$.html#any[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):cron4s.parsing.CronParser.Parser[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "each", "tail" : "(unit: CronUnit[F]): Parser[EachNode[F]]", "member" : "cron4s.parsing.CronParser.each", "link" : "cron4s\/parsing\/CronParser$.html#each[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):cron4s.parsing.CronParser.Parser[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "daysOfWeek", "tail" : ": Parser[ConstNode[DayOfWeek]]", "member" : "cron4s.parsing.CronParser.daysOfWeek", "link" : "cron4s\/parsing\/CronParser$.html#daysOfWeek:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[cron4s.CronField.DayOfWeek]]", "kind" : "val"}, {"label" : "months", "tail" : ": Parser[ConstNode[Month]]", "member" : "cron4s.parsing.CronParser.months", "link" : "cron4s\/parsing\/CronParser$.html#months:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[cron4s.CronField.Month]]", "kind" : "val"}, {"label" : "daysOfMonth", "tail" : ": Parser[ConstNode[DayOfMonth]]", "member" : "cron4s.parsing.CronParser.daysOfMonth", "link" : "cron4s\/parsing\/CronParser$.html#daysOfMonth:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[cron4s.CronField.DayOfMonth]]", "kind" : "val"}, {"label" : "hours", "tail" : ": Parser[ConstNode[Hour]]", "member" : "cron4s.parsing.CronParser.hours", "link" : "cron4s\/parsing\/CronParser$.html#hours:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[cron4s.CronField.Hour]]", "kind" : "val"}, {"label" : "minutes", "tail" : ": Parser[ConstNode[Minute]]", "member" : "cron4s.parsing.CronParser.minutes", "link" : "cron4s\/parsing\/CronParser$.html#minutes:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[cron4s.CronField.Minute]]", "kind" : "val"}, {"label" : "seconds", "tail" : ": Parser[ConstNode[Second]]", "member" : "cron4s.parsing.CronParser.seconds", "link" : "cron4s\/parsing\/CronParser$.html#seconds:cron4s.parsing.CronParser.Parser[cron4s.expr.ConstNode[cron4s.CronField.Second]]", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "cron4s.parsing.CronParser.Elem", "link" : "cron4s\/parsing\/CronParser$.html#Elem=cron4s.parsing.CronToken", "kind" : "type"}, {"label" : "handleError", "tail" : "(err: NoSuccess): cron4s.Error", "member" : "cron4s.parsing.BaseParser.handleError", "link" : "cron4s\/parsing\/CronParser$.html#handleError(err:BaseParser.this.NoSuccess):cron4s.Error", "kind" : "def"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) => List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "cron4s\/parsing\/CronParser$.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.phrase", "link" : "cron4s\/parsing\/CronParser$.html#phrase[T](p:Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: => Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.positioned", "link" : "cron4s\/parsing\/CronParser$.html#positioned[T<:scala.util.parsing.input.Positional](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: => Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "cron4s\/parsing\/CronParser$.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: => Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "cron4s\/parsing\/CronParser$.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: => Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "cron4s\/parsing\/CronParser$.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: => Parser[T], q: => Parser[(T, U) => U], combine: (T, U) => U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "cron4s\/parsing\/CronParser$.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: => Parser[T], p: => Parser[U], q: => Parser[(T, U) => T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "cron4s\/parsing\/CronParser$.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: => Parser[T], q: => Parser[(T, T) => T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "cron4s\/parsing\/CronParser$.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: => Parser[T], q: => Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "cron4s\/parsing\/CronParser$.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "cron4s\/parsing\/CronParser$.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: => Parser[T], p0: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "cron4s\/parsing\/CronParser$.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "cron4s\/parsing\/CronParser$.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: => Parser[T], q: => Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "cron4s\/parsing\/CronParser$.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: => Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "cron4s\/parsing\/CronParser$.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: => Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "cron4s\/parsing\/CronParser$.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "cron4s\/parsing\/CronParser$.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "cron4s\/parsing\/CronParser$.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "cron4s\/parsing\/CronParser$.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(f: (ES) => Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "cron4s\/parsing\/CronParser$.html#acceptSeq[ES](es:ES)(implicitf:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "cron4s\/parsing\/CronParser$.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) => Boolean)(err: (Elem) => String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "cron4s\/parsing\/CronParser$.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "cron4s\/parsing\/CronParser$.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(f: (ES) => List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "cron4s\/parsing\/CronParser$.html#accept[ES](es:ES)(implicitf:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "cron4s\/parsing\/CronParser$.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "cron4s\/parsing\/CronParser$.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) => Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "cron4s\/parsing\/CronParser$.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: => Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "cron4s\/parsing\/CronParser$.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) => ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "cron4s\/parsing\/CronParser$.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) => ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "cron4s\/parsing\/CronParser$.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "cron4s\/parsing\/CronParser$.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/parsing\/CronParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/parsing\/CronParser$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/parsing\/CronParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/parsing\/CronParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/parsing\/CronParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/parsing\/CronParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/parsing\/CronParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/parsing\/CronParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/parsing\/CronParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/parsing\/CronParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/parsing\/CronParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/parsing\/CronParser$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/parsing\/CronParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/parsing\/CronParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/parsing\/CronParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/parsing\/CronParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cron4s.parsing.CronToken", "object" : "cron4s\/parsing\/CronToken$.html", "members_object" : [{"label" : "Blank", "tail" : "", "member" : "cron4s.parsing.CronToken.Blank", "link" : "cron4s\/parsing\/CronToken$.html#Blank", "kind" : "case object"}, {"label" : "QuestionMark", "tail" : "", "member" : "cron4s.parsing.CronToken.QuestionMark", "link" : "cron4s\/parsing\/CronToken$.html#QuestionMark", "kind" : "case object"}, {"label" : "Asterisk", "tail" : "", "member" : "cron4s.parsing.CronToken.Asterisk", "link" : "cron4s\/parsing\/CronToken$.html#Asterisk", "kind" : "case object"}, {"label" : "Comma", "tail" : "", "member" : "cron4s.parsing.CronToken.Comma", "link" : "cron4s\/parsing\/CronToken$.html#Comma", "kind" : "case object"}, {"label" : "Slash", "tail" : "", "member" : "cron4s.parsing.CronToken.Slash", "link" : "cron4s\/parsing\/CronToken$.html#Slash", "kind" : "case object"}, {"label" : "Hyphen", "tail" : "", "member" : "cron4s.parsing.CronToken.Hyphen", "link" : "cron4s\/parsing\/CronToken$.html#Hyphen", "kind" : "case object"}, {"label" : "Text", "tail" : "", "member" : "cron4s.parsing.CronToken.Text", "link" : "cron4s\/parsing\/CronToken$.html#TextextendsCronTokenwithProductwithSerializable", "kind" : "case class"}, {"label" : "Number", "tail" : "", "member" : "cron4s.parsing.CronToken.Number", "link" : "cron4s\/parsing\/CronToken$.html#NumberextendsCronTokenwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/parsing\/CronToken$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/parsing\/CronToken$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/parsing\/CronToken$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/parsing\/CronToken$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/parsing\/CronToken$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/parsing\/CronToken$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/parsing\/CronToken$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronToken$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronToken$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronToken$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/parsing\/CronToken$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/parsing\/CronToken$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/parsing\/CronToken$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/parsing\/CronToken$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/parsing\/CronToken$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/parsing\/CronToken$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/parsing\/CronToken$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/parsing\/CronToken$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/parsing\/CronToken$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "cron4s\/parsing\/CronToken.html", "kind" : "trait", "members_trait" : [{"label" : "setPos", "tail" : "(newpos: Position): CronToken.this.type", "member" : "scala.util.parsing.input.Positional.setPos", "link" : "cron4s\/parsing\/CronToken.html#setPos(newpos:scala.util.parsing.input.Position):Positional.this.type", "kind" : "def"}, {"label" : "pos", "tail" : ": Position", "member" : "scala.util.parsing.input.Positional.pos", "link" : "cron4s\/parsing\/CronToken.html#pos:scala.util.parsing.input.Position", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/parsing\/CronToken.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/parsing\/CronToken.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/parsing\/CronToken.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/parsing\/CronToken.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/parsing\/CronToken.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/parsing\/CronToken.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/parsing\/CronToken.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronToken.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronToken.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronToken.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/parsing\/CronToken.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/parsing\/CronToken.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/parsing\/CronToken.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/parsing\/CronToken.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/parsing\/CronToken.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/parsing\/CronToken.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/parsing\/CronToken.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/parsing\/CronToken.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/parsing\/CronToken.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cron4s.parsing.CronTokenReader", "shortDescription" : "", "members_class" : [{"label" : "rest", "tail" : "(): Reader[CronToken]", "member" : "cron4s.parsing.CronTokenReader.rest", "link" : "cron4s\/parsing\/CronTokenReader.html#rest:scala.util.parsing.input.Reader[cron4s.parsing.CronToken]", "kind" : "def"}, {"label" : "pos", "tail" : "(): Position", "member" : "cron4s.parsing.CronTokenReader.pos", "link" : "cron4s\/parsing\/CronTokenReader.html#pos:scala.util.parsing.input.Position", "kind" : "def"}, {"label" : "atEnd", "tail" : "(): Boolean", "member" : "cron4s.parsing.CronTokenReader.atEnd", "link" : "cron4s\/parsing\/CronTokenReader.html#atEnd:Boolean", "kind" : "def"}, {"label" : "first", "tail" : "(): CronToken", "member" : "cron4s.parsing.CronTokenReader.first", "link" : "cron4s\/parsing\/CronTokenReader.html#first:cron4s.parsing.CronToken", "kind" : "def"}, {"member" : "cron4s.parsing.CronTokenReader#<init>", "error" : "unsupported entity"}, {"label" : "drop", "tail" : "(n: Int): Reader[CronToken]", "member" : "scala.util.parsing.input.Reader.drop", "link" : "cron4s\/parsing\/CronTokenReader.html#drop(n:Int):scala.util.parsing.input.Reader[T]", "kind" : "def"}, {"label" : "offset", "tail" : "(): Int", "member" : "scala.util.parsing.input.Reader.offset", "link" : "cron4s\/parsing\/CronTokenReader.html#offset:Int", "kind" : "def"}, {"label" : "source", "tail" : "(): CharSequence", "member" : "scala.util.parsing.input.Reader.source", "link" : "cron4s\/parsing\/CronTokenReader.html#source:CharSequence", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/parsing\/CronTokenReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/parsing\/CronTokenReader.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/parsing\/CronTokenReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/parsing\/CronTokenReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/parsing\/CronTokenReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/parsing\/CronTokenReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/parsing\/CronTokenReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronTokenReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronTokenReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/parsing\/CronTokenReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/parsing\/CronTokenReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/parsing\/CronTokenReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/parsing\/CronTokenReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/parsing\/CronTokenReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/parsing\/CronTokenReader.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/parsing\/CronTokenReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/parsing\/CronTokenReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/parsing\/CronTokenReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/parsing\/CronTokenReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/parsing\/CronTokenReader.html", "kind" : "class"}], "cron4s.testkit" : [{"name" : "cron4s.testkit.Cron4sLawSuite", "trait" : "cron4s\/testkit\/Cron4sLawSuite.html", "kind" : "trait", "members_trait" : [{"label" : "ConfiguredPropertyCheck", "tail" : "", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.ConfiguredPropertyCheck", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ConfiguredPropertyCheckextendsAnyRef", "kind" : "class"}, {"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.StringShouldWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnyShouldWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForCollectedString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForCollectedString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForCollectedString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfCollectedAny", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedArray", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfBeWordForCollectedArray[T<:<?>]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedAny", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfContainWordForCollectedAny", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfNotWordForCollectedAny", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.Collected", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForExtent", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.TheSameInstanceAsPhrase", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ValueWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.KeyWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForAny", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.HavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#DeterminedByEquivalence[T<:<?>]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#DecidedByEquality[A<:<?>]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.Cron4sLawSuite.generatorDrivenConfig", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#generatorDrivenConfig:Cron4sLawSuite.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "catsSyntaxParallelFoldMapA", "tail" : "(ta: T[A]): ParallelFoldMapAOps[T, A]", "member" : "cats.syntax.ParallelFoldMapASyntax.catsSyntaxParallelFoldMapA", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxParallelFoldMapA[T[_],A](ta:T[A]):cats.syntax.ParallelFoldMapAOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxWriterId", "tail" : "(a: A): WriterIdSyntax[A]", "member" : "cats.syntax.WriterSyntax.catsSyntaxWriterId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxWriterId[A](a:A):cats.syntax.WriterIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxVectors", "tail" : "(va: Vector[A]): VectorOps[A]", "member" : "cats.syntax.VectorSyntax.catsSyntaxVectors", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxVectors[A](va:Vector[A]):cats.syntax.VectorOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxValidatedId", "tail" : "(a: A): ValidatedIdSyntax[A]", "member" : "cats.syntax.ValidatedSyntax.catsSyntaxValidatedId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxValidatedId[A](a:A):cats.syntax.ValidatedIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "toNonEmptyTraverseOps", "tail" : "(target: F[C])(tc: NonEmptyTraverse[F]): Ops[F, C] { type TypeClassType = cats.NonEmptyTraverse[F] }", "member" : "cats.NonEmptyTraverse.ToNonEmptyTraverseOps.toNonEmptyTraverseOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toNonEmptyTraverseOps[F[_],C](target:F[C])(implicittc:cats.NonEmptyTraverse[F]):cats.NonEmptyTraverse.Ops[F,C]{typeTypeClassType=cats.NonEmptyTraverse[F]}", "kind" : "implicit def"}, {"label" : "toTraverseOps", "tail" : "(target: F[C])(tc: Traverse[F]): Ops[F, C] { type TypeClassType = cats.Traverse[F] }", "member" : "cats.Traverse.ToTraverseOps.toTraverseOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toTraverseOps[F[_],C](target:F[C])(implicittc:cats.Traverse[F]):cats.Traverse.Ops[F,C]{typeTypeClassType=cats.Traverse[F]}", "kind" : "implicit def"}, {"label" : "toStrongOps", "tail" : "(target: F[A, B])(tc: Strong[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Strong[F] }", "member" : "cats.arrow.Strong.ToStrongOps.toStrongOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toStrongOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Strong[F]):cats.arrow.Strong.Ops[F,A,B]{typeTypeClassType=cats.arrow.Strong[F]}", "kind" : "implicit def"}, {"label" : "showInterpolator", "tail" : "(sc: StringContext): ShowInterpolator", "member" : "cats.syntax.ShowSyntax.showInterpolator", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#showInterpolator(sc:StringContext):cats.Show.ShowInterpolator", "kind" : "implicit final def"}, {"label" : "toShow", "tail" : "(target: A)(tc: Show[A]): Ops[A]", "member" : "cats.Show.ToShowOps.toShow", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toShow[A](target:A)(implicittc:cats.Show[A]):cats.Show.Ops[A]", "kind" : "implicit def"}, {"label" : "toSemigroupKOps", "tail" : "(target: F[A])(tc: SemigroupK[F]): Ops[F, A] { type TypeClassType = cats.SemigroupK[F] }", "member" : "cats.SemigroupK.ToSemigroupKOps.toSemigroupKOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toSemigroupKOps[F[_],A](target:F[A])(implicittc:cats.SemigroupK[F]):cats.SemigroupK.Ops[F,A]{typeTypeClassType=cats.SemigroupK[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxNestedReducible", "tail" : "(fga: F[G[A]])(arg0: Reducible[F]): NestedReducibleOps[F, G, A]", "member" : "cats.syntax.ReducibleSyntax.catsSyntaxNestedReducible", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxNestedReducible[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Reducible[F]):cats.syntax.NestedReducibleOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toReducibleOps", "tail" : "(target: F[D])(tc: Reducible[F]): Ops[F, D] { type TypeClassType = cats.Reducible[F] }", "member" : "cats.Reducible.ToReducibleOps.toReducibleOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toReducibleOps[F[_],D](target:F[D])(implicittc:cats.Reducible[F]):cats.Reducible.Ops[F,D]{typeTypeClassType=cats.Reducible[F]}", "kind" : "implicit def"}, {"label" : "toProfunctorOps", "tail" : "(target: F[A, B])(tc: Profunctor[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Profunctor[F] }", "member" : "cats.arrow.Profunctor.ToProfunctorOps.toProfunctorOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toProfunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Profunctor[F]):cats.arrow.Profunctor.Ops[F,A,B]{typeTypeClassType=cats.arrow.Profunctor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxParallelAp", "tail" : "(ma: M[A])(arg0: FlatMap[M]): ParallelApOps[M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelAp", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxParallelAp[M[_],A](ma:M[A])(implicitevidence$4:cats.FlatMap[M]):cats.syntax.ParallelApOps[M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelSequence", "tail" : "(tma: T[M[A]])(arg0: Traverse[T], arg1: Monad[M]): ParallelSequenceOps[T, M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelSequence", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxParallelSequence[T[_],M[_],A](tma:T[M[A]])(implicitevidence$2:cats.Traverse[T],implicitevidence$3:cats.Monad[M]):cats.syntax.ParallelSequenceOps[T,M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelTraverse", "tail" : "(ta: T[A])(arg0: Traverse[T]): ParallelTraversableOps[T, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelTraverse", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxParallelTraverse[T[_],A](ta:T[A])(implicitevidence$1:cats.Traverse[T]):cats.syntax.ParallelTraversableOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Parallel", "tail" : "(t22: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20], M[A21])): Tuple22ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple22Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple22Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20],M[A21])):cats.syntax.Tuple22ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Parallel", "tail" : "(t21: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20])): Tuple21ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple21Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple21Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20])):cats.syntax.Tuple21ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Parallel", "tail" : "(t20: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19])): Tuple20ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple20Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple20Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19])):cats.syntax.Tuple20ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Parallel", "tail" : "(t19: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18])): Tuple19ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple19Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple19Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18])):cats.syntax.Tuple19ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Parallel", "tail" : "(t18: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17])): Tuple18ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple18Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple18Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17])):cats.syntax.Tuple18ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Parallel", "tail" : "(t17: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16])): Tuple17ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple17Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple17Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16])):cats.syntax.Tuple17ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Parallel", "tail" : "(t16: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15])): Tuple16ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple16Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple16Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15])):cats.syntax.Tuple16ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Parallel", "tail" : "(t15: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14])): Tuple15ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple15Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple15Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14])):cats.syntax.Tuple15ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Parallel", "tail" : "(t14: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13])): Tuple14ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple14Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple14Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13])):cats.syntax.Tuple14ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Parallel", "tail" : "(t13: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12])): Tuple13ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple13Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple13Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12])):cats.syntax.Tuple13ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Parallel", "tail" : "(t12: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11])): Tuple12ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple12Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple12Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11])):cats.syntax.Tuple12ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Parallel", "tail" : "(t11: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10])): Tuple11ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple11Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple11Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10])):cats.syntax.Tuple11ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Parallel", "tail" : "(t10: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9])): Tuple10ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple10Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple10Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9])):cats.syntax.Tuple10ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Parallel", "tail" : "(t9: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8])): Tuple9ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple9Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple9Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8])):cats.syntax.Tuple9ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Parallel", "tail" : "(t8: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7])): Tuple8ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple8Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple8Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7])):cats.syntax.Tuple8ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Parallel", "tail" : "(t7: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6])): Tuple7ParallelOps[M, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple7Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple7Parallel[M[_],A0,A1,A2,A3,A4,A5,A6](t7:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6])):cats.syntax.Tuple7ParallelOps[M,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Parallel", "tail" : "(t6: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5])): Tuple6ParallelOps[M, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple6Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple6Parallel[M[_],A0,A1,A2,A3,A4,A5](t6:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5])):cats.syntax.Tuple6ParallelOps[M,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Parallel", "tail" : "(t5: (M[A0], M[A1], M[A2], M[A3], M[A4])): Tuple5ParallelOps[M, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple5Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple5Parallel[M[_],A0,A1,A2,A3,A4](t5:(M[A0],M[A1],M[A2],M[A3],M[A4])):cats.syntax.Tuple5ParallelOps[M,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Parallel", "tail" : "(t4: (M[A0], M[A1], M[A2], M[A3])): Tuple4ParallelOps[M, A0, A1, A2, A3]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple4Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple4Parallel[M[_],A0,A1,A2,A3](t4:(M[A0],M[A1],M[A2],M[A3])):cats.syntax.Tuple4ParallelOps[M,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Parallel", "tail" : "(t3: (M[A0], M[A1], M[A2])): Tuple3ParallelOps[M, A0, A1, A2]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple3Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple3Parallel[M[_],A0,A1,A2](t3:(M[A0],M[A1],M[A2])):cats.syntax.Tuple3ParallelOps[M,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Parallel", "tail" : "(t2: (M[A0], M[A1])): Tuple2ParallelOps[M, A0, A1]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple2Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple2Parallel[M[_],A0,A1](t2:(M[A0],M[A1])):cats.syntax.Tuple2ParallelOps[M,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Parallel", "tail" : "(t1: (M[A0])): Tuple1ParallelOps[M, A0]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple1Parallel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple1Parallel[M[_],A0](t1:(M[A0],)):cats.syntax.Tuple1ParallelOps[M,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxOrder", "tail" : "(a: A)(arg0: Order[A]): OrderOps[A]", "member" : "cats.syntax.OrderSyntax.catsSyntaxOrder", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxOrder[A](a:A)(implicitevidence$1:cats.Order[A]):cats.syntax.OrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxPartialOrder", "tail" : "(a: A)(arg0: PartialOrder[A]): PartialOrderOps[A]", "member" : "cats.syntax.PartialOrderSyntax.catsSyntaxPartialOrder", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxPartialOrder[A](a:A)(implicitevidence$1:cats.PartialOrder[A]):cats.syntax.PartialOrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOption", "tail" : "(oa: Option[A]): OptionOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxOption[A](oa:Option[A]):cats.syntax.OptionOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOptionId", "tail" : "(a: A): OptionIdOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOptionId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxOptionId[A](a:A):cats.syntax.OptionIdOps[A]", "kind" : "implicit final def"}, {"label" : "none", "tail" : "(): Option[A]", "member" : "cats.syntax.OptionSyntax.none", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#none[A]:Option[A]", "kind" : "final def"}, {"label" : "catsSyntaxMonoid", "tail" : "(a: A)(arg0: Monoid[A]): MonoidOps[A]", "member" : "cats.syntax.MonoidSyntax.catsSyntaxMonoid", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxMonoid[A](a:A)(implicitevidence$1:cats.Monoid[A]):cats.syntax.MonoidOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadIdOps", "tail" : "(a: A): MonadIdOps[A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonadIdOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxMonadIdOps[A](a:A):cats.syntax.MonadIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonad", "tail" : "(fa: F[A]): MonadOps[F, A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonad", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxMonad[F[_],A](fa:F[A]):cats.syntax.MonadOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadErrorRethrow", "tail" : "(fea: F[Either[E, A]])(F: MonadError[F, _ >: E]): MonadErrorRethrowOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadErrorRethrow", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxMonadErrorRethrow[F[_],E,A](fea:F[Either[E,A]])(implicitF:cats.MonadError[F,_>:E]):cats.syntax.MonadErrorRethrowOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadError", "tail" : "(fa: F[A])(F: MonadError[F, E]): MonadErrorOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadError", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxMonadError[F[_],E,A](fa:F[A])(implicitF:cats.MonadError[F,E]):cats.syntax.MonadErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxList", "tail" : "(la: List[A]): ListOps[A]", "member" : "cats.syntax.ListSyntax.catsSyntaxList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxList[A](la:List[A]):cats.syntax.ListOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIorId", "tail" : "(a: A): IorIdOps[A]", "member" : "cats.syntax.IorSyntax.catsSyntaxIorId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxIorId[A](a:A):cats.syntax.IorIdOps[A]", "kind" : "implicit final def"}, {"label" : "toInvariantOps", "tail" : "(target: F[A])(tc: Invariant[F]): Ops[F, A] { type TypeClassType = cats.Invariant[F] }", "member" : "cats.Invariant.ToInvariantOps.toInvariantOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toInvariantOps[F[_],A](target:F[A])(implicittc:cats.Invariant[F]):cats.Invariant.Ops[F,A]{typeTypeClassType=cats.Invariant[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxHash", "tail" : "(a: A)(arg0: Hash[A]): HashOps[A]", "member" : "cats.syntax.HashSyntax.catsSyntaxHash", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxHash[A](a:A)(implicitevidence$1:cats.Hash[A]):cats.syntax.HashOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxGroup", "tail" : "(a: A)(arg0: Group[A]): GroupOps[A]", "member" : "cats.syntax.GroupSyntax.catsSyntaxGroup", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxGroup[A](a:A)(implicitevidence$1:cats.Group[A]):cats.syntax.GroupOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxSemigroup", "tail" : "(a: A)(arg0: Semigroup[A]): SemigroupOps[A]", "member" : "cats.syntax.SemigroupSyntax.catsSyntaxSemigroup", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxSemigroup[A](a:A)(implicitevidence$1:cats.Semigroup[A]):cats.syntax.SemigroupOps[A]", "kind" : "implicit final def"}, {"label" : "toFunctorOps", "tail" : "(target: F[A])(tc: Functor[F]): Ops[F, A] { type TypeClassType = cats.Functor[F] }", "member" : "cats.Functor.ToFunctorOps.toFunctorOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toFunctorOps[F[_],A](target:F[A])(implicittc:cats.Functor[F]):cats.Functor.Ops[F,A]{typeTypeClassType=cats.Functor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFoldOps", "tail" : "(fa: F[A])(arg0: Foldable[F]): FoldableOps[F, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxFoldOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxFoldOps[F[_],A](fa:F[A])(implicitevidence$2:cats.Foldable[F]):cats.syntax.FoldableOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedFoldable", "tail" : "(fga: F[G[A]])(arg0: Foldable[F]): NestedFoldableOps[F, G, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxNestedFoldable", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxNestedFoldable[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Foldable[F]):cats.syntax.NestedFoldableOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toUnorderedFoldableOps", "tail" : "(target: F[A])(tc: UnorderedFoldable[F]): Ops[F, A] { type TypeClassType = cats.UnorderedFoldable[F] }", "member" : "cats.UnorderedFoldable.ToUnorderedFoldableOps.toUnorderedFoldableOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toUnorderedFoldableOps[F[_],A](target:F[A])(implicittc:cats.UnorderedFoldable[F]):cats.UnorderedFoldable.Ops[F,A]{typeTypeClassType=cats.UnorderedFoldable[F]}", "kind" : "implicit def"}, {"label" : "toFoldableOps", "tail" : "(target: F[D])(tc: Foldable[F]): Ops[F, D] { type TypeClassType = cats.Foldable[F] }", "member" : "cats.Foldable.ToFoldableOps.toFoldableOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toFoldableOps[F[_],D](target:F[D])(implicittc:cats.Foldable[F]):cats.Foldable.Ops[F,D]{typeTypeClassType=cats.Foldable[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFlatMapOps", "tail" : "(fa: F[A])(arg0: FlatMap[F]): FlatMapOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxFlatMapOps[F[_],A](fa:F[A])(implicitevidence$3:cats.FlatMap[F]):cats.syntax.FlatMapOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatMapIdOps", "tail" : "(a: A): FlatMapIdOps[A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapIdOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxFlatMapIdOps[A](a:A):cats.syntax.FlatMapIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIfM", "tail" : "(fa: F[Boolean])(arg0: FlatMap[F]): IfMOps[F]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxIfM", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxIfM[F[_]](fa:F[Boolean])(implicitevidence$2:cats.FlatMap[F]):cats.syntax.IfMOps[F]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatten", "tail" : "(ffa: F[F[A]])(arg0: FlatMap[F]): FlattenOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatten", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxFlatten[F[_],A](ffa:F[F[A]])(implicitevidence$1:cats.FlatMap[F]):cats.syntax.FlattenOps[F,A]", "kind" : "implicit final def"}, {"label" : "toFlatMapOps", "tail" : "(target: F[C])(tc: FlatMap[F]): Ops[F, C] { type TypeClassType = cats.FlatMap[F] }", "member" : "cats.FlatMap.ToFlatMapOps.toFlatMapOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toFlatMapOps[F[_],C](target:F[C])(implicittc:cats.FlatMap[F]):cats.FlatMap.Ops[F,C]{typeTypeClassType=cats.FlatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxEq", "tail" : "(a: A)(arg0: Eq[A]): EqOps[A]", "member" : "cats.syntax.EqSyntax.catsSyntaxEq", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxEq[A](a:A)(implicitevidence$1:cats.Eq[A]):cats.syntax.EqOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxEitherId", "tail" : "(a: A): EitherIdOps[A]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxEitherId[A](a:A):cats.syntax.EitherIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxRight", "tail" : "(right: Right[A, B]): RightOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxRight", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxRight[A,B](right:Right[A,B]):cats.syntax.RightOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxLeft", "tail" : "(left: Left[A, B]): LeftOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxLeft", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxLeft[A,B](left:Left[A,B]):cats.syntax.LeftOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherObject", "tail" : "(either: Either.type): EitherObjectOps", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherObject", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxEitherObject(either:Either.type):cats.syntax.EitherObjectOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxEither", "tail" : "(eab: Either[A, B]): EitherOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxEither[A,B](eab:Either[A,B]):cats.syntax.EitherOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherK", "tail" : "(a: F[A]): EitherKOps[F, A]", "member" : "cats.syntax.EitherKSyntax.catsSyntaxEitherK", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxEitherK[F[_],A](a:F[A]):cats.syntax.EitherKOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantSemigroupal", "tail" : "(fa: F[A])(F: ContravariantSemigroupal[F]): Ops[F, A]", "member" : "cats.syntax.ContravariantSemigroupalSyntax.catsSyntaxContravariantSemigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxContravariantSemigroupal[F[_],A](fa:F[A])(implicitF:cats.ContravariantSemigroupal[F]):cats.ContravariantSemigroupal.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantMonoidal", "tail" : "(fa: F[A])(F: ContravariantMonoidal[F]): ContravariantMonoidalOps[F, A]", "member" : "cats.syntax.ContravariantMonoidalSyntax.catsSyntaxContravariantMonoidal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxContravariantMonoidal[F[_],A](fa:F[A])(implicitF:cats.ContravariantMonoidal[F]):cats.syntax.ContravariantMonoidalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxDistributiveOps", "tail" : "(fa: F[A])(arg0: Functor[F]): DistributiveOps[F, A]", "member" : "cats.syntax.DistributiveSyntax.catsSyntaxDistributiveOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxDistributiveOps[F[_],A](fa:F[A])(implicitevidence$1:cats.Functor[F]):cats.syntax.DistributiveOps[F,A]", "kind" : "implicit final def"}, {"label" : "toDistributiveOps", "tail" : "(target: F[A])(tc: Distributive[F]): Ops[F, A] { type TypeClassType = cats.Distributive[F] }", "member" : "cats.Distributive.ToDistributiveOps.toDistributiveOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toDistributiveOps[F[_],A](target:F[A])(implicittc:cats.Distributive[F]):cats.Distributive.Ops[F,A]{typeTypeClassType=cats.Distributive[F]}", "kind" : "implicit def"}, {"label" : "toContravariantOps", "tail" : "(target: F[A])(tc: Contravariant[F]): Ops[F, A] { type TypeClassType = cats.Contravariant[F] }", "member" : "cats.Contravariant.ToContravariantOps.toContravariantOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toContravariantOps[F[_],A](target:F[A])(implicittc:cats.Contravariant[F]):cats.Contravariant.Ops[F,A]{typeTypeClassType=cats.Contravariant[F]}", "kind" : "implicit def"}, {"label" : "toComposeOps", "tail" : "(target: F[B, D])(tc: Compose[F]): Ops[F, B, D] { type TypeClassType = cats.arrow.Compose[F] }", "member" : "cats.arrow.Compose.ToComposeOps.toComposeOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toComposeOps[F[_,_],B,D](target:F[B,D])(implicittc:cats.arrow.Compose[F]):cats.arrow.Compose.Ops[F,B,D]{typeTypeClassType=cats.arrow.Compose[F]}", "kind" : "implicit def"}, {"label" : "toComonadOps", "tail" : "(target: F[A])(tc: Comonad[F]): Ops[F, A] { type TypeClassType = cats.Comonad[F] }", "member" : "cats.Comonad.ToComonadOps.toComonadOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toComonadOps[F[_],A](target:F[A])(implicittc:cats.Comonad[F]):cats.Comonad.Ops[F,A]{typeTypeClassType=cats.Comonad[F]}", "kind" : "implicit def"}, {"label" : "toCoflatMapOps", "tail" : "(target: F[A])(tc: CoflatMap[F]): Ops[F, A] { type TypeClassType = cats.CoflatMap[F] }", "member" : "cats.CoflatMap.ToCoflatMapOps.toCoflatMapOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toCoflatMapOps[F[_],A](target:F[A])(implicittc:cats.CoflatMap[F]):cats.CoflatMap.Ops[F,A]{typeTypeClassType=cats.CoflatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxSemigroupal", "tail" : "(fa: F[A])(F: Semigroupal[F]): SemigroupalOps[F, A]", "member" : "cats.syntax.SemigroupalSyntax.catsSyntaxSemigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxSemigroupal[F[_],A](fa:F[A])(implicitF:cats.Semigroupal[F]):cats.syntax.SemigroupalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxBitraverse", "tail" : "(fab: F[A, B])(arg0: Bitraverse[F]): BitraverseOps[F, A, B]", "member" : "cats.syntax.BitraverseSyntax.catsSyntaxBitraverse", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxBitraverse[F[_,_],A,B](fab:F[A,B])(implicitevidence$1:cats.Bitraverse[F]):cats.syntax.BitraverseOps[F,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedBitraverse", "tail" : "(fgagb: F[G[A], G[B]])(arg0: Bitraverse[F]): NestedBitraverseOps[F, G, A, B]", "member" : "cats.syntax.BitraverseSyntax1.catsSyntaxNestedBitraverse", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxNestedBitraverse[F[_,_],G[_],A,B](fgagb:F[G[A],G[B]])(implicitevidence$2:cats.Bitraverse[F]):cats.syntax.NestedBitraverseOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "toBifoldableOps", "tail" : "(target: F[A, B])(tc: Bifoldable[F]): Ops[F, A, B] { type TypeClassType = cats.Bifoldable[F] }", "member" : "cats.Bifoldable.ToBifoldableOps.toBifoldableOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toBifoldableOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifoldable[F]):cats.Bifoldable.Ops[F,A,B]{typeTypeClassType=cats.Bifoldable[F]}", "kind" : "implicit def"}, {"label" : "toBifunctorOps", "tail" : "(target: F[A, B])(tc: Bifunctor[F]): Ops[F, A, B] { type TypeClassType = cats.Bifunctor[F] }", "member" : "cats.Bifunctor.ToBifunctorOps.toBifunctorOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toBifunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifunctor[F]):cats.Bifunctor.Ops[F,A,B]{typeTypeClassType=cats.Bifunctor[F]}", "kind" : "implicit def"}, {"label" : "toArrowChoiceOps", "tail" : "(target: F[A, E])(tc: ArrowChoice[F]): Ops[F, A, E] { type TypeClassType = cats.arrow.ArrowChoice[F] }", "member" : "cats.arrow.ArrowChoice.ToArrowChoiceOps.toArrowChoiceOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toArrowChoiceOps[F[_,_],A,E](target:F[A,E])(implicittc:cats.arrow.ArrowChoice[F]):cats.arrow.ArrowChoice.Ops[F,A,E]{typeTypeClassType=cats.arrow.ArrowChoice[F]}", "kind" : "implicit def"}, {"label" : "toArrowOps", "tail" : "(target: F[A, B])(tc: Arrow[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Arrow[F] }", "member" : "cats.arrow.Arrow.ToArrowOps.toArrowOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toArrowOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Arrow[F]):cats.arrow.Arrow.Ops[F,A,B]{typeTypeClassType=cats.arrow.Arrow[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxApplyOps", "tail" : "(fa: F[A]): ApplyOps[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApplyOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxApplyOps[F[_],A](fa:F[A]):cats.syntax.ApplyOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApply", "tail" : "(fa: F[A])(F: Apply[F]): Ops[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApply", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxApply[F[_],A](fa:F[A])(implicitF:cats.Apply[F]):cats.Apply.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Semigroupal", "tail" : "(t22: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20], F[A21])): Tuple22SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple22Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple22Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20],F[A21])):cats.syntax.Tuple22SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Semigroupal", "tail" : "(t21: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20])): Tuple21SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple21Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple21Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20])):cats.syntax.Tuple21SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Semigroupal", "tail" : "(t20: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19])): Tuple20SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple20Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple20Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19])):cats.syntax.Tuple20SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Semigroupal", "tail" : "(t19: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18])): Tuple19SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple19Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple19Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18])):cats.syntax.Tuple19SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Semigroupal", "tail" : "(t18: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17])): Tuple18SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple18Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple18Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17])):cats.syntax.Tuple18SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Semigroupal", "tail" : "(t17: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16])): Tuple17SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple17Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple17Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16])):cats.syntax.Tuple17SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Semigroupal", "tail" : "(t16: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15])): Tuple16SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple16Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple16Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15])):cats.syntax.Tuple16SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Semigroupal", "tail" : "(t15: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14])): Tuple15SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple15Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple15Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14])):cats.syntax.Tuple15SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Semigroupal", "tail" : "(t14: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13])): Tuple14SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple14Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple14Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13])):cats.syntax.Tuple14SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Semigroupal", "tail" : "(t13: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12])): Tuple13SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple13Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple13Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12])):cats.syntax.Tuple13SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Semigroupal", "tail" : "(t12: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11])): Tuple12SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple12Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple12Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11])):cats.syntax.Tuple12SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Semigroupal", "tail" : "(t11: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10])): Tuple11SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple11Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple11Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10])):cats.syntax.Tuple11SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Semigroupal", "tail" : "(t10: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9])): Tuple10SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple10Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple10Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9])):cats.syntax.Tuple10SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Semigroupal", "tail" : "(t9: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8])): Tuple9SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple9Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple9Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8])):cats.syntax.Tuple9SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Semigroupal", "tail" : "(t8: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7])): Tuple8SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple8Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple8Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7])):cats.syntax.Tuple8SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Semigroupal", "tail" : "(t7: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6])): Tuple7SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple7Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple7Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6](t7:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6])):cats.syntax.Tuple7SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Semigroupal", "tail" : "(t6: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5])): Tuple6SemigroupalOps[F, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple6Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple6Semigroupal[F[_],A0,A1,A2,A3,A4,A5](t6:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5])):cats.syntax.Tuple6SemigroupalOps[F,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Semigroupal", "tail" : "(t5: (F[A0], F[A1], F[A2], F[A3], F[A4])): Tuple5SemigroupalOps[F, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple5Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple5Semigroupal[F[_],A0,A1,A2,A3,A4](t5:(F[A0],F[A1],F[A2],F[A3],F[A4])):cats.syntax.Tuple5SemigroupalOps[F,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Semigroupal", "tail" : "(t4: (F[A0], F[A1], F[A2], F[A3])): Tuple4SemigroupalOps[F, A0, A1, A2, A3]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple4Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple4Semigroupal[F[_],A0,A1,A2,A3](t4:(F[A0],F[A1],F[A2],F[A3])):cats.syntax.Tuple4SemigroupalOps[F,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Semigroupal", "tail" : "(t3: (F[A0], F[A1], F[A2])): Tuple3SemigroupalOps[F, A0, A1, A2]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple3Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple3Semigroupal[F[_],A0,A1,A2](t3:(F[A0],F[A1],F[A2])):cats.syntax.Tuple3SemigroupalOps[F,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Semigroupal", "tail" : "(t2: (F[A0], F[A1])): Tuple2SemigroupalOps[F, A0, A1]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple2Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple2Semigroupal[F[_],A0,A1](t2:(F[A0],F[A1])):cats.syntax.Tuple2SemigroupalOps[F,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Semigroupal", "tail" : "(t1: (F[A0])): Tuple1SemigroupalOps[F, A0]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple1Semigroupal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxTuple1Semigroupal[F[_],A0](t1:(F[A0],)):cats.syntax.Tuple1SemigroupalOps[F,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxApplicativeError", "tail" : "(fa: F[A])(F: ApplicativeError[F, E]): ApplicativeErrorOps[F, E, A]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeError", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxApplicativeError[F[_],E,A](fa:F[A])(implicitF:cats.ApplicativeError[F,E]):cats.syntax.ApplicativeErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeErrorId", "tail" : "(e: E): ApplicativeErrorIdOps[E]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeErrorId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxApplicativeErrorId[E](e:E):cats.syntax.ApplicativeErrorIdOps[E]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicative", "tail" : "(fa: F[A]): ApplicativeOps[F, A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicative", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxApplicative[F[_],A](fa:F[A]):cats.syntax.ApplicativeOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeId", "tail" : "(a: A): ApplicativeIdOps[A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicativeId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxApplicativeId[A](a:A):cats.syntax.ApplicativeIdOps[A]", "kind" : "implicit final def"}, {"label" : "toAlignOps", "tail" : "(target: F[A])(tc: Align[F]): Ops[F, A] { type TypeClassType = cats.Align[F] }", "member" : "cats.Align.ToAlignOps.toAlignOps", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toAlignOps[F[_],A](target:F[A])(implicittc:cats.Align[F]):cats.Align.Ops[F,A]{typeTypeClassType=cats.Align[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxAlternativeGuard", "tail" : "(b: Boolean): GuardOps", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeGuard", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxAlternativeGuard(b:Boolean):cats.syntax.GuardOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxAlternativeSeparate", "tail" : "(fgab: F[G[A, B]]): SeparateOps[F, G, A, B]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeSeparate", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxAlternativeSeparate[F[_],G[_,_],A,B](fgab:F[G[A,B]]):cats.syntax.SeparateOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxUnite", "tail" : "(fga: F[G[A]]): UniteOps[F, G, A]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxUnite", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSyntaxUnite[F[_],G[_],A](fga:F[G[A]]):cats.syntax.UniteOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "catsStdNonEmptyParallelForVectorZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.VectorInstances.catsStdNonEmptyParallelForVectorZipVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdNonEmptyParallelForVectorZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "implicit def"}, {"label" : "catsStdShowForVector", "tail" : "(arg0: Show[A]): Show[Vector[A]]", "member" : "cats.instances.VectorInstances.catsStdShowForVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForVector[A](implicitevidence$1:cats.Show[A]):cats.Show[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForVector", "tail" : ": Traverse[Vector] with Monad[Vector] with Alternative[Vector] with CoflatMap[Vector] with Align[Vector]", "member" : "cats.instances.VectorInstances.catsStdInstancesForVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForVector:cats.Traverse[Vector]withcats.Monad[Vector]withcats.Alternative[Vector]withcats.CoflatMap[Vector]withcats.Align[Vector]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForVector", "tail" : "(): Monoid[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdMonoidForVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForVector[A]:cats.kernel.Monoid[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForVector", "tail" : "(arg0: Order[A]): Order[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdOrderForVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForVector[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForVector", "tail" : "(arg0: Hash[A]): Hash[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdHashForVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForVector[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForVector", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdPartialOrderForVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForVector[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForVector", "tail" : "(arg0: Eq[A]): Eq[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances2.catsKernelStdEqForVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForVector[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForUUID", "tail" : ": Show[UUID]", "member" : "cats.instances.UUIDInstances.catsStdShowForUUID", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForUUID:cats.Show[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUUID", "tail" : ": Order[UUID] with Hash[UUID] with LowerBounded[UUID] with UpperBounded[UUID]", "member" : "cats.kernel.instances.UUIDInstances.catsKernelStdOrderForUUID", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForUUID:cats.kernel.Order[java.util.UUID]withcats.kernel.Hash[java.util.UUID]withcats.kernel.LowerBounded[java.util.UUID]withcats.kernel.UpperBounded[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsStdEqForTry", "tail" : "(A: Eq[A], T: Eq[Throwable]): Eq[Try[A]]", "member" : "cats.instances.TryInstances.catsStdEqForTry", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdEqForTry[A,T](implicitA:cats.Eq[A],implicitT:cats.Eq[Throwable]):cats.Eq[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForTry", "tail" : "(A: Show[A]): Show[Try[A]]", "member" : "cats.instances.TryInstances.catsStdShowForTry", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForTry[A](implicitA:cats.Show[A]):cats.Show[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTry", "tail" : "(): MonadError[Try, Throwable] with CoflatMap[Try] with Traverse[Try] with Monad[Try]", "member" : "cats.instances.TryInstances.catsStdInstancesForTry", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForTry:cats.MonadError[scala.util.Try,Throwable]withcats.CoflatMap[scala.util.Try]withcats.Traverse[scala.util.Try]withcats.Monad[scala.util.Try]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForTry", "tail" : "(arg0: Monoid[A]): Monoid[Try[A]]", "member" : "cats.instances.TryInstances1.catsStdMonoidForTry", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdMonoidForTry[A](implicitevidence$1:cats.Monoid[A]):cats.Monoid[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForTry", "tail" : "(arg0: Semigroup[A]): Semigroup[Try[A]]", "member" : "cats.instances.TryInstances2.catsStdSemigroupForTry", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdSemigroupForTry[A](implicitevidence$2:cats.Semigroup[A]):cats.Semigroup[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsInstancesForTailRec", "tail" : "(): StackSafeMonad[TailRec] with Defer[TailRec]", "member" : "cats.instances.TailRecInstances.catsInstancesForTailRec", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsInstancesForTailRec:cats.StackSafeMonad[util.control.TailCalls.TailRec]withcats.Defer[util.control.TailCalls.TailRec]", "kind" : "implicit def"}, {"label" : "catsStdShowForSymbol", "tail" : ": Show[Symbol]", "member" : "cats.instances.SymbolInstances.catsStdShowForSymbol", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForSymbol:cats.Show[Symbol]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForSymbol", "tail" : ": Order[Symbol] with Hash[Symbol] with LowerBounded[Symbol]", "member" : "cats.kernel.instances.SymbolInstances.catsKernelStdOrderForSymbol", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForSymbol:cats.kernel.Order[Symbol]withcats.kernel.Hash[Symbol]withcats.kernel.LowerBounded[Symbol]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String] with Hash[String] with LowerBounded[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForString:cats.kernel.Order[String]withcats.kernel.Hash[String]withcats.kernel.LowerBounded[String]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForStream", "tail" : ": Traverse[Stream] with Alternative[Stream] with Monad[Stream] with CoflatMap[Stream] with Align[Stream]", "member" : "cats.instances.StreamInstances.catsStdInstancesForStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForStream:cats.Traverse[Stream]withcats.Alternative[Stream]withcats.Monad[Stream]withcats.CoflatMap[Stream]withcats.Align[Stream]", "kind" : "implicit val"}, {"label" : "catsStdParallelForStreamZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.StreamInstances.catsStdParallelForStreamZipStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdParallelForStreamZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "implicit def"}, {"label" : "catsStdShowForStream", "tail" : "(arg0: Show[A]): Show[Stream[A]]", "member" : "cats.instances.StreamInstances.catsStdShowForStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForStream[A](implicitevidence$1:cats.Show[A]):cats.Show[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForStream", "tail" : "(): Monoid[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdMonoidForStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForStream[A]:cats.kernel.Monoid[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForStream", "tail" : "(arg0: Order[A]): Order[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdOrderForStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForStream[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForStream", "tail" : "(arg0: Hash[A]): Hash[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdHashForStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForStream[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForStream", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdPartialOrderForStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForStream[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForStream", "tail" : "(arg0: Eq[A]): Eq[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances2.catsKernelStdEqForStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForStream[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedSet", "tail" : "(arg0: Show[A]): Show[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances.catsStdShowForSortedSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForSortedSet[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.SortedSet[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSortedSet", "tail" : ": Foldable[SortedSet] with SemigroupK[SortedSet]", "member" : "cats.instances.SortedSetInstances.catsStdInstancesForSortedSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForSortedSet:cats.Foldable[scala.collection.immutable.SortedSet]withcats.SemigroupK[scala.collection.immutable.SortedSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdSemilatticeForSortedSet", "tail" : "(arg0: Order[A]): BoundedSemilattice[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances1.catsKernelStdSemilatticeForSortedSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForSortedSet[A](implicitevidence$5:cats.kernel.Order[A]):cats.kernel.BoundedSemilattice[scala.collection.immutable.SortedSet[A]]", "kind" : "def"}, {"label" : "catsStdInstancesForSortedMap", "tail" : "(arg0: Order[K]): Traverse[[β$0$]SortedMap[K, β$0$]] with FlatMap[[β$1$]SortedMap[K, β$1$]] with Align[[β$2$]SortedMap[K, β$2$]]", "member" : "cats.instances.SortedMapInstances.catsStdInstancesForSortedMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForSortedMap[K](implicitevidence$7:cats.Order[K]):cats.Traverse[[β$0$]scala.collection.immutable.SortedMap[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.SortedMap[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.SortedMap[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedMap", "tail" : "(arg0: Order[A], showA: Show[A], showB: Show[B]): Show[SortedMap[A, B]]", "member" : "cats.instances.SortedMapInstances.catsStdShowForSortedMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForSortedMap[A,B](implicitevidence$6:cats.Order[A],implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[scala.collection.immutable.SortedMap[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: CommutativeSemigroup[V]): CommutativeMonoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdCommutativeMonoidForSortedMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdCommutativeMonoidForSortedMap[K,V](implicitevidence$4:cats.Order[K],implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdHashForSortedMap", "tail" : "(arg0: Hash[K], arg1: Order[K], arg2: Hash[V]): Hash[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdHashForSortedMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdHashForSortedMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.Order[K],implicitevidence$3:cats.kernel.Hash[V]):cats.kernel.Hash[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: Semigroup[V]): Monoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances2.catsStdMonoidForSortedMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdMonoidForSortedMap[K,V](implicitevidence$10:cats.Order[K],implicitevidence$11:cats.kernel.Semigroup[V]):cats.Monoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdEqForSortedMap", "tail" : "(arg0: Order[K], arg1: Eq[V]): Eq[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances1.catsStdEqForSortedMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdEqForSortedMap[K,V](implicitevidence$8:cats.Order[K],implicitevidence$9:cats.kernel.Eq[V]):cats.kernel.Eq[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdShowForSet", "tail" : "(arg0: Show[A]): Show[Set[A]]", "member" : "cats.instances.SetInstances.catsStdShowForSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForSet[A](implicitevidence$3:cats.Show[A]):cats.Show[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSet", "tail" : ": UnorderedTraverse[Set] with MonoidK[Set]", "member" : "cats.instances.SetInstances.catsStdInstancesForSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForSet:cats.UnorderedTraverse[Set]withcats.MonoidK[Set]", "kind" : "implicit val"}, {"label" : "catsKernelStdHashForSet", "tail" : "(): Hash[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdHashForSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForSet[A]:cats.kernel.Hash[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForSet", "tail" : "(): BoundedSemilattice[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdSemilatticeForSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForSet[A]:cats.kernel.BoundedSemilattice[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForSet", "tail" : "(): PartialOrder[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdPartialOrderForSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForSet[A]:cats.kernel.PartialOrder[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForQueue", "tail" : "(): TraverseFilter[Queue]", "member" : "cats.instances.QueueInstances.catsStdTraverseFilterForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdTraverseFilterForQueue:cats.TraverseFilter[scala.collection.immutable.Queue]", "kind" : "implicit def"}, {"label" : "catsStdShowForQueue", "tail" : "(arg0: Show[A]): Show[Queue[A]]", "member" : "cats.instances.QueueInstances.catsStdShowForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForQueue[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForQueue", "tail" : ": Traverse[Queue] with Alternative[Queue] with Monad[Queue] with CoflatMap[Queue]", "member" : "cats.instances.QueueInstances.catsStdInstancesForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForQueue:cats.Traverse[scala.collection.immutable.Queue]withcats.Alternative[scala.collection.immutable.Queue]withcats.Monad[scala.collection.immutable.Queue]withcats.CoflatMap[scala.collection.immutable.Queue]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForQueue", "tail" : "(): Monoid[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdMonoidForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForQueue[A]:cats.kernel.Monoid[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForQueue", "tail" : "(arg0: Order[A]): Order[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdOrderForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForQueue[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForQueue", "tail" : "(arg0: Hash[A]): Hash[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdHashForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForQueue[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForQueue", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdPartialOrderForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForQueue[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForQueue", "tail" : "(arg0: Eq[A]): Eq[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances2.catsKernelStdEqForQueue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForQueue[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForPartialOrdering", "tail" : ": ContravariantMonoidal[PartialOrdering]", "member" : "cats.instances.PartialOrderingInstances.catsContravariantMonoidalForPartialOrdering", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsContravariantMonoidalForPartialOrdering:cats.ContravariantMonoidal[PartialOrdering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForPartialOrder", "tail" : ": ContravariantMonoidal[PartialOrder]", "member" : "cats.instances.PartialOrderInstances.catsContravariantMonoidalForPartialOrder", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsContravariantMonoidalForPartialOrder:cats.ContravariantMonoidal[cats.PartialOrder]", "kind" : "implicit val"}, {"label" : "catsKernelPartialOrderingForPartialOrder", "tail" : "(ev: PartialOrder[A]): PartialOrdering[A]", "member" : "cats.kernel.PartialOrderToPartialOrderingConversion.catsKernelPartialOrderingForPartialOrder", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelPartialOrderingForPartialOrder[A](implicitev:cats.kernel.PartialOrder[A]):PartialOrdering[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherTNestedParallelValidated", "tail" : "(arg0: Semigroup[E], P: Parallel[M]): Aux[[γ$5$]EitherT[M, E, γ$5$], [γ$6$]Nested[cats.Parallel.F, [β$4$]Validated[E, β$4$], γ$6$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherTNestedParallelValidated", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsParallelForEitherTNestedParallelValidated[M[_<:<?>],E](implicitevidence$2:cats.kernel.Semigroup[E],implicitP:cats.Parallel[M]):cats.Parallel.Aux[[γ$5$]cats.data.EitherT[M,E,γ$5$],[γ$6$]cats.data.Nested[P.F,[β$4$]cats.data.Validated[E,β$4$],γ$6$]]", "kind" : "def"}, {"label" : "catsStdParallelForZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdParallelForZipLazyList[A<:<?>]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "def"}, {"label" : "catsStdParallelForZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipStream", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdParallelForZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipVector", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdNonEmptyParallelForZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdNonEmptyParallelForZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "def"}, {"label" : "catsParallelForOptionTNestedOption", "tail" : "(P: Parallel[M]): Aux[[β$2$]OptionT[M, β$2$], [γ$3$]Nested[cats.Parallel.F, Option, γ$3$]]", "member" : "cats.instances.ParallelInstances.catsParallelForOptionTNestedOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsParallelForOptionTNestedOption[M[_<:<?>]](implicitP:cats.Parallel[M]):cats.Parallel.Aux[[β$2$]cats.data.OptionT[M,β$2$],[γ$3$]cats.data.Nested[P.F,Option,γ$3$]]", "kind" : "def"}, {"label" : "catsParallelForEitherValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$0$]Either[E, β$0$], [β$1$]Validated[E, β$1$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherValidated", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsParallelForEitherValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$0$]scala.util.Either[E,β$0$],[β$1$]cats.data.Validated[E,β$1$]]", "kind" : "def"}, {"label" : "catsParallelForEitherTNestedValidated", "tail" : "(arg0: Monad[M], arg1: Semigroup[E]): Aux[[γ$1$]EitherT[M, E, γ$1$], [γ$2$]Nested[M, [β$0$]Validated[E, β$0$], γ$2$]]", "member" : "cats.instances.ParallelInstances1.catsParallelForEitherTNestedValidated", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsParallelForEitherTNestedValidated[M[_<:<?>],E](implicitevidence$1:cats.Monad[M],implicitevidence$2:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[γ$1$]cats.data.EitherT[M,E,γ$1$],[γ$2$]cats.data.Nested[M,[β$0$]cats.data.Validated[E,β$0$],γ$2$]]", "kind" : "def"}, {"label" : "catsContravariantMonoidalForOrdering", "tail" : ": ContravariantMonoidal[Ordering]", "member" : "cats.instances.OrderingInstances.catsContravariantMonoidalForOrdering", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsContravariantMonoidalForOrdering:cats.ContravariantMonoidal[Ordering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForOrder", "tail" : ": ContravariantMonoidal[Order]", "member" : "cats.instances.OrderInstances.catsContravariantMonoidalForOrder", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsContravariantMonoidalForOrder:cats.ContravariantMonoidal[cats.Order]", "kind" : "implicit val"}, {"label" : "catsKernelOrderingForOrder", "tail" : "(ev: Order[A]): Ordering[A]", "member" : "cats.kernel.OrderToOrderingConversion.catsKernelOrderingForOrder", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelOrderingForOrder[A](implicitev:cats.kernel.Order[A]):Ordering[A]", "kind" : "implicit def"}, {"label" : "catsStdShowForOption", "tail" : "(A: Show[A]): Show[Option[A]]", "member" : "cats.instances.OptionInstances.catsStdShowForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForOption[A](implicitA:cats.Show[A]):cats.Show[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForOption", "tail" : ": Traverse[Option] with MonadError[Option, Unit] with Alternative[Option] with CommutativeMonad[Option] with CoflatMap[Option] with Align[Option]", "member" : "cats.instances.OptionInstances.catsStdInstancesForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForOption:cats.Traverse[Option]withcats.MonadError[Option,Unit]withcats.Alternative[Option]withcats.CommutativeMonad[Option]withcats.CoflatMap[Option]withcats.Align[Option]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForOption", "tail" : "(arg0: Semigroup[A]): Monoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdMonoidForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForOption[A](implicitevidence$3:cats.kernel.Semigroup[A]):cats.kernel.Monoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForOption", "tail" : "(arg0: CommutativeSemigroup[A]): CommutativeMonoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdCommutativeMonoidForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForOption[A](implicitevidence$2:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeMonoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForOption", "tail" : "(arg0: Order[A]): Order[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdOrderForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForOption[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForOption", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Option[A]]", "member" : "cats.kernel.instances.OptionInstances0.catsKernelStdPartialOrderForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForOption[A](implicitevidence$4:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForOption", "tail" : "(arg0: Hash[A]): Hash[Option[A]]", "member" : "cats.kernel.instances.OptionInstances1.catsKernelStdHashForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForOption[A](implicitevidence$5:cats.kernel.Hash[A]):cats.kernel.Hash[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForOption", "tail" : "(arg0: Eq[A]): Eq[Option[A]]", "member" : "cats.kernel.instances.OptionInstances2.catsKernelStdEqForOption", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForOption[A](implicitevidence$6:cats.kernel.Eq[A]):cats.kernel.Eq[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForMap", "tail" : "(): UnorderedTraverse[[β$0$]Map[K, β$0$]] with FlatMap[[β$1$]Map[K, β$1$]] with Align[[β$2$]Map[K, β$2$]]", "member" : "cats.instances.MapInstances.catsStdInstancesForMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForMap[K]:cats.UnorderedTraverse[[β$0$]scala.collection.immutable.Map[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.Map[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.Map[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForMap", "tail" : "(showA: Show[A], showB: Show[B]): Show[Map[A, B]]", "member" : "cats.instances.MapInstances.catsStdShowForMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForMap[A,B](implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[Map[A,B]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForMap", "tail" : "(arg0: CommutativeSemigroup[V]): CommutativeMonoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdCommutativeMonoidForMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForMap[K,V](implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForMap", "tail" : "(arg0: Hash[K], arg1: Hash[V]): Hash[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdHashForMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.kernel.Hash[V]):cats.kernel.Hash[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForMap", "tail" : "(arg0: Semigroup[V]): Monoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdMonoidForMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForMap[K,V](implicitevidence$5:cats.kernel.Semigroup[V]):cats.kernel.Monoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForMap", "tail" : "(arg0: Eq[V]): Eq[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdEqForMap", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForMap[K,V](implicitevidence$4:cats.kernel.Eq[V]):cats.kernel.Eq[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsStdNonEmptyParallelForListZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ListInstances.catsStdNonEmptyParallelForListZipList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdNonEmptyParallelForListZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "implicit def"}, {"label" : "catsStdShowForList", "tail" : "(arg0: Show[A]): Show[List[A]]", "member" : "cats.instances.ListInstances.catsStdShowForList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForList[A](implicitevidence$1:cats.Show[A]):cats.Show[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForList", "tail" : ": Traverse[List] with Alternative[List] with Monad[List] with CoflatMap[List] with Align[List]", "member" : "cats.instances.ListInstances.catsStdInstancesForList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForList:cats.Traverse[List]withcats.Alternative[List]withcats.Monad[List]withcats.CoflatMap[List]withcats.Align[List]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForList", "tail" : "(): Monoid[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdMonoidForList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForList[A]:cats.kernel.Monoid[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForList", "tail" : "(arg0: Order[A]): Order[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdOrderForList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForList", "tail" : "(arg0: Hash[A]): Hash[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdHashForList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdPartialOrderForList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForList", "tail" : "(arg0: Eq[A]): Eq[List[A]]", "member" : "cats.kernel.instances.ListInstances2.catsKernelStdEqForList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdParallelForLazyListZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.LazyListInstances.catsStdParallelForLazyListZipLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdParallelForLazyListZipLazyList[A]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForLazyList", "tail" : ": TraverseFilter[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdTraverseFilterForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdTraverseFilterForLazyList:cats.TraverseFilter[LazyList]", "kind" : "implicit val"}, {"label" : "catsStdShowForLazyList", "tail" : "(arg0: Show[A]): Show[LazyList[A]]", "member" : "cats.instances.LazyListInstances.catsStdShowForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForLazyList[A](implicitevidence$1:cats.Show[A]):cats.Show[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForLazyList", "tail" : ": Traverse[LazyList] with Alternative[LazyList] with Monad[LazyList] with CoflatMap[LazyList] with Align[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdInstancesForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForLazyList:cats.Traverse[LazyList]withcats.Alternative[LazyList]withcats.Monad[LazyList]withcats.CoflatMap[LazyList]withcats.Align[LazyList]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForLazyList", "tail" : "(): Monoid[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdMonoidForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForLazyList[A]:cats.kernel.Monoid[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForLazyList", "tail" : "(arg0: Order[A]): Order[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdOrderForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForLazyList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForLazyList", "tail" : "(arg0: Hash[A]): Hash[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdHashForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForLazyList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForLazyList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdPartialOrderForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForLazyList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForLazyList", "tail" : "(arg0: Eq[A]): Eq[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances2.catsKernelStdEqForLazyList", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForLazyList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsInvariantMonoidalCommutativeSemigroup", "tail" : ": InvariantMonoidal[CommutativeSemigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalCommutativeSemigroup", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsInvariantMonoidalCommutativeSemigroup:cats.InvariantMonoidal[cats.kernel.CommutativeSemigroup]", "kind" : "implicit val"}, {"label" : "catsInvariantMonoidalSemigroup", "tail" : ": InvariantMonoidal[Semigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalSemigroup", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsInvariantMonoidalSemigroup:cats.InvariantMonoidal[cats.kernel.Semigroup]", "kind" : "implicit val"}, {"label" : "catsSemigroupalForMonoid", "tail" : "(): InvariantSemigroupal[Monoid]", "member" : "cats.instances.InvariantMonoidalInstances.catsSemigroupalForMonoid", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsSemigroupalForMonoid:cats.InvariantSemigroupal[cats.Monoid]", "kind" : "implicit def"}, {"label" : "catsContravariantForHash", "tail" : ": Contravariant[Hash]", "member" : "cats.instances.HashInstances.catsContravariantForHash", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsContravariantForHash:cats.Contravariant[cats.Hash]", "kind" : "implicit val"}, {"label" : "catsKernelHashToHashing", "tail" : "(ev: Hash[A]): Hashing[A]", "member" : "cats.kernel.HashToHashingConversion.catsKernelHashToHashing", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelHashToHashing[A](implicitev:cats.kernel.Hash[A]):scala.util.hashing.Hashing[A]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForFuture", "tail" : "(ec: ExecutionContext): MonadError[Future, Throwable] with CoflatMap[Future] with Monad[Future]", "member" : "cats.instances.FutureInstances.catsStdInstancesForFuture", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForFuture(implicitec:scala.concurrent.ExecutionContext):cats.MonadError[scala.concurrent.Future,Throwable]withcats.CoflatMap[scala.concurrent.Future]withcats.Monad[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForFuture", "tail" : "(arg0: Monoid[A], ec: ExecutionContext): Monoid[Future[A]]", "member" : "cats.instances.FutureInstances1.catsStdMonoidForFuture", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdMonoidForFuture[A](implicitevidence$1:cats.Monoid[A],implicitec:scala.concurrent.ExecutionContext):cats.Monoid[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForFuture", "tail" : "(arg0: Semigroup[A], ec: ExecutionContext): Semigroup[Future[A]]", "member" : "cats.instances.FutureInstances2.catsStdSemigroupForFuture", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdSemigroupForFuture[A](implicitevidence$2:cats.Semigroup[A],implicitec:scala.concurrent.ExecutionContext):cats.Semigroup[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdMonoidKForFunction1", "tail" : ": MonoidK[Endo]", "member" : "cats.instances.Function1Instances.catsStdMonoidKForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdMonoidKForFunction1:cats.MonoidK[cats.Endo]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForFunction1", "tail" : ": ArrowChoice[Function1] with CommutativeArrow[Function1]", "member" : "cats.instances.Function1Instances.catsStdInstancesForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForFunction1:cats.arrow.ArrowChoice[Function1]withcats.arrow.CommutativeArrow[Function1]", "kind" : "implicit val"}, {"label" : "catsStdMonadForFunction1", "tail" : "(): Monad[[β$8$](T1) => β$8$]", "member" : "cats.instances.Function1Instances.catsStdMonadForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdMonadForFunction1[T1]:cats.Monad[[β$8$]T1=>β$8$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantMonoidalForFunction1", "tail" : "(arg0: Monoid[R]): ContravariantMonoidal[[α$6$](α$6$) => R]", "member" : "cats.instances.Function1Instances.catsStdContravariantMonoidalForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdContravariantMonoidalForFunction1[R](implicitevidence$2:cats.Monoid[R]):cats.ContravariantMonoidal[[α$6$]α$6$=>R]", "kind" : "implicit def"}, {"label" : "catsStdDistributiveForFunction1", "tail" : "(): Distributive[[β$12$](T1) => β$12$]", "member" : "cats.instances.Function1Instances0.catsStdDistributiveForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdDistributiveForFunction1[T1]:cats.Distributive[[β$12$]T1=>β$12$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantForFunction1", "tail" : "(): Contravariant[[α$10$](α$10$) => R]", "member" : "cats.instances.Function1Instances0.catsStdContravariantForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdContravariantForFunction1[R]:cats.Contravariant[[α$10$]α$10$=>R]", "kind" : "implicit def"}, {"label" : "catsStdBimonadForFunction0", "tail" : ": Bimonad[Function0]", "member" : "cats.instances.Function0Instances.catsStdBimonadForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdBimonadForFunction0:cats.Bimonad[Function0]", "kind" : "implicit val"}, {"label" : "function0Distributive", "tail" : "(): Distributive[Function0]", "member" : "cats.instances.Function0Instances0.function0Distributive", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#function0Distributive:cats.Distributive[Function0]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction1", "tail" : "(G: CommutativeGroup[B]): CommutativeGroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelCommutativeGroupForFunction1[A,B](implicitG:cats.kernel.CommutativeGroup[B]):cats.kernel.CommutativeGroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction0", "tail" : "(G: CommutativeGroup[A]): CommutativeGroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelCommutativeGroupForFunction0[A](implicitG:cats.kernel.CommutativeGroup[A]):cats.kernel.CommutativeGroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelOrderForFunction0", "tail" : "(ev: Order[A]): Order[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelOrderForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelOrderForFunction0[A](implicitev:cats.kernel.Order[A]):cats.kernel.Order[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction1", "tail" : "(G: BoundedSemilattice[B]): BoundedSemilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelBoundedSemilatticeForFunction1[A,B](implicitG:cats.kernel.BoundedSemilattice[B]):cats.kernel.BoundedSemilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction0", "tail" : "(G: BoundedSemilattice[A]): BoundedSemilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelBoundedSemilatticeForFunction0[A](implicitG:cats.kernel.BoundedSemilattice[A]):cats.kernel.BoundedSemilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction1", "tail" : "(G: Group[B]): Group[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelGroupForFunction1[A,B](implicitG:cats.kernel.Group[B]):cats.kernel.Group[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction0", "tail" : "(G: Group[A]): Group[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelGroupForFunction0[A](implicitG:cats.kernel.Group[A]):cats.kernel.Group[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelPartialOrderForFunction0", "tail" : "(ev: PartialOrder[A]): PartialOrder[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelPartialOrderForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelPartialOrderForFunction0[A](implicitev:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelHashForFunction0", "tail" : "(ev: Hash[A]): Hash[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelHashForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelHashForFunction0[A](implicitev:cats.kernel.Hash[A]):cats.kernel.Hash[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction1", "tail" : "(M: Semilattice[B]): Semilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelSemilatticeForFunction1[A,B](implicitM:cats.kernel.Semilattice[B]):cats.kernel.Semilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction0", "tail" : "(M: Semilattice[A]): Semilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelSemilatticeForFunction0[A](implicitM:cats.kernel.Semilattice[A]):cats.kernel.Semilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction1", "tail" : "(M: CommutativeMonoid[B]): CommutativeMonoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelCommutativeMonoidForFunction1[A,B](implicitM:cats.kernel.CommutativeMonoid[B]):cats.kernel.CommutativeMonoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction0", "tail" : "(M: CommutativeMonoid[A]): CommutativeMonoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelCommutativeMonoidForFunction0[A](implicitM:cats.kernel.CommutativeMonoid[A]):cats.kernel.CommutativeMonoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelEqForFunction0", "tail" : "(ev: Eq[A]): Eq[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelEqForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelEqForFunction0[A](implicitev:cats.kernel.Eq[A]):cats.kernel.Eq[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction1", "tail" : "(S: Band[B]): Band[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelBandForFunction1[A,B](implicitS:cats.kernel.Band[B]):cats.kernel.Band[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction0", "tail" : "(S: Band[A]): Band[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelBandForFunction0[A](implicitS:cats.kernel.Band[A]):cats.kernel.Band[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction1", "tail" : "(M: Monoid[B]): Monoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelMonoidForFunction1[A,B](implicitM:cats.kernel.Monoid[B]):cats.kernel.Monoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction0", "tail" : "(M: Monoid[A]): Monoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelMonoidForFunction0[A](implicitM:cats.kernel.Monoid[A]):cats.kernel.Monoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction1", "tail" : "(S: CommutativeSemigroup[B]): CommutativeSemigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelCommutativeSemigroupForFunction1[A,B](implicitS:cats.kernel.CommutativeSemigroup[B]):cats.kernel.CommutativeSemigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction0", "tail" : "(S: CommutativeSemigroup[A]): CommutativeSemigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelCommutativeSemigroupForFunction0[A](implicitS:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeSemigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction1", "tail" : "(S: Semigroup[B]): Semigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelSemigroupForFunction1[A,B](implicitS:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction0", "tail" : "(S: Semigroup[A]): Semigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction0", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelSemigroupForFunction0[A](implicitS:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForEquiv", "tail" : ": ContravariantMonoidal[Equiv]", "member" : "cats.instances.EquivInstances.catsContravariantMonoidalForEquiv", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsContravariantMonoidalForEquiv:cats.ContravariantMonoidal[Equiv]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForEq", "tail" : ": ContravariantMonoidal[Eq]", "member" : "cats.instances.EqInstances.catsContravariantMonoidalForEq", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsContravariantMonoidalForEq:cats.ContravariantMonoidal[cats.Eq]", "kind" : "implicit val"}, {"label" : "catsKernelEquivForEq", "tail" : "(ev: Eq[A]): Equiv[A]", "member" : "cats.kernel.EqToEquivConversion.catsKernelEquivForEq", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelEquivForEq[A](implicitev:cats.kernel.Eq[A]):scala.math.Equiv[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherAndValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$9$]Either[E, β$9$], [β$10$]Validated[E, β$10$]]", "member" : "cats.instances.EitherInstances.catsParallelForEitherAndValidated", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsParallelForEitherAndValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$9$]scala.util.Either[E,β$9$],[β$10$]cats.data.Validated[E,β$10$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForEither", "tail" : "(A: Show[A], B: Show[B]): Show[Either[A, B]]", "member" : "cats.instances.EitherInstances.catsStdShowForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForEither[A,B](implicitA:cats.Show[A],implicitB:cats.Show[B]):cats.Show[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupKForEither", "tail" : "(): SemigroupK[[β$7$]Either[L, β$7$]]", "member" : "cats.instances.EitherInstances.catsStdSemigroupKForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdSemigroupKForEither[L]:cats.SemigroupK[[β$7$]scala.util.Either[L,β$7$]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForEither", "tail" : "(): MonadError[[β$0$]Either[A, β$0$], A] with Traverse[[β$1$]Either[A, β$1$]] with Align[[β$2$]Either[A, β$2$]]", "member" : "cats.instances.EitherInstances.catsStdInstancesForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForEither[A]:cats.MonadError[[β$0$]scala.util.Either[A,β$0$],A]withcats.Traverse[[β$1$]scala.util.Either[A,β$1$]]withcats.Align[[β$2$]scala.util.Either[A,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForEither", "tail" : ": Bitraverse[Either]", "member" : "cats.instances.EitherInstances.catsStdBitraverseForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdBitraverseForEither:cats.Bitraverse[Either]", "kind" : "implicit val"}, {"label" : "catsDataMonoidForEither", "tail" : "(B: Monoid[B]): Monoid[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsDataMonoidForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsDataMonoidForEither[A,B](implicitB:cats.kernel.Monoid[B]):cats.kernel.Monoid[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdOrderForEither", "tail" : "(A: Order[A], B: Order[B]): Order[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsStdOrderForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdOrderForEither[A,B](implicitA:cats.kernel.Order[A],implicitB:cats.kernel.Order[B]):cats.kernel.Order[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdHashForEither", "tail" : "(A: Hash[A], B: Hash[B]): Hash[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdHashForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdHashForEither[A,B](implicitA:cats.kernel.Hash[A],implicitB:cats.kernel.Hash[B]):cats.kernel.Hash[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdPartialOrderForEither", "tail" : "(A: PartialOrder[A], B: PartialOrder[B]): PartialOrder[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdPartialOrderForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdPartialOrderForEither[A,B](implicitA:cats.kernel.PartialOrder[A],implicitB:cats.kernel.PartialOrder[B]):cats.kernel.PartialOrder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsDataSemigroupForEither", "tail" : "(B: Semigroup[B]): Semigroup[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsDataSemigroupForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsDataSemigroupForEither[A,B](implicitB:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdEqForEither", "tail" : "(A: Eq[A], B: Eq[B]): Eq[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances1.catsStdEqForEither", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdEqForEither[A,B](implicitA:cats.kernel.Eq[A],implicitB:cats.kernel.Eq[B]):cats.kernel.Eq[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdShowForBitSet", "tail" : "(): Show[BitSet]", "member" : "cats.instances.BitSetInstances.catsStdShowForBitSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForBitSet:cats.Show[scala.collection.immutable.BitSet]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForBitSet", "tail" : ": BoundedSemilattice[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdSemilatticeForBitSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForBitSet:cats.kernel.BoundedSemilattice[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBitSet", "tail" : ": PartialOrder[BitSet] with Hash[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdOrderForBitSet", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForBitSet:cats.kernel.PartialOrder[scala.collection.immutable.BitSet]withcats.kernel.Hash[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigDecimal", "tail" : ": Show[BigDecimal]", "member" : "cats.instances.BigDecimalInstances.catsStdShowForBigDecimal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForBigDecimal:cats.Show[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigDecimal", "tail" : ": CommutativeGroup[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdGroupForBigDecimal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForBigDecimal:cats.kernel.CommutativeGroup[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigDecimal", "tail" : ": Order[BigDecimal] with Hash[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdOrderForBigDecimal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForBigDecimal:cats.kernel.Order[BigDecimal]withcats.kernel.Hash[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigInt", "tail" : ": Show[BigInt]", "member" : "cats.instances.BigIntInstances.catsStdShowForBigInt", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForBigInt:cats.Show[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigInt", "tail" : ": CommutativeGroup[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdGroupForBigInt", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForBigInt:cats.kernel.CommutativeGroup[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigInt", "tail" : ": Order[BigInt] with Hash[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdOrderForBigInt", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForBigInt:cats.kernel.Order[BigInt]withcats.kernel.Hash[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple22", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20], A21: BoundedSemilattice[A21]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20],implicitA21:cats.kernel.BoundedSemilattice[A21]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple22", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20], A21: Order[A21]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20],implicitA21:cats.kernel.Order[A21]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple22", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20], A21: CommutativeGroup[A21]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20],implicitA21:cats.kernel.CommutativeGroup[A21]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple21", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple21", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple21", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple20", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple20", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple20", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple19", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple19", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple19", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple18", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple18", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple18", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple17", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple17", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple17", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple16", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple16", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple16", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple15", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple15", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple15", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple14", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple14", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple14", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple13", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple13", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple13", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple12", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple12", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple12", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple11", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple11", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple11", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple10", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple10", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple10", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple9", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple9", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple9", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple8", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple8", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7]): Order[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple8", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple7", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple7", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6]): Order[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple7", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple6", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple6", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5]): Order[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple6", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5]): CommutativeGroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple5", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4]): BoundedSemilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple5", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4]): Order[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4]):cats.kernel.Order[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple5", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4]): CommutativeGroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple4", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3]): BoundedSemilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple4", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3]): Order[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3]):cats.kernel.Order[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple4", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3]): CommutativeGroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple3", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2]): BoundedSemilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2]):cats.kernel.BoundedSemilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple3", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2]): Order[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2]):cats.kernel.Order[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple3", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2]): CommutativeGroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2]):cats.kernel.CommutativeGroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple2", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1]): BoundedSemilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1]):cats.kernel.BoundedSemilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple2", "tail" : "(A0: Order[A0], A1: Order[A1]): Order[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple2[A0,A1](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1]):cats.kernel.Order[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple2", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1]): CommutativeGroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1]):cats.kernel.CommutativeGroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple1", "tail" : "(A0: BoundedSemilattice[A0]): BoundedSemilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple1[A0](implicitA0:cats.kernel.BoundedSemilattice[A0]):cats.kernel.BoundedSemilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple1", "tail" : "(A0: Order[A0]): Order[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForTuple1[A0](implicitA0:cats.kernel.Order[A0]):cats.kernel.Order[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple1", "tail" : "(A0: CommutativeGroup[A0]): CommutativeGroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple1[A0](implicitA0:cats.kernel.CommutativeGroup[A0]):cats.kernel.CommutativeGroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple22", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20], A21: PartialOrder[A21]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20],implicitA21:cats.kernel.PartialOrder[A21]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple22", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20], A21: Hash[A21]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20],implicitA21:cats.kernel.Hash[A21]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple22", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20], A21: Group[A21]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20],implicitA21:cats.kernel.Group[A21]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple22", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20], A21: CommutativeMonoid[A21]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20],implicitA21:cats.kernel.CommutativeMonoid[A21]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple22", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20], A21: Semilattice[A21]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20],implicitA21:cats.kernel.Semilattice[A21]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple21", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple21", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple21", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple21", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple21", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple20", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple20", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple20", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple20", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple20", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple19", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple19", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple19", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple19", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple19", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple18", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple18", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple18", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple18", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple18", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple17", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple17", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple17", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple17", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple17", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple16", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple16", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple16", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple16", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple16", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple15", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple15", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple15", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple15", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple15", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple14", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple14", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple14", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple14", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple14", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple13", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple13", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple13", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple13", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple13", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple12", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple12", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple12", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple12", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple12", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple11", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple11", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple11", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple11", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple11", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple10", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple10", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple10", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple10", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple10", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple9", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple9", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple9", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple9", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple9", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple8", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple8", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple8", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7]): Group[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple8", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple8", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple7", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple7", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6]): Hash[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple7", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6]): Group[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple7", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple7", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6]): Semilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple6", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5]): PartialOrder[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple6", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5]): Hash[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple6", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5]): Group[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple6", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple6", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5]): Semilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple5", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4]): PartialOrder[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple5", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4]): Hash[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4]):cats.kernel.Hash[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple5", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4]): Group[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4]):cats.kernel.Group[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple5", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4]): CommutativeMonoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple5", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4]): Semilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple4", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3]): PartialOrder[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3]):cats.kernel.PartialOrder[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple4", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3]): Hash[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3]):cats.kernel.Hash[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple4", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3]): Group[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3]):cats.kernel.Group[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple4", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3]): CommutativeMonoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple4", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3]): Semilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3]):cats.kernel.Semilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple3", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2]): PartialOrder[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2]):cats.kernel.PartialOrder[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple3", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2]): Hash[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple3[A0,A1,A2](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2]):cats.kernel.Hash[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple3", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2]): Group[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2]):cats.kernel.Group[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple3", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2]): CommutativeMonoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2]):cats.kernel.CommutativeMonoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple3", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2]): Semilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2]):cats.kernel.Semilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple2", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1]): PartialOrder[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple2[A0,A1](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1]):cats.kernel.PartialOrder[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple2", "tail" : "(A0: Hash[A0], A1: Hash[A1]): Hash[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple2[A0,A1](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1]):cats.kernel.Hash[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple2", "tail" : "(A0: Group[A0], A1: Group[A1]): Group[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple2[A0,A1](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1]):cats.kernel.Group[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple2", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1]): CommutativeMonoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1]):cats.kernel.CommutativeMonoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple2", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1]): Semilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1]):cats.kernel.Semilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple1", "tail" : "(A0: PartialOrder[A0]): PartialOrder[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdPartialOrderForTuple1[A0](implicitA0:cats.kernel.PartialOrder[A0]):cats.kernel.PartialOrder[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple1", "tail" : "(A0: Hash[A0]): Hash[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdHashForTuple1[A0](implicitA0:cats.kernel.Hash[A0]):cats.kernel.Hash[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple1", "tail" : "(A0: Group[A0]): Group[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForTuple1[A0](implicitA0:cats.kernel.Group[A0]):cats.kernel.Group[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple1", "tail" : "(A0: CommutativeMonoid[A0]): CommutativeMonoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple1[A0](implicitA0:cats.kernel.CommutativeMonoid[A0]):cats.kernel.CommutativeMonoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple1", "tail" : "(A0: Semilattice[A0]): Semilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemilatticeForTuple1[A0](implicitA0:cats.kernel.Semilattice[A0]):cats.kernel.Semilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple22", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20], A21: Monoid[A21]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20],implicitA21:cats.kernel.Monoid[A21]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple22", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20], A21: CommutativeSemigroup[A21]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20],implicitA21:cats.kernel.CommutativeSemigroup[A21]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple22", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20], A21: Band[A21]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20],implicitA21:cats.kernel.Band[A21]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple21", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple21", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple21", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple20", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple20", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple20", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple19", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple19", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple19", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple18", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple18", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple18", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple17", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple17", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple17", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple16", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple16", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple16", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple15", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple15", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple15", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple14", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple14", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple14", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple13", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple13", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple13", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple12", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple12", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple12", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple11", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple11", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple11", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple10", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple10", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple10", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple9", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple9", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple9", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple8", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple8", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple8", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7]): Band[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple7", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6]): Monoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple7", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple7", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6]): Band[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple6", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5]): Monoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple6", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple6", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5]): Band[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple5", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4]): Monoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4]):cats.kernel.Monoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple5", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4]): CommutativeSemigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple5", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4]): Band[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4]):cats.kernel.Band[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple4", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3]): Monoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3]):cats.kernel.Monoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple4", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3]): CommutativeSemigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple4", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3]): Band[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3]):cats.kernel.Band[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple3", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2]): Monoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2]):cats.kernel.Monoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple3", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2]): CommutativeSemigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2]):cats.kernel.CommutativeSemigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple3", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2]): Band[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple3[A0,A1,A2](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2]):cats.kernel.Band[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple2", "tail" : "(A0: Monoid[A0], A1: Monoid[A1]): Monoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple2[A0,A1](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1]):cats.kernel.Monoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple2", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1]): CommutativeSemigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1]):cats.kernel.CommutativeSemigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple2", "tail" : "(A0: Band[A0], A1: Band[A1]): Band[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple2[A0,A1](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1]):cats.kernel.Band[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple1", "tail" : "(A0: Monoid[A0]): Monoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdMonoidForTuple1[A0](implicitA0:cats.kernel.Monoid[A0]):cats.kernel.Monoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple1", "tail" : "(A0: CommutativeSemigroup[A0]): CommutativeSemigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple1[A0](implicitA0:cats.kernel.CommutativeSemigroup[A0]):cats.kernel.CommutativeSemigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple1", "tail" : "(A0: Band[A0]): Band[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdBandForTuple1[A0](implicitA0:cats.kernel.Band[A0]):cats.kernel.Band[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple22", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20], A21: Eq[A21]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20],implicitA21:cats.kernel.Eq[A21]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple22", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20], A21: Semigroup[A21]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple22", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20],implicitA21:cats.kernel.Semigroup[A21]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple21", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple21", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple21", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple20", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple20", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple20", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple19", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple19", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple19", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple18", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple18", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple18", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple17", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple17", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple17", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple16", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple16", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple16", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple15", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple15", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple15", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple14", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple14", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple14", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple13", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple13", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple13", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple12", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple12", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple12", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple11", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple11", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple11", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple10", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple10", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple10", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple9", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple9", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple9", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple8", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple8", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple8", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple7", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6]): Eq[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple7", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6]): Semigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple7", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple6", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5]): Eq[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple6", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5]): Semigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple6", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple5", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4]): Eq[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4]):cats.kernel.Eq[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple5", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4]): Semigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple5", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple4", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3]): Eq[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3]):cats.kernel.Eq[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple4", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3]): Semigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple4", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3]):cats.kernel.Semigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple3", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2]): Eq[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple3[A0,A1,A2](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2]):cats.kernel.Eq[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple3", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2]): Semigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple3", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2]):cats.kernel.Semigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple2", "tail" : "(A0: Eq[A0], A1: Eq[A1]): Eq[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple2[A0,A1](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1]):cats.kernel.Eq[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple2", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1]): Semigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1]):cats.kernel.Semigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple1", "tail" : "(A0: Eq[A0]): Eq[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdEqForTuple1[A0](implicitA0:cats.kernel.Eq[A0]):cats.kernel.Eq[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple1", "tail" : "(A0: Semigroup[A0]): Semigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple1", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdSemigroupForTuple1[A0](implicitA0:cats.kernel.Semigroup[A0]):cats.kernel.Semigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTuple2", "tail" : "(): Traverse[[β$0$](X, β$0$)] with Comonad[[β$1$](X, β$1$)] with Reducible[[β$2$](X, β$2$)]", "member" : "cats.instances.Tuple2Instances.catsStdInstancesForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdInstancesForTuple2[X]:cats.Traverse[[β$0$](X,β$0$)]withcats.Comonad[[β$1$](X,β$1$)]withcats.Reducible[[β$2$](X,β$2$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForTuple2", "tail" : "(aShow: Show[A], bShow: Show[B]): Show[(A, B)]", "member" : "cats.instances.Tuple2Instances.catsStdShowForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForTuple2[A,B](implicitaShow:cats.Show[A],implicitbShow:cats.Show[B]):cats.Show[(A,B)]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForTuple2", "tail" : ": Bitraverse[Tuple2]", "member" : "cats.instances.Tuple2Instances.catsStdBitraverseForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdBitraverseForTuple2:cats.Bitraverse[Tuple2]", "kind" : "implicit val"}, {"label" : "catsStdCommutativeMonadForTuple2", "tail" : "(MX: CommutativeMonoid[X]): CommutativeMonad[[β$6$](X, β$6$)]", "member" : "cats.instances.Tuple2Instances1.catsStdCommutativeMonadForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdCommutativeMonadForTuple2[X](implicitMX:cats.kernel.CommutativeMonoid[X]):cats.CommutativeMonad[[β$6$](X,β$6$)]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeFlatMapForTuple2", "tail" : "(MX: CommutativeSemigroup[X]): CommutativeFlatMap[[β$8$](X, β$8$)]", "member" : "cats.instances.Tuple2Instances2.catsStdCommutativeFlatMapForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdCommutativeFlatMapForTuple2[X](implicitMX:cats.kernel.CommutativeSemigroup[X]):cats.CommutativeFlatMap[[β$8$](X,β$8$)]", "kind" : "implicit def"}, {"label" : "catsStdMonadForTuple2", "tail" : "(MX: Monoid[X]): Monad[[β$10$](X, β$10$)]", "member" : "cats.instances.Tuple2Instances3.catsStdMonadForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdMonadForTuple2[X](implicitMX:cats.Monoid[X]):cats.Monad[[β$10$](X,β$10$)]", "kind" : "implicit def"}, {"label" : "catsStdFlatMapForTuple2", "tail" : "(SX: Semigroup[X]): FlatMap[[β$12$](X, β$12$)]", "member" : "cats.instances.Tuple2Instances4.catsStdFlatMapForTuple2", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdFlatMapForTuple2[X](implicitSX:cats.Semigroup[X]):cats.FlatMap[[β$12$](X,β$12$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForUnit", "tail" : ": Show[Unit]", "member" : "cats.instances.UnitInstances.catsStdShowForUnit", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForUnit:cats.Show[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdAlgebraForUnit", "tail" : ": BoundedSemilattice[Unit] with CommutativeGroup[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdAlgebraForUnit", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdAlgebraForUnit:cats.kernel.BoundedSemilattice[Unit]withcats.kernel.CommutativeGroup[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUnit", "tail" : ": Order[Unit] with Hash[Unit] with LowerBounded[Unit] with UpperBounded[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdOrderForUnit", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForUnit:cats.kernel.Order[Unit]withcats.kernel.Hash[Unit]withcats.kernel.LowerBounded[Unit]withcats.kernel.UpperBounded[Unit]", "kind" : "implicit val"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean] with Hash[Boolean] with LowerBounded[Boolean] with UpperBounded[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]withcats.kernel.Hash[Boolean]withcats.kernel.LowerBounded[Boolean]withcats.kernel.UpperBounded[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double] with Hash[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]withcats.kernel.Hash[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float] with Hash[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]withcats.kernel.Hash[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForShort", "tail" : ": Show[Short]", "member" : "cats.instances.ShortInstances.catsStdShowForShort", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForShort:cats.Show[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForShort", "tail" : ": CommutativeGroup[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdGroupForShort", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForShort:cats.kernel.CommutativeGroup[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForShort", "tail" : ": Order[Short] with Hash[Short] with LowerBounded[Short] with UpperBounded[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdOrderForShort", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForShort:cats.kernel.Order[Short]withcats.kernel.Hash[Short]withcats.kernel.LowerBounded[Short]withcats.kernel.UpperBounded[Short]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long] with Hash[Long] with LowerBounded[Long] with UpperBounded[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]withcats.kernel.Hash[Long]withcats.kernel.LowerBounded[Long]withcats.kernel.UpperBounded[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForByte", "tail" : ": Show[Byte]", "member" : "cats.instances.ByteInstances.catsStdShowForByte", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForByte:cats.Show[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForByte", "tail" : ": CommutativeGroup[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdGroupForByte", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForByte:cats.kernel.CommutativeGroup[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForByte", "tail" : ": Order[Byte] with Hash[Byte] with LowerBounded[Byte] with UpperBounded[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdOrderForByte", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForByte:cats.kernel.Order[Byte]withcats.kernel.Hash[Byte]withcats.kernel.LowerBounded[Byte]withcats.kernel.UpperBounded[Byte]", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int] with Hash[Int] with LowerBounded[Int] with UpperBounded[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]withcats.kernel.Hash[Int]withcats.kernel.LowerBounded[Int]withcats.kernel.UpperBounded[Int]", "kind" : "implicit val"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "checkAll", "tail" : "(name: String, ruleSet: RuleSet)(config: PropertyCheckConfiguration, prettifier: Prettifier, pos: Position): Unit", "member" : "org.typelevel.discipline.scalatest.FunSuiteDiscipline.checkAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#checkAll(name:String,ruleSet:org.typelevel.discipline.Laws#RuleSet)(implicitconfig:FunSuiteDiscipline.this.PropertyCheckConfiguration,implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "convertConfiguration", "tail" : "(config: PropertyCheckConfiguration): org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "member" : "org.typelevel.discipline.scalatest.Discipline.convertConfiguration", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertConfiguration(config:Discipline.this.PropertyCheckConfiguration):org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "kind" : "final def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), genAndNameF: (Gen[F], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),genAndNameF:(org.scalacheck.Gen[F],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], genF: Gen[F], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],genF:org.scalacheck.Gen[F],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, nameF: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,nameF:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,ASSERTION](nameA:String,nameB:String,nameC:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,C,ASSERTION](fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,ASSERTION](nameA:String,nameB:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,B,ASSERTION](fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,ASSERTION](genA:org.scalacheck.Gen[A],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,ASSERTION](nameA:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll[A,ASSERTION](fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(configParams: PropertyCheckConfigParam*): ConfiguredPropertyCheck", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#forAll(configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*):ScalaCheckDrivenPropertyChecks.this.ConfiguredPropertyCheck", "kind" : "def"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "whenever", "tail" : "(condition: Boolean)(fun: => T)(wa: WheneverAsserting[T]): Result", "member" : "org.scalatest.prop.Whenever.whenever", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#whenever[T](condition:Boolean)(fun:=>T)(implicitwa:org.scalatest.enablers.WheneverAsserting[T]):wa.Result", "kind" : "def"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.of", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToRegexWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToStringShouldWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.the", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#between[K,V,JMAP[k,v]<:java.util.Map[k,v]](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#between[E,C[_]](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#every[K,V,JMAP[k,v]<:java.util.Map[k,v]](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#every[K,V,MAP[k,v]<:scala.collection.Map[k,v]](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#every[E,C[_]](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.should.Matchers.message", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: => Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.should.Matchers.thrownBy", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneElementOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atMostOneElementOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderElementsOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#inOrderElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrder", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allElementsOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#allElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderOnly", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.only", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsInOrderAs", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#theSameElementsInOrderAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsAs", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#theSameElementsAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noElementsOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#noElementsOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noneOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneElementOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atLeastOneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneElementOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#oneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.should.Matchers.definedAt", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>=", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<=", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.should.Matchers.regex", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.should.Matchers.theSameInstanceAs", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.should.Matchers.value", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.should.Matchers.key", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.should.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.funsuite.AnyFunSuite.toString", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testDataFor", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.styleName", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testsFor", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.run", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTests", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.tags", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTest", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testNames", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.ignore", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.test", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerIgnoredTest", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerTest", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.markup", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.alert", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.note", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.info", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/Cron4sLawSuite.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/Cron4sLawSuite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cron4s.testkit.Cron4sPropSpec", "shortDescription" : "", "members_class" : [{"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.Cron4sPropSpec.generatorDrivenConfig", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#generatorDrivenConfig:Cron4sPropSpec.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"member" : "cron4s.testkit.Cron4sPropSpec#<init>", "error" : "unsupported entity"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.propspec.AnyPropSpec.toString", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.propspec.AnyPropSpecLike.testDataFor", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.propspec.AnyPropSpecLike.styleName", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#styleName:String", "kind" : "final val"}, {"label" : "propertiesFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.propertiesFor", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#propertiesFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.propspec.AnyPropSpecLike.run", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.propspec.AnyPropSpecLike.runTests", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.propspec.AnyPropSpecLike.tags", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.propspec.AnyPropSpecLike.runTest", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.propspec.AnyPropSpecLike.testNames", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.ignore", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "property", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.property", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#property(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.registerIgnoredTest", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.registerTest", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.propspec.AnyPropSpecLike.markup", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.propspec.AnyPropSpecLike.alert", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.propspec.AnyPropSpecLike.note", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.propspec.AnyPropSpecLike.info", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/Cron4sPropSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/Cron4sPropSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/testkit\/Cron4sPropSpec.html", "kind" : "class"}, {"name" : "cron4s.testkit.CronDateTimeTestKit", "shortDescription" : "Created by alonsodomin on 29\/08\/2016.", "object" : "cron4s\/testkit\/CronDateTimeTestKit$.html", "members_class" : [{"label" : "InAndIgnoreMethodsAfterTaggedAs", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.InAndIgnoreMethodsAfterTaggedAs", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#InAndIgnoreMethodsAfterTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "InAndIgnoreMethods", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.InAndIgnoreMethods", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#InAndIgnoreMethodsextendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.TheyWord", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbString", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.TheyVerbString", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#TheyVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "TheyVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.TheyVerbStringTaggedAs", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#TheyVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreWord", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.IgnoreWord", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#IgnoreWordextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbString", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.IgnoreVerbString", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#IgnoreVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "IgnoreVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.IgnoreVerbStringTaggedAs", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#IgnoreVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.ItWord", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbString", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.ItVerbString", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#ItVerbStringextendsAnyRef", "kind" : "final class"}, {"label" : "ItVerbStringTaggedAs", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.ItVerbStringTaggedAs", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#ItVerbStringTaggedAsextendsAnyRef", "kind" : "final class"}, {"label" : "BehaviorWord", "tail" : "", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.BehaviorWord", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#BehaviorWordextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.CanVerb.StringCanWrapperForVerb", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.MustVerb.StringMustWrapperForVerb", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "samples", "tail" : ": Seq[(expr.CronExpr, DateTime, Int, DateTime)]", "member" : "cron4s.testkit.CronDateTimeTestKit.samples", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#samples:Seq[(cron4s.expr.CronExpr,DateTime,Int,DateTime)]", "kind" : "lazy val"}, {"member" : "cron4s.testkit.CronDateTimeTestKit#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.flatspec.AnyFlatSpec.toString", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.testDataFor", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.styleName", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.behave", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#behave:org.scalatest.verbs.BehaveWord", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.run", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.testNames", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.runTests", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.runTest", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.tags", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "shorthandSharedTestRegistrationFunction", "tail" : ": StringVerbBehaveLikeInvocation", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.shorthandSharedTestRegistrationFunction", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#shorthandSharedTestRegistrationFunction:org.scalatest.verbs.StringVerbBehaveLikeInvocation", "kind" : "implicit val"}, {"label" : "shorthandTestRegistrationFunction", "tail" : ": StringVerbStringInvocation", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.shorthandTestRegistrationFunction", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#shorthandTestRegistrationFunction:org.scalatest.verbs.StringVerbStringInvocation", "kind" : "implicit val"}, {"label" : "convertToInAndIgnoreMethodsAfterTaggedAs", "tail" : "(resultOfTaggedAsInvocation: ResultOfTaggedAsInvocation): (CronDateTimeTestKit.this)#InAndIgnoreMethodsAfterTaggedAs", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.convertToInAndIgnoreMethodsAfterTaggedAs", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertToInAndIgnoreMethodsAfterTaggedAs(resultOfTaggedAsInvocation:org.scalatest.verbs.ResultOfTaggedAsInvocation):AnyFlatSpecLike.this.InAndIgnoreMethodsAfterTaggedAs", "kind" : "implicit def"}, {"label" : "convertToInAndIgnoreMethods", "tail" : "(resultOfStringPassedToVerb: ResultOfStringPassedToVerb): (CronDateTimeTestKit.this)#InAndIgnoreMethods", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.convertToInAndIgnoreMethods", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertToInAndIgnoreMethods(resultOfStringPassedToVerb:org.scalatest.verbs.ResultOfStringPassedToVerb):AnyFlatSpecLike.this.InAndIgnoreMethods", "kind" : "implicit def"}, {"label" : "they", "tail" : ": (CronDateTimeTestKit.this)#TheyWord", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.they", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#they:AnyFlatSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "ignore", "tail" : ": (CronDateTimeTestKit.this)#IgnoreWord", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.ignore", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#ignore:AnyFlatSpecLike.this.IgnoreWord", "kind" : "val"}, {"label" : "it", "tail" : ": (CronDateTimeTestKit.this)#ItWord", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.it", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#it:AnyFlatSpecLike.this.ItWord", "kind" : "val"}, {"label" : "behavior", "tail" : ": (CronDateTimeTestKit.this)#BehaviorWord", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.behavior", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#behavior:AnyFlatSpecLike.this.BehaviorWord", "kind" : "val"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.registerIgnoredTest", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.registerTest", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.markup", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.alert", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.note", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.flatspec.AnyFlatSpecLike.info", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: Position): (CronDateTimeTestKit.this)#StringCanWrapperForVerb", "member" : "org.scalatest.verbs.CanVerb.convertToStringCanWrapper", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: Position): (CronDateTimeTestKit.this)#StringMustWrapperForVerb", "member" : "org.scalatest.verbs.MustVerb.convertToStringMustWrapperForVerb", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): (CronDateTimeTestKit.this)#StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: (CronDateTimeTestKit.this)#NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): (CronDateTimeTestKit.this)#CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): (CronDateTimeTestKit.this)#Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/CronDateTimeTestKit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "AnyDayOfMonth", "tail" : ": CronExpr", "member" : "cron4s.testkit.CronDateTimeTestKit.AnyDayOfMonth", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#AnyDayOfMonth:cron4s.CronExpr", "kind" : "final val"}, {"label" : "Every31DayOfMonth", "tail" : ": CronExpr", "member" : "cron4s.testkit.CronDateTimeTestKit.Every31DayOfMonth", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#Every31DayOfMonth:cron4s.CronExpr", "kind" : "final val"}, {"label" : "Every10Minutes", "tail" : ": CronExpr", "member" : "cron4s.testkit.CronDateTimeTestKit.Every10Minutes", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#Every10Minutes:cron4s.CronExpr", "kind" : "final val"}, {"label" : "BetweenMonth", "tail" : ": CronExpr", "member" : "cron4s.testkit.CronDateTimeTestKit.BetweenMonth", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#BetweenMonth:cron4s.CronExpr", "kind" : "final val"}, {"label" : "BetweenDayOfWeek", "tail" : ": CronExpr", "member" : "cron4s.testkit.CronDateTimeTestKit.BetweenDayOfWeek", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#BetweenDayOfWeek:cron4s.CronExpr", "kind" : "final val"}, {"label" : "EachMinutesOnSundays", "tail" : ": CronExpr", "member" : "cron4s.testkit.CronDateTimeTestKit.EachMinutesOnSundays", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#EachMinutesOnSundays:cron4s.CronExpr", "kind" : "final val"}, {"label" : "OnlyTuesdaysAt12", "tail" : ": CronExpr", "member" : "cron4s.testkit.CronDateTimeTestKit.OnlyTuesdaysAt12", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#OnlyTuesdaysAt12:cron4s.CronExpr", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/CronDateTimeTestKit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/testkit\/CronDateTimeTestKit.html", "kind" : "object"}, {"name" : "cron4s.testkit.CronFieldValue", "shortDescription" : "Created by alonsodomin on 29\/08\/2016.", "members_case class" : [{"member" : "cron4s.testkit.CronFieldValue#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Int", "member" : "cron4s.testkit.CronFieldValue.value", "link" : "cron4s\/testkit\/CronFieldValue.html#value:Int", "kind" : "val"}, {"label" : "field", "tail" : ": F", "member" : "cron4s.testkit.CronFieldValue.field", "link" : "cron4s\/testkit\/CronFieldValue.html#field:F", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "cron4s\/testkit\/CronFieldValue.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/CronFieldValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/CronFieldValue.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/CronFieldValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/CronFieldValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/CronFieldValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/CronFieldValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/CronFieldValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronFieldValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronFieldValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/CronFieldValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/CronFieldValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/CronFieldValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/CronFieldValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/CronFieldValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/CronFieldValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/CronFieldValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cron4s\/testkit\/CronFieldValue.html", "kind" : "case class"}, {"name" : "cron4s.testkit.DateTimeCronTestKit", "shortDescription" : "Created by alonsodomin on 29\/01\/2017.", "members_class" : [{"label" : "ConfiguredPropertyCheck", "tail" : "", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.ConfiguredPropertyCheck", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ConfiguredPropertyCheckextendsAnyRef", "kind" : "class"}, {"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.StringShouldWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnyShouldWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfCollectedAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedArray", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfContainWordForCollectedAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfNotWordForCollectedAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.Collected", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForExtent", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.TheSameInstanceAsPhrase", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ValueWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.KeyWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.HavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "cron4s.testkit.DateTimeCronTestKit#<init>", "error" : "unsupported entity"}, {"label" : "arbitraryDateCron", "tail" : ": Arbitrary[DateCronExpr]", "member" : "cron4s.testkit.gen.CronGenerators.arbitraryDateCron", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryDateCron:org.scalacheck.Arbitrary[cron4s.expr.DateCronExpr]", "kind" : "implicit lazy val"}, {"label" : "arbitraryTimeCron", "tail" : ": Arbitrary[TimeCronExpr]", "member" : "cron4s.testkit.gen.CronGenerators.arbitraryTimeCron", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryTimeCron:org.scalacheck.Arbitrary[cron4s.expr.TimeCronExpr]", "kind" : "implicit lazy val"}, {"label" : "arbitraryFullCron", "tail" : ": Arbitrary[expr.CronExpr]", "member" : "cron4s.testkit.gen.CronGenerators.arbitraryFullCron", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryFullCron:org.scalacheck.Arbitrary[cron4s.expr.CronExpr]", "kind" : "implicit lazy val"}, {"label" : "nodeWithAnyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNodeWithAny[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeWithAnyGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#nodeWithAnyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNodeWithAny[F]]", "kind" : "def"}, {"label" : "nodeGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[FieldNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.nodeGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#nodeGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.FieldNode[F]]", "kind" : "def"}, {"label" : "everyGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EveryNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.everyGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#everyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EveryNode[F]]", "kind" : "def"}, {"label" : "divisibleGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[DivisibleNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.divisibleGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#divisibleGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.DivisibleNode[F]]", "kind" : "def"}, {"label" : "invalidSeveralGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidSeveralGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#invalidSeveralGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "severalGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[SeveralNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.severalGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#severalGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.SeveralNode[F]]", "kind" : "def"}, {"label" : "invalidEnumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidEnumerableGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#invalidEnumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "enumerableGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[EnumerableNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.enumerableGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#enumerableGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.EnumerableNode[F]]", "kind" : "def"}, {"label" : "invalidBetweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidBetweenGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#invalidBetweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "betweenGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[BetweenNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.betweenGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#betweenGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.BetweenNode[F]]", "kind" : "def"}, {"label" : "invalidConstGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.invalidConstGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#invalidConstGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "constGen", "tail" : "(unit: CronUnit[F], ev: Enumerated[CronUnit[F]]): Gen[ConstNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.constGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#constGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F],implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.expr.ConstNode[F]]", "kind" : "def"}, {"label" : "eachGen", "tail" : "(unit: CronUnit[F]): Gen[EachNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.eachGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#eachGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.EachNode[F]]", "kind" : "def"}, {"label" : "anyGen", "tail" : "(unit: CronUnit[F]): Gen[AnyNode[F]]", "member" : "cron4s.testkit.gen.NodeGenerators.anyGen", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#anyGen[F<:cron4s.CronField](implicitunit:cron4s.CronUnit[F]):org.scalacheck.Gen[cron4s.expr.AnyNode[F]]", "kind" : "def"}, {"label" : "divisible2Field", "tail" : "(node: DivisibleNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.divisible2Field", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#divisible2Field[F<:cron4s.CronField](node:cron4s.expr.DivisibleNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "enumerable2Field", "tail" : "(node: EnumerableNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.enumerable2Field", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#enumerable2Field[F<:cron4s.CronField](node:cron4s.expr.EnumerableNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Divisible", "tail" : "(node: SeveralNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.several2Divisible", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#several2Divisible[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Divisible", "tail" : "(node: BetweenNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.between2Divisible", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#between2Divisible[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "each2Divisible", "tail" : "(node: EachNode[F]): DivisibleNode[F]", "member" : "cron4s.expr.NodeConversions.each2Divisible", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#each2Divisible[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.DivisibleNode[F]", "kind" : "implicit def"}, {"label" : "between2Enumerable", "tail" : "(node: BetweenNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.between2Enumerable", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#between2Enumerable[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "const2Enumerable", "tail" : "(node: ConstNode[F]): EnumerableNode[F]", "member" : "cron4s.expr.NodeConversions.const2Enumerable", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#const2Enumerable[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.EnumerableNode[F]", "kind" : "implicit def"}, {"label" : "field2FieldWithAny", "tail" : "(node: FieldNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.field2FieldWithAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#field2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.FieldNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2FieldWithAny", "tail" : "(node: EveryNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.every2FieldWithAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#every2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "several2FieldWithAny", "tail" : "(node: SeveralNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.several2FieldWithAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#several2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "between2FieldWithAny", "tail" : "(node: BetweenNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.between2FieldWithAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#between2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "const2FieldWithAny", "tail" : "(node: ConstNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.const2FieldWithAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#const2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "each2FieldWithAny", "tail" : "(node: EachNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.each2FieldWithAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#each2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "any2FieldWithAny", "tail" : "(node: AnyNode[F]): FieldNodeWithAny[F]", "member" : "cron4s.expr.NodeConversions.any2FieldWithAny", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#any2FieldWithAny[F<:cron4s.CronField](node:cron4s.expr.AnyNode[F]):cron4s.expr.FieldNodeWithAny[F]", "kind" : "implicit def"}, {"label" : "every2Field", "tail" : "(node: EveryNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.every2Field", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#every2Field[F<:cron4s.CronField](node:cron4s.expr.EveryNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "several2Field", "tail" : "(node: SeveralNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.several2Field", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#several2Field[F<:cron4s.CronField](node:cron4s.expr.SeveralNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "between2Field", "tail" : "(node: BetweenNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.between2Field", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#between2Field[F<:cron4s.CronField](node:cron4s.expr.BetweenNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "const2Field", "tail" : "(node: ConstNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.const2Field", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#const2Field[F<:cron4s.CronField](node:cron4s.expr.ConstNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "each2Field", "tail" : "(node: EachNode[F]): FieldNode[F]", "member" : "cron4s.expr.NodeConversions.each2Field", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#each2Field[F<:cron4s.CronField](node:cron4s.expr.EachNode[F]):cron4s.expr.FieldNode[F]", "kind" : "implicit def"}, {"label" : "arbitraryDaysOfWeekUnit", "tail" : ": Arbitrary[CronUnit[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfWeekUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryDaysOfWeekUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthsUnit", "tail" : ": Arbitrary[CronUnit[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMonthsUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryMonthsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDaysOfMonthUnit", "tail" : ": Arbitrary[CronUnit[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryDaysOfMonthUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryDaysOfMonthUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHoursUnit", "tail" : ": Arbitrary[CronUnit[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryHoursUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryHoursUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinutesUnit", "tail" : ": Arbitrary[CronUnit[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitraryMinutesUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryMinutesUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondsUnit", "tail" : ": Arbitrary[CronUnit[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronUnits.arbitrarySecondsUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitrarySecondsUnit:org.scalacheck.Arbitrary[cron4s.CronUnit[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDateTime", "tail" : ": Arbitrary[DateTime]", "member" : "cron4s.testkit.DateTimeTestKitBase.arbitraryDateTime", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#arbitraryDateTime:org.scalacheck.Arbitrary[DateTime]", "kind" : "implicit final lazy val"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.SlowCron4sLawSuite.generatorDrivenConfig", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#generatorDrivenConfig:SlowCron4sLawSuite.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "catsSyntaxParallelFoldMapA", "tail" : "(ta: T[A]): ParallelFoldMapAOps[T, A]", "member" : "cats.syntax.ParallelFoldMapASyntax.catsSyntaxParallelFoldMapA", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxParallelFoldMapA[T[_],A](ta:T[A]):cats.syntax.ParallelFoldMapAOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxWriterId", "tail" : "(a: A): WriterIdSyntax[A]", "member" : "cats.syntax.WriterSyntax.catsSyntaxWriterId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxWriterId[A](a:A):cats.syntax.WriterIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxVectors", "tail" : "(va: Vector[A]): VectorOps[A]", "member" : "cats.syntax.VectorSyntax.catsSyntaxVectors", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxVectors[A](va:Vector[A]):cats.syntax.VectorOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxValidatedId", "tail" : "(a: A): ValidatedIdSyntax[A]", "member" : "cats.syntax.ValidatedSyntax.catsSyntaxValidatedId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxValidatedId[A](a:A):cats.syntax.ValidatedIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "toNonEmptyTraverseOps", "tail" : "(target: F[C])(tc: NonEmptyTraverse[F]): Ops[F, C] { type TypeClassType = cats.NonEmptyTraverse[F] }", "member" : "cats.NonEmptyTraverse.ToNonEmptyTraverseOps.toNonEmptyTraverseOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toNonEmptyTraverseOps[F[_],C](target:F[C])(implicittc:cats.NonEmptyTraverse[F]):cats.NonEmptyTraverse.Ops[F,C]{typeTypeClassType=cats.NonEmptyTraverse[F]}", "kind" : "implicit def"}, {"label" : "toTraverseOps", "tail" : "(target: F[C])(tc: Traverse[F]): Ops[F, C] { type TypeClassType = cats.Traverse[F] }", "member" : "cats.Traverse.ToTraverseOps.toTraverseOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toTraverseOps[F[_],C](target:F[C])(implicittc:cats.Traverse[F]):cats.Traverse.Ops[F,C]{typeTypeClassType=cats.Traverse[F]}", "kind" : "implicit def"}, {"label" : "toStrongOps", "tail" : "(target: F[A, B])(tc: Strong[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Strong[F] }", "member" : "cats.arrow.Strong.ToStrongOps.toStrongOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toStrongOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Strong[F]):cats.arrow.Strong.Ops[F,A,B]{typeTypeClassType=cats.arrow.Strong[F]}", "kind" : "implicit def"}, {"label" : "showInterpolator", "tail" : "(sc: StringContext): ShowInterpolator", "member" : "cats.syntax.ShowSyntax.showInterpolator", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#showInterpolator(sc:StringContext):cats.Show.ShowInterpolator", "kind" : "implicit final def"}, {"label" : "toShow", "tail" : "(target: A)(tc: Show[A]): Ops[A]", "member" : "cats.Show.ToShowOps.toShow", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toShow[A](target:A)(implicittc:cats.Show[A]):cats.Show.Ops[A]", "kind" : "implicit def"}, {"label" : "toSemigroupKOps", "tail" : "(target: F[A])(tc: SemigroupK[F]): Ops[F, A] { type TypeClassType = cats.SemigroupK[F] }", "member" : "cats.SemigroupK.ToSemigroupKOps.toSemigroupKOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toSemigroupKOps[F[_],A](target:F[A])(implicittc:cats.SemigroupK[F]):cats.SemigroupK.Ops[F,A]{typeTypeClassType=cats.SemigroupK[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxNestedReducible", "tail" : "(fga: F[G[A]])(arg0: Reducible[F]): NestedReducibleOps[F, G, A]", "member" : "cats.syntax.ReducibleSyntax.catsSyntaxNestedReducible", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxNestedReducible[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Reducible[F]):cats.syntax.NestedReducibleOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toReducibleOps", "tail" : "(target: F[D])(tc: Reducible[F]): Ops[F, D] { type TypeClassType = cats.Reducible[F] }", "member" : "cats.Reducible.ToReducibleOps.toReducibleOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toReducibleOps[F[_],D](target:F[D])(implicittc:cats.Reducible[F]):cats.Reducible.Ops[F,D]{typeTypeClassType=cats.Reducible[F]}", "kind" : "implicit def"}, {"label" : "toProfunctorOps", "tail" : "(target: F[A, B])(tc: Profunctor[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Profunctor[F] }", "member" : "cats.arrow.Profunctor.ToProfunctorOps.toProfunctorOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toProfunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Profunctor[F]):cats.arrow.Profunctor.Ops[F,A,B]{typeTypeClassType=cats.arrow.Profunctor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxParallelAp", "tail" : "(ma: M[A])(arg0: FlatMap[M]): ParallelApOps[M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelAp", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxParallelAp[M[_],A](ma:M[A])(implicitevidence$4:cats.FlatMap[M]):cats.syntax.ParallelApOps[M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelSequence", "tail" : "(tma: T[M[A]])(arg0: Traverse[T], arg1: Monad[M]): ParallelSequenceOps[T, M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelSequence", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxParallelSequence[T[_],M[_],A](tma:T[M[A]])(implicitevidence$2:cats.Traverse[T],implicitevidence$3:cats.Monad[M]):cats.syntax.ParallelSequenceOps[T,M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelTraverse", "tail" : "(ta: T[A])(arg0: Traverse[T]): ParallelTraversableOps[T, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelTraverse", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxParallelTraverse[T[_],A](ta:T[A])(implicitevidence$1:cats.Traverse[T]):cats.syntax.ParallelTraversableOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Parallel", "tail" : "(t22: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20], M[A21])): Tuple22ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple22Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple22Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20],M[A21])):cats.syntax.Tuple22ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Parallel", "tail" : "(t21: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20])): Tuple21ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple21Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple21Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20])):cats.syntax.Tuple21ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Parallel", "tail" : "(t20: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19])): Tuple20ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple20Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple20Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19])):cats.syntax.Tuple20ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Parallel", "tail" : "(t19: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18])): Tuple19ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple19Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple19Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18])):cats.syntax.Tuple19ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Parallel", "tail" : "(t18: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17])): Tuple18ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple18Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple18Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17])):cats.syntax.Tuple18ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Parallel", "tail" : "(t17: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16])): Tuple17ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple17Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple17Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16])):cats.syntax.Tuple17ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Parallel", "tail" : "(t16: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15])): Tuple16ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple16Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple16Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15])):cats.syntax.Tuple16ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Parallel", "tail" : "(t15: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14])): Tuple15ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple15Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple15Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14])):cats.syntax.Tuple15ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Parallel", "tail" : "(t14: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13])): Tuple14ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple14Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple14Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13])):cats.syntax.Tuple14ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Parallel", "tail" : "(t13: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12])): Tuple13ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple13Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple13Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12])):cats.syntax.Tuple13ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Parallel", "tail" : "(t12: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11])): Tuple12ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple12Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple12Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11])):cats.syntax.Tuple12ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Parallel", "tail" : "(t11: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10])): Tuple11ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple11Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple11Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10])):cats.syntax.Tuple11ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Parallel", "tail" : "(t10: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9])): Tuple10ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple10Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple10Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9])):cats.syntax.Tuple10ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Parallel", "tail" : "(t9: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8])): Tuple9ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple9Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple9Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8])):cats.syntax.Tuple9ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Parallel", "tail" : "(t8: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7])): Tuple8ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple8Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple8Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7])):cats.syntax.Tuple8ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Parallel", "tail" : "(t7: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6])): Tuple7ParallelOps[M, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple7Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple7Parallel[M[_],A0,A1,A2,A3,A4,A5,A6](t7:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6])):cats.syntax.Tuple7ParallelOps[M,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Parallel", "tail" : "(t6: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5])): Tuple6ParallelOps[M, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple6Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple6Parallel[M[_],A0,A1,A2,A3,A4,A5](t6:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5])):cats.syntax.Tuple6ParallelOps[M,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Parallel", "tail" : "(t5: (M[A0], M[A1], M[A2], M[A3], M[A4])): Tuple5ParallelOps[M, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple5Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple5Parallel[M[_],A0,A1,A2,A3,A4](t5:(M[A0],M[A1],M[A2],M[A3],M[A4])):cats.syntax.Tuple5ParallelOps[M,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Parallel", "tail" : "(t4: (M[A0], M[A1], M[A2], M[A3])): Tuple4ParallelOps[M, A0, A1, A2, A3]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple4Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple4Parallel[M[_],A0,A1,A2,A3](t4:(M[A0],M[A1],M[A2],M[A3])):cats.syntax.Tuple4ParallelOps[M,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Parallel", "tail" : "(t3: (M[A0], M[A1], M[A2])): Tuple3ParallelOps[M, A0, A1, A2]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple3Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple3Parallel[M[_],A0,A1,A2](t3:(M[A0],M[A1],M[A2])):cats.syntax.Tuple3ParallelOps[M,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Parallel", "tail" : "(t2: (M[A0], M[A1])): Tuple2ParallelOps[M, A0, A1]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple2Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple2Parallel[M[_],A0,A1](t2:(M[A0],M[A1])):cats.syntax.Tuple2ParallelOps[M,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Parallel", "tail" : "(t1: (M[A0])): Tuple1ParallelOps[M, A0]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple1Parallel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple1Parallel[M[_],A0](t1:(M[A0],)):cats.syntax.Tuple1ParallelOps[M,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxOrder", "tail" : "(a: A)(arg0: Order[A]): OrderOps[A]", "member" : "cats.syntax.OrderSyntax.catsSyntaxOrder", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxOrder[A](a:A)(implicitevidence$1:cats.Order[A]):cats.syntax.OrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxPartialOrder", "tail" : "(a: A)(arg0: PartialOrder[A]): PartialOrderOps[A]", "member" : "cats.syntax.PartialOrderSyntax.catsSyntaxPartialOrder", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxPartialOrder[A](a:A)(implicitevidence$1:cats.PartialOrder[A]):cats.syntax.PartialOrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOption", "tail" : "(oa: Option[A]): OptionOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxOption[A](oa:Option[A]):cats.syntax.OptionOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOptionId", "tail" : "(a: A): OptionIdOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOptionId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxOptionId[A](a:A):cats.syntax.OptionIdOps[A]", "kind" : "implicit final def"}, {"label" : "none", "tail" : "(): Option[A]", "member" : "cats.syntax.OptionSyntax.none", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#none[A]:Option[A]", "kind" : "final def"}, {"label" : "catsSyntaxMonoid", "tail" : "(a: A)(arg0: Monoid[A]): MonoidOps[A]", "member" : "cats.syntax.MonoidSyntax.catsSyntaxMonoid", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxMonoid[A](a:A)(implicitevidence$1:cats.Monoid[A]):cats.syntax.MonoidOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadIdOps", "tail" : "(a: A): MonadIdOps[A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonadIdOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxMonadIdOps[A](a:A):cats.syntax.MonadIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonad", "tail" : "(fa: F[A]): MonadOps[F, A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonad", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxMonad[F[_],A](fa:F[A]):cats.syntax.MonadOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadErrorRethrow", "tail" : "(fea: F[Either[E, A]])(F: MonadError[F, _ >: E]): MonadErrorRethrowOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadErrorRethrow", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxMonadErrorRethrow[F[_],E,A](fea:F[Either[E,A]])(implicitF:cats.MonadError[F,_>:E]):cats.syntax.MonadErrorRethrowOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadError", "tail" : "(fa: F[A])(F: MonadError[F, E]): MonadErrorOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadError", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxMonadError[F[_],E,A](fa:F[A])(implicitF:cats.MonadError[F,E]):cats.syntax.MonadErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxList", "tail" : "(la: List[A]): ListOps[A]", "member" : "cats.syntax.ListSyntax.catsSyntaxList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxList[A](la:List[A]):cats.syntax.ListOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIorId", "tail" : "(a: A): IorIdOps[A]", "member" : "cats.syntax.IorSyntax.catsSyntaxIorId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxIorId[A](a:A):cats.syntax.IorIdOps[A]", "kind" : "implicit final def"}, {"label" : "toInvariantOps", "tail" : "(target: F[A])(tc: Invariant[F]): Ops[F, A] { type TypeClassType = cats.Invariant[F] }", "member" : "cats.Invariant.ToInvariantOps.toInvariantOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toInvariantOps[F[_],A](target:F[A])(implicittc:cats.Invariant[F]):cats.Invariant.Ops[F,A]{typeTypeClassType=cats.Invariant[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxHash", "tail" : "(a: A)(arg0: Hash[A]): HashOps[A]", "member" : "cats.syntax.HashSyntax.catsSyntaxHash", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxHash[A](a:A)(implicitevidence$1:cats.Hash[A]):cats.syntax.HashOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxGroup", "tail" : "(a: A)(arg0: Group[A]): GroupOps[A]", "member" : "cats.syntax.GroupSyntax.catsSyntaxGroup", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxGroup[A](a:A)(implicitevidence$1:cats.Group[A]):cats.syntax.GroupOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxSemigroup", "tail" : "(a: A)(arg0: Semigroup[A]): SemigroupOps[A]", "member" : "cats.syntax.SemigroupSyntax.catsSyntaxSemigroup", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxSemigroup[A](a:A)(implicitevidence$1:cats.Semigroup[A]):cats.syntax.SemigroupOps[A]", "kind" : "implicit final def"}, {"label" : "toFunctorOps", "tail" : "(target: F[A])(tc: Functor[F]): Ops[F, A] { type TypeClassType = cats.Functor[F] }", "member" : "cats.Functor.ToFunctorOps.toFunctorOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toFunctorOps[F[_],A](target:F[A])(implicittc:cats.Functor[F]):cats.Functor.Ops[F,A]{typeTypeClassType=cats.Functor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFoldOps", "tail" : "(fa: F[A])(arg0: Foldable[F]): FoldableOps[F, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxFoldOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxFoldOps[F[_],A](fa:F[A])(implicitevidence$2:cats.Foldable[F]):cats.syntax.FoldableOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedFoldable", "tail" : "(fga: F[G[A]])(arg0: Foldable[F]): NestedFoldableOps[F, G, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxNestedFoldable", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxNestedFoldable[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Foldable[F]):cats.syntax.NestedFoldableOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toUnorderedFoldableOps", "tail" : "(target: F[A])(tc: UnorderedFoldable[F]): Ops[F, A] { type TypeClassType = cats.UnorderedFoldable[F] }", "member" : "cats.UnorderedFoldable.ToUnorderedFoldableOps.toUnorderedFoldableOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toUnorderedFoldableOps[F[_],A](target:F[A])(implicittc:cats.UnorderedFoldable[F]):cats.UnorderedFoldable.Ops[F,A]{typeTypeClassType=cats.UnorderedFoldable[F]}", "kind" : "implicit def"}, {"label" : "toFoldableOps", "tail" : "(target: F[D])(tc: Foldable[F]): Ops[F, D] { type TypeClassType = cats.Foldable[F] }", "member" : "cats.Foldable.ToFoldableOps.toFoldableOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toFoldableOps[F[_],D](target:F[D])(implicittc:cats.Foldable[F]):cats.Foldable.Ops[F,D]{typeTypeClassType=cats.Foldable[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFlatMapOps", "tail" : "(fa: F[A])(arg0: FlatMap[F]): FlatMapOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxFlatMapOps[F[_],A](fa:F[A])(implicitevidence$3:cats.FlatMap[F]):cats.syntax.FlatMapOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatMapIdOps", "tail" : "(a: A): FlatMapIdOps[A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapIdOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxFlatMapIdOps[A](a:A):cats.syntax.FlatMapIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIfM", "tail" : "(fa: F[Boolean])(arg0: FlatMap[F]): IfMOps[F]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxIfM", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxIfM[F[_]](fa:F[Boolean])(implicitevidence$2:cats.FlatMap[F]):cats.syntax.IfMOps[F]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatten", "tail" : "(ffa: F[F[A]])(arg0: FlatMap[F]): FlattenOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatten", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxFlatten[F[_],A](ffa:F[F[A]])(implicitevidence$1:cats.FlatMap[F]):cats.syntax.FlattenOps[F,A]", "kind" : "implicit final def"}, {"label" : "toFlatMapOps", "tail" : "(target: F[C])(tc: FlatMap[F]): Ops[F, C] { type TypeClassType = cats.FlatMap[F] }", "member" : "cats.FlatMap.ToFlatMapOps.toFlatMapOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toFlatMapOps[F[_],C](target:F[C])(implicittc:cats.FlatMap[F]):cats.FlatMap.Ops[F,C]{typeTypeClassType=cats.FlatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxEq", "tail" : "(a: A)(arg0: Eq[A]): EqOps[A]", "member" : "cats.syntax.EqSyntax.catsSyntaxEq", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxEq[A](a:A)(implicitevidence$1:cats.Eq[A]):cats.syntax.EqOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxEitherId", "tail" : "(a: A): EitherIdOps[A]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxEitherId[A](a:A):cats.syntax.EitherIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxRight", "tail" : "(right: Right[A, B]): RightOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxRight", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxRight[A,B](right:Right[A,B]):cats.syntax.RightOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxLeft", "tail" : "(left: Left[A, B]): LeftOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxLeft", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxLeft[A,B](left:Left[A,B]):cats.syntax.LeftOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherObject", "tail" : "(either: Either.type): EitherObjectOps", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherObject", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxEitherObject(either:Either.type):cats.syntax.EitherObjectOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxEither", "tail" : "(eab: Either[A, B]): EitherOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxEither[A,B](eab:Either[A,B]):cats.syntax.EitherOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherK", "tail" : "(a: F[A]): EitherKOps[F, A]", "member" : "cats.syntax.EitherKSyntax.catsSyntaxEitherK", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxEitherK[F[_],A](a:F[A]):cats.syntax.EitherKOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantSemigroupal", "tail" : "(fa: F[A])(F: ContravariantSemigroupal[F]): Ops[F, A]", "member" : "cats.syntax.ContravariantSemigroupalSyntax.catsSyntaxContravariantSemigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxContravariantSemigroupal[F[_],A](fa:F[A])(implicitF:cats.ContravariantSemigroupal[F]):cats.ContravariantSemigroupal.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantMonoidal", "tail" : "(fa: F[A])(F: ContravariantMonoidal[F]): ContravariantMonoidalOps[F, A]", "member" : "cats.syntax.ContravariantMonoidalSyntax.catsSyntaxContravariantMonoidal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxContravariantMonoidal[F[_],A](fa:F[A])(implicitF:cats.ContravariantMonoidal[F]):cats.syntax.ContravariantMonoidalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxDistributiveOps", "tail" : "(fa: F[A])(arg0: Functor[F]): DistributiveOps[F, A]", "member" : "cats.syntax.DistributiveSyntax.catsSyntaxDistributiveOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxDistributiveOps[F[_],A](fa:F[A])(implicitevidence$1:cats.Functor[F]):cats.syntax.DistributiveOps[F,A]", "kind" : "implicit final def"}, {"label" : "toDistributiveOps", "tail" : "(target: F[A])(tc: Distributive[F]): Ops[F, A] { type TypeClassType = cats.Distributive[F] }", "member" : "cats.Distributive.ToDistributiveOps.toDistributiveOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toDistributiveOps[F[_],A](target:F[A])(implicittc:cats.Distributive[F]):cats.Distributive.Ops[F,A]{typeTypeClassType=cats.Distributive[F]}", "kind" : "implicit def"}, {"label" : "toContravariantOps", "tail" : "(target: F[A])(tc: Contravariant[F]): Ops[F, A] { type TypeClassType = cats.Contravariant[F] }", "member" : "cats.Contravariant.ToContravariantOps.toContravariantOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toContravariantOps[F[_],A](target:F[A])(implicittc:cats.Contravariant[F]):cats.Contravariant.Ops[F,A]{typeTypeClassType=cats.Contravariant[F]}", "kind" : "implicit def"}, {"label" : "toComposeOps", "tail" : "(target: F[B, D])(tc: Compose[F]): Ops[F, B, D] { type TypeClassType = cats.arrow.Compose[F] }", "member" : "cats.arrow.Compose.ToComposeOps.toComposeOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toComposeOps[F[_,_],B,D](target:F[B,D])(implicittc:cats.arrow.Compose[F]):cats.arrow.Compose.Ops[F,B,D]{typeTypeClassType=cats.arrow.Compose[F]}", "kind" : "implicit def"}, {"label" : "toComonadOps", "tail" : "(target: F[A])(tc: Comonad[F]): Ops[F, A] { type TypeClassType = cats.Comonad[F] }", "member" : "cats.Comonad.ToComonadOps.toComonadOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toComonadOps[F[_],A](target:F[A])(implicittc:cats.Comonad[F]):cats.Comonad.Ops[F,A]{typeTypeClassType=cats.Comonad[F]}", "kind" : "implicit def"}, {"label" : "toCoflatMapOps", "tail" : "(target: F[A])(tc: CoflatMap[F]): Ops[F, A] { type TypeClassType = cats.CoflatMap[F] }", "member" : "cats.CoflatMap.ToCoflatMapOps.toCoflatMapOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toCoflatMapOps[F[_],A](target:F[A])(implicittc:cats.CoflatMap[F]):cats.CoflatMap.Ops[F,A]{typeTypeClassType=cats.CoflatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxSemigroupal", "tail" : "(fa: F[A])(F: Semigroupal[F]): SemigroupalOps[F, A]", "member" : "cats.syntax.SemigroupalSyntax.catsSyntaxSemigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxSemigroupal[F[_],A](fa:F[A])(implicitF:cats.Semigroupal[F]):cats.syntax.SemigroupalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxBitraverse", "tail" : "(fab: F[A, B])(arg0: Bitraverse[F]): BitraverseOps[F, A, B]", "member" : "cats.syntax.BitraverseSyntax.catsSyntaxBitraverse", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxBitraverse[F[_,_],A,B](fab:F[A,B])(implicitevidence$1:cats.Bitraverse[F]):cats.syntax.BitraverseOps[F,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedBitraverse", "tail" : "(fgagb: F[G[A], G[B]])(arg0: Bitraverse[F]): NestedBitraverseOps[F, G, A, B]", "member" : "cats.syntax.BitraverseSyntax1.catsSyntaxNestedBitraverse", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxNestedBitraverse[F[_,_],G[_],A,B](fgagb:F[G[A],G[B]])(implicitevidence$2:cats.Bitraverse[F]):cats.syntax.NestedBitraverseOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "toBifoldableOps", "tail" : "(target: F[A, B])(tc: Bifoldable[F]): Ops[F, A, B] { type TypeClassType = cats.Bifoldable[F] }", "member" : "cats.Bifoldable.ToBifoldableOps.toBifoldableOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toBifoldableOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifoldable[F]):cats.Bifoldable.Ops[F,A,B]{typeTypeClassType=cats.Bifoldable[F]}", "kind" : "implicit def"}, {"label" : "toBifunctorOps", "tail" : "(target: F[A, B])(tc: Bifunctor[F]): Ops[F, A, B] { type TypeClassType = cats.Bifunctor[F] }", "member" : "cats.Bifunctor.ToBifunctorOps.toBifunctorOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toBifunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifunctor[F]):cats.Bifunctor.Ops[F,A,B]{typeTypeClassType=cats.Bifunctor[F]}", "kind" : "implicit def"}, {"label" : "toArrowChoiceOps", "tail" : "(target: F[A, E])(tc: ArrowChoice[F]): Ops[F, A, E] { type TypeClassType = cats.arrow.ArrowChoice[F] }", "member" : "cats.arrow.ArrowChoice.ToArrowChoiceOps.toArrowChoiceOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toArrowChoiceOps[F[_,_],A,E](target:F[A,E])(implicittc:cats.arrow.ArrowChoice[F]):cats.arrow.ArrowChoice.Ops[F,A,E]{typeTypeClassType=cats.arrow.ArrowChoice[F]}", "kind" : "implicit def"}, {"label" : "toArrowOps", "tail" : "(target: F[A, B])(tc: Arrow[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Arrow[F] }", "member" : "cats.arrow.Arrow.ToArrowOps.toArrowOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toArrowOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Arrow[F]):cats.arrow.Arrow.Ops[F,A,B]{typeTypeClassType=cats.arrow.Arrow[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxApplyOps", "tail" : "(fa: F[A]): ApplyOps[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApplyOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxApplyOps[F[_],A](fa:F[A]):cats.syntax.ApplyOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApply", "tail" : "(fa: F[A])(F: Apply[F]): Ops[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApply", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxApply[F[_],A](fa:F[A])(implicitF:cats.Apply[F]):cats.Apply.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Semigroupal", "tail" : "(t22: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20], F[A21])): Tuple22SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple22Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple22Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20],F[A21])):cats.syntax.Tuple22SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Semigroupal", "tail" : "(t21: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20])): Tuple21SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple21Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple21Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20])):cats.syntax.Tuple21SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Semigroupal", "tail" : "(t20: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19])): Tuple20SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple20Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple20Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19])):cats.syntax.Tuple20SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Semigroupal", "tail" : "(t19: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18])): Tuple19SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple19Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple19Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18])):cats.syntax.Tuple19SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Semigroupal", "tail" : "(t18: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17])): Tuple18SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple18Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple18Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17])):cats.syntax.Tuple18SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Semigroupal", "tail" : "(t17: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16])): Tuple17SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple17Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple17Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16])):cats.syntax.Tuple17SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Semigroupal", "tail" : "(t16: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15])): Tuple16SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple16Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple16Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15])):cats.syntax.Tuple16SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Semigroupal", "tail" : "(t15: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14])): Tuple15SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple15Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple15Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14])):cats.syntax.Tuple15SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Semigroupal", "tail" : "(t14: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13])): Tuple14SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple14Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple14Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13])):cats.syntax.Tuple14SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Semigroupal", "tail" : "(t13: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12])): Tuple13SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple13Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple13Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12])):cats.syntax.Tuple13SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Semigroupal", "tail" : "(t12: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11])): Tuple12SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple12Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple12Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11])):cats.syntax.Tuple12SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Semigroupal", "tail" : "(t11: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10])): Tuple11SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple11Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple11Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10])):cats.syntax.Tuple11SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Semigroupal", "tail" : "(t10: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9])): Tuple10SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple10Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple10Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9])):cats.syntax.Tuple10SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Semigroupal", "tail" : "(t9: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8])): Tuple9SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple9Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple9Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8])):cats.syntax.Tuple9SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Semigroupal", "tail" : "(t8: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7])): Tuple8SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple8Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple8Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7])):cats.syntax.Tuple8SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Semigroupal", "tail" : "(t7: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6])): Tuple7SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple7Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple7Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6](t7:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6])):cats.syntax.Tuple7SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Semigroupal", "tail" : "(t6: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5])): Tuple6SemigroupalOps[F, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple6Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple6Semigroupal[F[_],A0,A1,A2,A3,A4,A5](t6:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5])):cats.syntax.Tuple6SemigroupalOps[F,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Semigroupal", "tail" : "(t5: (F[A0], F[A1], F[A2], F[A3], F[A4])): Tuple5SemigroupalOps[F, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple5Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple5Semigroupal[F[_],A0,A1,A2,A3,A4](t5:(F[A0],F[A1],F[A2],F[A3],F[A4])):cats.syntax.Tuple5SemigroupalOps[F,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Semigroupal", "tail" : "(t4: (F[A0], F[A1], F[A2], F[A3])): Tuple4SemigroupalOps[F, A0, A1, A2, A3]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple4Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple4Semigroupal[F[_],A0,A1,A2,A3](t4:(F[A0],F[A1],F[A2],F[A3])):cats.syntax.Tuple4SemigroupalOps[F,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Semigroupal", "tail" : "(t3: (F[A0], F[A1], F[A2])): Tuple3SemigroupalOps[F, A0, A1, A2]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple3Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple3Semigroupal[F[_],A0,A1,A2](t3:(F[A0],F[A1],F[A2])):cats.syntax.Tuple3SemigroupalOps[F,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Semigroupal", "tail" : "(t2: (F[A0], F[A1])): Tuple2SemigroupalOps[F, A0, A1]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple2Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple2Semigroupal[F[_],A0,A1](t2:(F[A0],F[A1])):cats.syntax.Tuple2SemigroupalOps[F,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Semigroupal", "tail" : "(t1: (F[A0])): Tuple1SemigroupalOps[F, A0]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple1Semigroupal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxTuple1Semigroupal[F[_],A0](t1:(F[A0],)):cats.syntax.Tuple1SemigroupalOps[F,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxApplicativeError", "tail" : "(fa: F[A])(F: ApplicativeError[F, E]): ApplicativeErrorOps[F, E, A]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeError", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxApplicativeError[F[_],E,A](fa:F[A])(implicitF:cats.ApplicativeError[F,E]):cats.syntax.ApplicativeErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeErrorId", "tail" : "(e: E): ApplicativeErrorIdOps[E]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeErrorId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxApplicativeErrorId[E](e:E):cats.syntax.ApplicativeErrorIdOps[E]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicative", "tail" : "(fa: F[A]): ApplicativeOps[F, A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicative", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxApplicative[F[_],A](fa:F[A]):cats.syntax.ApplicativeOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeId", "tail" : "(a: A): ApplicativeIdOps[A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicativeId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxApplicativeId[A](a:A):cats.syntax.ApplicativeIdOps[A]", "kind" : "implicit final def"}, {"label" : "toAlignOps", "tail" : "(target: F[A])(tc: Align[F]): Ops[F, A] { type TypeClassType = cats.Align[F] }", "member" : "cats.Align.ToAlignOps.toAlignOps", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toAlignOps[F[_],A](target:F[A])(implicittc:cats.Align[F]):cats.Align.Ops[F,A]{typeTypeClassType=cats.Align[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxAlternativeGuard", "tail" : "(b: Boolean): GuardOps", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeGuard", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxAlternativeGuard(b:Boolean):cats.syntax.GuardOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxAlternativeSeparate", "tail" : "(fgab: F[G[A, B]]): SeparateOps[F, G, A, B]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeSeparate", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxAlternativeSeparate[F[_],G[_,_],A,B](fgab:F[G[A,B]]):cats.syntax.SeparateOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxUnite", "tail" : "(fga: F[G[A]]): UniteOps[F, G, A]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxUnite", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSyntaxUnite[F[_],G[_],A](fga:F[G[A]]):cats.syntax.UniteOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "catsStdNonEmptyParallelForVectorZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.VectorInstances.catsStdNonEmptyParallelForVectorZipVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdNonEmptyParallelForVectorZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "implicit def"}, {"label" : "catsStdShowForVector", "tail" : "(arg0: Show[A]): Show[Vector[A]]", "member" : "cats.instances.VectorInstances.catsStdShowForVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForVector[A](implicitevidence$1:cats.Show[A]):cats.Show[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForVector", "tail" : ": Traverse[Vector] with Monad[Vector] with Alternative[Vector] with CoflatMap[Vector] with Align[Vector]", "member" : "cats.instances.VectorInstances.catsStdInstancesForVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForVector:cats.Traverse[Vector]withcats.Monad[Vector]withcats.Alternative[Vector]withcats.CoflatMap[Vector]withcats.Align[Vector]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForVector", "tail" : "(): Monoid[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdMonoidForVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForVector[A]:cats.kernel.Monoid[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForVector", "tail" : "(arg0: Order[A]): Order[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdOrderForVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForVector[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForVector", "tail" : "(arg0: Hash[A]): Hash[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdHashForVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForVector[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForVector", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdPartialOrderForVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForVector[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForVector", "tail" : "(arg0: Eq[A]): Eq[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances2.catsKernelStdEqForVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForVector[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForUUID", "tail" : ": Show[UUID]", "member" : "cats.instances.UUIDInstances.catsStdShowForUUID", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForUUID:cats.Show[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUUID", "tail" : ": Order[UUID] with Hash[UUID] with LowerBounded[UUID] with UpperBounded[UUID]", "member" : "cats.kernel.instances.UUIDInstances.catsKernelStdOrderForUUID", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForUUID:cats.kernel.Order[java.util.UUID]withcats.kernel.Hash[java.util.UUID]withcats.kernel.LowerBounded[java.util.UUID]withcats.kernel.UpperBounded[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsStdEqForTry", "tail" : "(A: Eq[A], T: Eq[Throwable]): Eq[Try[A]]", "member" : "cats.instances.TryInstances.catsStdEqForTry", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdEqForTry[A,T](implicitA:cats.Eq[A],implicitT:cats.Eq[Throwable]):cats.Eq[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForTry", "tail" : "(A: Show[A]): Show[Try[A]]", "member" : "cats.instances.TryInstances.catsStdShowForTry", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForTry[A](implicitA:cats.Show[A]):cats.Show[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTry", "tail" : "(): MonadError[Try, Throwable] with CoflatMap[Try] with Traverse[Try] with Monad[Try]", "member" : "cats.instances.TryInstances.catsStdInstancesForTry", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForTry:cats.MonadError[scala.util.Try,Throwable]withcats.CoflatMap[scala.util.Try]withcats.Traverse[scala.util.Try]withcats.Monad[scala.util.Try]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForTry", "tail" : "(arg0: Monoid[A]): Monoid[Try[A]]", "member" : "cats.instances.TryInstances1.catsStdMonoidForTry", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdMonoidForTry[A](implicitevidence$1:cats.Monoid[A]):cats.Monoid[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForTry", "tail" : "(arg0: Semigroup[A]): Semigroup[Try[A]]", "member" : "cats.instances.TryInstances2.catsStdSemigroupForTry", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdSemigroupForTry[A](implicitevidence$2:cats.Semigroup[A]):cats.Semigroup[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsInstancesForTailRec", "tail" : "(): StackSafeMonad[TailRec] with Defer[TailRec]", "member" : "cats.instances.TailRecInstances.catsInstancesForTailRec", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsInstancesForTailRec:cats.StackSafeMonad[util.control.TailCalls.TailRec]withcats.Defer[util.control.TailCalls.TailRec]", "kind" : "implicit def"}, {"label" : "catsStdShowForSymbol", "tail" : ": Show[Symbol]", "member" : "cats.instances.SymbolInstances.catsStdShowForSymbol", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForSymbol:cats.Show[Symbol]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForSymbol", "tail" : ": Order[Symbol] with Hash[Symbol] with LowerBounded[Symbol]", "member" : "cats.kernel.instances.SymbolInstances.catsKernelStdOrderForSymbol", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForSymbol:cats.kernel.Order[Symbol]withcats.kernel.Hash[Symbol]withcats.kernel.LowerBounded[Symbol]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String] with Hash[String] with LowerBounded[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForString:cats.kernel.Order[String]withcats.kernel.Hash[String]withcats.kernel.LowerBounded[String]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForStream", "tail" : ": Traverse[Stream] with Alternative[Stream] with Monad[Stream] with CoflatMap[Stream] with Align[Stream]", "member" : "cats.instances.StreamInstances.catsStdInstancesForStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForStream:cats.Traverse[Stream]withcats.Alternative[Stream]withcats.Monad[Stream]withcats.CoflatMap[Stream]withcats.Align[Stream]", "kind" : "implicit val"}, {"label" : "catsStdParallelForStreamZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.StreamInstances.catsStdParallelForStreamZipStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdParallelForStreamZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "implicit def"}, {"label" : "catsStdShowForStream", "tail" : "(arg0: Show[A]): Show[Stream[A]]", "member" : "cats.instances.StreamInstances.catsStdShowForStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForStream[A](implicitevidence$1:cats.Show[A]):cats.Show[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForStream", "tail" : "(): Monoid[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdMonoidForStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForStream[A]:cats.kernel.Monoid[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForStream", "tail" : "(arg0: Order[A]): Order[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdOrderForStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForStream[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForStream", "tail" : "(arg0: Hash[A]): Hash[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdHashForStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForStream[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForStream", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdPartialOrderForStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForStream[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForStream", "tail" : "(arg0: Eq[A]): Eq[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances2.catsKernelStdEqForStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForStream[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedSet", "tail" : "(arg0: Show[A]): Show[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances.catsStdShowForSortedSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForSortedSet[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.SortedSet[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSortedSet", "tail" : ": Foldable[SortedSet] with SemigroupK[SortedSet]", "member" : "cats.instances.SortedSetInstances.catsStdInstancesForSortedSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForSortedSet:cats.Foldable[scala.collection.immutable.SortedSet]withcats.SemigroupK[scala.collection.immutable.SortedSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdSemilatticeForSortedSet", "tail" : "(arg0: Order[A]): BoundedSemilattice[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances1.catsKernelStdSemilatticeForSortedSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForSortedSet[A](implicitevidence$5:cats.kernel.Order[A]):cats.kernel.BoundedSemilattice[scala.collection.immutable.SortedSet[A]]", "kind" : "def"}, {"label" : "catsStdInstancesForSortedMap", "tail" : "(arg0: Order[K]): Traverse[[β$0$]SortedMap[K, β$0$]] with FlatMap[[β$1$]SortedMap[K, β$1$]] with Align[[β$2$]SortedMap[K, β$2$]]", "member" : "cats.instances.SortedMapInstances.catsStdInstancesForSortedMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForSortedMap[K](implicitevidence$7:cats.Order[K]):cats.Traverse[[β$0$]scala.collection.immutable.SortedMap[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.SortedMap[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.SortedMap[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedMap", "tail" : "(arg0: Order[A], showA: Show[A], showB: Show[B]): Show[SortedMap[A, B]]", "member" : "cats.instances.SortedMapInstances.catsStdShowForSortedMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForSortedMap[A,B](implicitevidence$6:cats.Order[A],implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[scala.collection.immutable.SortedMap[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: CommutativeSemigroup[V]): CommutativeMonoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdCommutativeMonoidForSortedMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdCommutativeMonoidForSortedMap[K,V](implicitevidence$4:cats.Order[K],implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdHashForSortedMap", "tail" : "(arg0: Hash[K], arg1: Order[K], arg2: Hash[V]): Hash[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdHashForSortedMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdHashForSortedMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.Order[K],implicitevidence$3:cats.kernel.Hash[V]):cats.kernel.Hash[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: Semigroup[V]): Monoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances2.catsStdMonoidForSortedMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdMonoidForSortedMap[K,V](implicitevidence$10:cats.Order[K],implicitevidence$11:cats.kernel.Semigroup[V]):cats.Monoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdEqForSortedMap", "tail" : "(arg0: Order[K], arg1: Eq[V]): Eq[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances1.catsStdEqForSortedMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdEqForSortedMap[K,V](implicitevidence$8:cats.Order[K],implicitevidence$9:cats.kernel.Eq[V]):cats.kernel.Eq[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdShowForSet", "tail" : "(arg0: Show[A]): Show[Set[A]]", "member" : "cats.instances.SetInstances.catsStdShowForSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForSet[A](implicitevidence$3:cats.Show[A]):cats.Show[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSet", "tail" : ": UnorderedTraverse[Set] with MonoidK[Set]", "member" : "cats.instances.SetInstances.catsStdInstancesForSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForSet:cats.UnorderedTraverse[Set]withcats.MonoidK[Set]", "kind" : "implicit val"}, {"label" : "catsKernelStdHashForSet", "tail" : "(): Hash[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdHashForSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForSet[A]:cats.kernel.Hash[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForSet", "tail" : "(): BoundedSemilattice[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdSemilatticeForSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForSet[A]:cats.kernel.BoundedSemilattice[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForSet", "tail" : "(): PartialOrder[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdPartialOrderForSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForSet[A]:cats.kernel.PartialOrder[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForQueue", "tail" : "(): TraverseFilter[Queue]", "member" : "cats.instances.QueueInstances.catsStdTraverseFilterForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdTraverseFilterForQueue:cats.TraverseFilter[scala.collection.immutable.Queue]", "kind" : "implicit def"}, {"label" : "catsStdShowForQueue", "tail" : "(arg0: Show[A]): Show[Queue[A]]", "member" : "cats.instances.QueueInstances.catsStdShowForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForQueue[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForQueue", "tail" : ": Traverse[Queue] with Alternative[Queue] with Monad[Queue] with CoflatMap[Queue]", "member" : "cats.instances.QueueInstances.catsStdInstancesForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForQueue:cats.Traverse[scala.collection.immutable.Queue]withcats.Alternative[scala.collection.immutable.Queue]withcats.Monad[scala.collection.immutable.Queue]withcats.CoflatMap[scala.collection.immutable.Queue]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForQueue", "tail" : "(): Monoid[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdMonoidForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForQueue[A]:cats.kernel.Monoid[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForQueue", "tail" : "(arg0: Order[A]): Order[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdOrderForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForQueue[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForQueue", "tail" : "(arg0: Hash[A]): Hash[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdHashForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForQueue[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForQueue", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdPartialOrderForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForQueue[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForQueue", "tail" : "(arg0: Eq[A]): Eq[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances2.catsKernelStdEqForQueue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForQueue[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForPartialOrdering", "tail" : ": ContravariantMonoidal[PartialOrdering]", "member" : "cats.instances.PartialOrderingInstances.catsContravariantMonoidalForPartialOrdering", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsContravariantMonoidalForPartialOrdering:cats.ContravariantMonoidal[PartialOrdering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForPartialOrder", "tail" : ": ContravariantMonoidal[PartialOrder]", "member" : "cats.instances.PartialOrderInstances.catsContravariantMonoidalForPartialOrder", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsContravariantMonoidalForPartialOrder:cats.ContravariantMonoidal[cats.PartialOrder]", "kind" : "implicit val"}, {"label" : "catsKernelPartialOrderingForPartialOrder", "tail" : "(ev: PartialOrder[A]): PartialOrdering[A]", "member" : "cats.kernel.PartialOrderToPartialOrderingConversion.catsKernelPartialOrderingForPartialOrder", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelPartialOrderingForPartialOrder[A](implicitev:cats.kernel.PartialOrder[A]):PartialOrdering[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherTNestedParallelValidated", "tail" : "(arg0: Semigroup[E], P: Parallel[M]): Aux[[γ$5$]EitherT[M, E, γ$5$], [γ$6$]Nested[cats.Parallel.F, [β$4$]Validated[E, β$4$], γ$6$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherTNestedParallelValidated", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsParallelForEitherTNestedParallelValidated[M[_<:<?>],E](implicitevidence$2:cats.kernel.Semigroup[E],implicitP:cats.Parallel[M]):cats.Parallel.Aux[[γ$5$]cats.data.EitherT[M,E,γ$5$],[γ$6$]cats.data.Nested[P.F,[β$4$]cats.data.Validated[E,β$4$],γ$6$]]", "kind" : "def"}, {"label" : "catsStdParallelForZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdParallelForZipLazyList[A<:<?>]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "def"}, {"label" : "catsStdParallelForZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipStream", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdParallelForZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipVector", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdNonEmptyParallelForZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdNonEmptyParallelForZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "def"}, {"label" : "catsParallelForOptionTNestedOption", "tail" : "(P: Parallel[M]): Aux[[β$2$]OptionT[M, β$2$], [γ$3$]Nested[cats.Parallel.F, Option, γ$3$]]", "member" : "cats.instances.ParallelInstances.catsParallelForOptionTNestedOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsParallelForOptionTNestedOption[M[_<:<?>]](implicitP:cats.Parallel[M]):cats.Parallel.Aux[[β$2$]cats.data.OptionT[M,β$2$],[γ$3$]cats.data.Nested[P.F,Option,γ$3$]]", "kind" : "def"}, {"label" : "catsParallelForEitherValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$0$]Either[E, β$0$], [β$1$]Validated[E, β$1$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherValidated", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsParallelForEitherValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$0$]scala.util.Either[E,β$0$],[β$1$]cats.data.Validated[E,β$1$]]", "kind" : "def"}, {"label" : "catsParallelForEitherTNestedValidated", "tail" : "(arg0: Monad[M], arg1: Semigroup[E]): Aux[[γ$1$]EitherT[M, E, γ$1$], [γ$2$]Nested[M, [β$0$]Validated[E, β$0$], γ$2$]]", "member" : "cats.instances.ParallelInstances1.catsParallelForEitherTNestedValidated", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsParallelForEitherTNestedValidated[M[_<:<?>],E](implicitevidence$1:cats.Monad[M],implicitevidence$2:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[γ$1$]cats.data.EitherT[M,E,γ$1$],[γ$2$]cats.data.Nested[M,[β$0$]cats.data.Validated[E,β$0$],γ$2$]]", "kind" : "def"}, {"label" : "catsContravariantMonoidalForOrdering", "tail" : ": ContravariantMonoidal[Ordering]", "member" : "cats.instances.OrderingInstances.catsContravariantMonoidalForOrdering", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsContravariantMonoidalForOrdering:cats.ContravariantMonoidal[Ordering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForOrder", "tail" : ": ContravariantMonoidal[Order]", "member" : "cats.instances.OrderInstances.catsContravariantMonoidalForOrder", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsContravariantMonoidalForOrder:cats.ContravariantMonoidal[cats.Order]", "kind" : "implicit val"}, {"label" : "catsKernelOrderingForOrder", "tail" : "(ev: Order[A]): Ordering[A]", "member" : "cats.kernel.OrderToOrderingConversion.catsKernelOrderingForOrder", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelOrderingForOrder[A](implicitev:cats.kernel.Order[A]):Ordering[A]", "kind" : "implicit def"}, {"label" : "catsStdShowForOption", "tail" : "(A: Show[A]): Show[Option[A]]", "member" : "cats.instances.OptionInstances.catsStdShowForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForOption[A](implicitA:cats.Show[A]):cats.Show[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForOption", "tail" : ": Traverse[Option] with MonadError[Option, Unit] with Alternative[Option] with CommutativeMonad[Option] with CoflatMap[Option] with Align[Option]", "member" : "cats.instances.OptionInstances.catsStdInstancesForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForOption:cats.Traverse[Option]withcats.MonadError[Option,Unit]withcats.Alternative[Option]withcats.CommutativeMonad[Option]withcats.CoflatMap[Option]withcats.Align[Option]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForOption", "tail" : "(arg0: Semigroup[A]): Monoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdMonoidForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForOption[A](implicitevidence$3:cats.kernel.Semigroup[A]):cats.kernel.Monoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForOption", "tail" : "(arg0: CommutativeSemigroup[A]): CommutativeMonoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdCommutativeMonoidForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForOption[A](implicitevidence$2:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeMonoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForOption", "tail" : "(arg0: Order[A]): Order[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdOrderForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForOption[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForOption", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Option[A]]", "member" : "cats.kernel.instances.OptionInstances0.catsKernelStdPartialOrderForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForOption[A](implicitevidence$4:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForOption", "tail" : "(arg0: Hash[A]): Hash[Option[A]]", "member" : "cats.kernel.instances.OptionInstances1.catsKernelStdHashForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForOption[A](implicitevidence$5:cats.kernel.Hash[A]):cats.kernel.Hash[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForOption", "tail" : "(arg0: Eq[A]): Eq[Option[A]]", "member" : "cats.kernel.instances.OptionInstances2.catsKernelStdEqForOption", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForOption[A](implicitevidence$6:cats.kernel.Eq[A]):cats.kernel.Eq[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForMap", "tail" : "(): UnorderedTraverse[[β$0$]Map[K, β$0$]] with FlatMap[[β$1$]Map[K, β$1$]] with Align[[β$2$]Map[K, β$2$]]", "member" : "cats.instances.MapInstances.catsStdInstancesForMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForMap[K]:cats.UnorderedTraverse[[β$0$]scala.collection.immutable.Map[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.Map[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.Map[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForMap", "tail" : "(showA: Show[A], showB: Show[B]): Show[Map[A, B]]", "member" : "cats.instances.MapInstances.catsStdShowForMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForMap[A,B](implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[Map[A,B]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForMap", "tail" : "(arg0: CommutativeSemigroup[V]): CommutativeMonoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdCommutativeMonoidForMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForMap[K,V](implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForMap", "tail" : "(arg0: Hash[K], arg1: Hash[V]): Hash[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdHashForMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.kernel.Hash[V]):cats.kernel.Hash[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForMap", "tail" : "(arg0: Semigroup[V]): Monoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdMonoidForMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForMap[K,V](implicitevidence$5:cats.kernel.Semigroup[V]):cats.kernel.Monoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForMap", "tail" : "(arg0: Eq[V]): Eq[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdEqForMap", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForMap[K,V](implicitevidence$4:cats.kernel.Eq[V]):cats.kernel.Eq[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsStdNonEmptyParallelForListZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ListInstances.catsStdNonEmptyParallelForListZipList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdNonEmptyParallelForListZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "implicit def"}, {"label" : "catsStdShowForList", "tail" : "(arg0: Show[A]): Show[List[A]]", "member" : "cats.instances.ListInstances.catsStdShowForList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForList[A](implicitevidence$1:cats.Show[A]):cats.Show[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForList", "tail" : ": Traverse[List] with Alternative[List] with Monad[List] with CoflatMap[List] with Align[List]", "member" : "cats.instances.ListInstances.catsStdInstancesForList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForList:cats.Traverse[List]withcats.Alternative[List]withcats.Monad[List]withcats.CoflatMap[List]withcats.Align[List]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForList", "tail" : "(): Monoid[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdMonoidForList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForList[A]:cats.kernel.Monoid[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForList", "tail" : "(arg0: Order[A]): Order[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdOrderForList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForList", "tail" : "(arg0: Hash[A]): Hash[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdHashForList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdPartialOrderForList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForList", "tail" : "(arg0: Eq[A]): Eq[List[A]]", "member" : "cats.kernel.instances.ListInstances2.catsKernelStdEqForList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdParallelForLazyListZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.LazyListInstances.catsStdParallelForLazyListZipLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdParallelForLazyListZipLazyList[A]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForLazyList", "tail" : ": TraverseFilter[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdTraverseFilterForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdTraverseFilterForLazyList:cats.TraverseFilter[LazyList]", "kind" : "implicit val"}, {"label" : "catsStdShowForLazyList", "tail" : "(arg0: Show[A]): Show[LazyList[A]]", "member" : "cats.instances.LazyListInstances.catsStdShowForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForLazyList[A](implicitevidence$1:cats.Show[A]):cats.Show[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForLazyList", "tail" : ": Traverse[LazyList] with Alternative[LazyList] with Monad[LazyList] with CoflatMap[LazyList] with Align[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdInstancesForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForLazyList:cats.Traverse[LazyList]withcats.Alternative[LazyList]withcats.Monad[LazyList]withcats.CoflatMap[LazyList]withcats.Align[LazyList]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForLazyList", "tail" : "(): Monoid[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdMonoidForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForLazyList[A]:cats.kernel.Monoid[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForLazyList", "tail" : "(arg0: Order[A]): Order[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdOrderForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForLazyList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForLazyList", "tail" : "(arg0: Hash[A]): Hash[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdHashForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForLazyList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForLazyList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdPartialOrderForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForLazyList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForLazyList", "tail" : "(arg0: Eq[A]): Eq[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances2.catsKernelStdEqForLazyList", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForLazyList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsInvariantMonoidalCommutativeSemigroup", "tail" : ": InvariantMonoidal[CommutativeSemigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalCommutativeSemigroup", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsInvariantMonoidalCommutativeSemigroup:cats.InvariantMonoidal[cats.kernel.CommutativeSemigroup]", "kind" : "implicit val"}, {"label" : "catsInvariantMonoidalSemigroup", "tail" : ": InvariantMonoidal[Semigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalSemigroup", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsInvariantMonoidalSemigroup:cats.InvariantMonoidal[cats.kernel.Semigroup]", "kind" : "implicit val"}, {"label" : "catsSemigroupalForMonoid", "tail" : "(): InvariantSemigroupal[Monoid]", "member" : "cats.instances.InvariantMonoidalInstances.catsSemigroupalForMonoid", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsSemigroupalForMonoid:cats.InvariantSemigroupal[cats.Monoid]", "kind" : "implicit def"}, {"label" : "catsContravariantForHash", "tail" : ": Contravariant[Hash]", "member" : "cats.instances.HashInstances.catsContravariantForHash", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsContravariantForHash:cats.Contravariant[cats.Hash]", "kind" : "implicit val"}, {"label" : "catsKernelHashToHashing", "tail" : "(ev: Hash[A]): Hashing[A]", "member" : "cats.kernel.HashToHashingConversion.catsKernelHashToHashing", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelHashToHashing[A](implicitev:cats.kernel.Hash[A]):scala.util.hashing.Hashing[A]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForFuture", "tail" : "(ec: ExecutionContext): MonadError[Future, Throwable] with CoflatMap[Future] with Monad[Future]", "member" : "cats.instances.FutureInstances.catsStdInstancesForFuture", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForFuture(implicitec:scala.concurrent.ExecutionContext):cats.MonadError[scala.concurrent.Future,Throwable]withcats.CoflatMap[scala.concurrent.Future]withcats.Monad[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForFuture", "tail" : "(arg0: Monoid[A], ec: ExecutionContext): Monoid[Future[A]]", "member" : "cats.instances.FutureInstances1.catsStdMonoidForFuture", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdMonoidForFuture[A](implicitevidence$1:cats.Monoid[A],implicitec:scala.concurrent.ExecutionContext):cats.Monoid[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForFuture", "tail" : "(arg0: Semigroup[A], ec: ExecutionContext): Semigroup[Future[A]]", "member" : "cats.instances.FutureInstances2.catsStdSemigroupForFuture", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdSemigroupForFuture[A](implicitevidence$2:cats.Semigroup[A],implicitec:scala.concurrent.ExecutionContext):cats.Semigroup[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdMonoidKForFunction1", "tail" : ": MonoidK[Endo]", "member" : "cats.instances.Function1Instances.catsStdMonoidKForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdMonoidKForFunction1:cats.MonoidK[cats.Endo]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForFunction1", "tail" : ": ArrowChoice[Function1] with CommutativeArrow[Function1]", "member" : "cats.instances.Function1Instances.catsStdInstancesForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForFunction1:cats.arrow.ArrowChoice[Function1]withcats.arrow.CommutativeArrow[Function1]", "kind" : "implicit val"}, {"label" : "catsStdMonadForFunction1", "tail" : "(): Monad[[β$8$](T1) => β$8$]", "member" : "cats.instances.Function1Instances.catsStdMonadForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdMonadForFunction1[T1]:cats.Monad[[β$8$]T1=>β$8$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantMonoidalForFunction1", "tail" : "(arg0: Monoid[R]): ContravariantMonoidal[[α$6$](α$6$) => R]", "member" : "cats.instances.Function1Instances.catsStdContravariantMonoidalForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdContravariantMonoidalForFunction1[R](implicitevidence$2:cats.Monoid[R]):cats.ContravariantMonoidal[[α$6$]α$6$=>R]", "kind" : "implicit def"}, {"label" : "catsStdDistributiveForFunction1", "tail" : "(): Distributive[[β$12$](T1) => β$12$]", "member" : "cats.instances.Function1Instances0.catsStdDistributiveForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdDistributiveForFunction1[T1]:cats.Distributive[[β$12$]T1=>β$12$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantForFunction1", "tail" : "(): Contravariant[[α$10$](α$10$) => R]", "member" : "cats.instances.Function1Instances0.catsStdContravariantForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdContravariantForFunction1[R]:cats.Contravariant[[α$10$]α$10$=>R]", "kind" : "implicit def"}, {"label" : "catsStdBimonadForFunction0", "tail" : ": Bimonad[Function0]", "member" : "cats.instances.Function0Instances.catsStdBimonadForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdBimonadForFunction0:cats.Bimonad[Function0]", "kind" : "implicit val"}, {"label" : "function0Distributive", "tail" : "(): Distributive[Function0]", "member" : "cats.instances.Function0Instances0.function0Distributive", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#function0Distributive:cats.Distributive[Function0]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction1", "tail" : "(G: CommutativeGroup[B]): CommutativeGroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelCommutativeGroupForFunction1[A,B](implicitG:cats.kernel.CommutativeGroup[B]):cats.kernel.CommutativeGroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction0", "tail" : "(G: CommutativeGroup[A]): CommutativeGroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelCommutativeGroupForFunction0[A](implicitG:cats.kernel.CommutativeGroup[A]):cats.kernel.CommutativeGroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelOrderForFunction0", "tail" : "(ev: Order[A]): Order[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelOrderForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelOrderForFunction0[A](implicitev:cats.kernel.Order[A]):cats.kernel.Order[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction1", "tail" : "(G: BoundedSemilattice[B]): BoundedSemilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelBoundedSemilatticeForFunction1[A,B](implicitG:cats.kernel.BoundedSemilattice[B]):cats.kernel.BoundedSemilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction0", "tail" : "(G: BoundedSemilattice[A]): BoundedSemilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelBoundedSemilatticeForFunction0[A](implicitG:cats.kernel.BoundedSemilattice[A]):cats.kernel.BoundedSemilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction1", "tail" : "(G: Group[B]): Group[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelGroupForFunction1[A,B](implicitG:cats.kernel.Group[B]):cats.kernel.Group[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction0", "tail" : "(G: Group[A]): Group[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelGroupForFunction0[A](implicitG:cats.kernel.Group[A]):cats.kernel.Group[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelPartialOrderForFunction0", "tail" : "(ev: PartialOrder[A]): PartialOrder[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelPartialOrderForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelPartialOrderForFunction0[A](implicitev:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelHashForFunction0", "tail" : "(ev: Hash[A]): Hash[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelHashForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelHashForFunction0[A](implicitev:cats.kernel.Hash[A]):cats.kernel.Hash[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction1", "tail" : "(M: Semilattice[B]): Semilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelSemilatticeForFunction1[A,B](implicitM:cats.kernel.Semilattice[B]):cats.kernel.Semilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction0", "tail" : "(M: Semilattice[A]): Semilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelSemilatticeForFunction0[A](implicitM:cats.kernel.Semilattice[A]):cats.kernel.Semilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction1", "tail" : "(M: CommutativeMonoid[B]): CommutativeMonoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelCommutativeMonoidForFunction1[A,B](implicitM:cats.kernel.CommutativeMonoid[B]):cats.kernel.CommutativeMonoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction0", "tail" : "(M: CommutativeMonoid[A]): CommutativeMonoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelCommutativeMonoidForFunction0[A](implicitM:cats.kernel.CommutativeMonoid[A]):cats.kernel.CommutativeMonoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelEqForFunction0", "tail" : "(ev: Eq[A]): Eq[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelEqForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelEqForFunction0[A](implicitev:cats.kernel.Eq[A]):cats.kernel.Eq[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction1", "tail" : "(S: Band[B]): Band[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelBandForFunction1[A,B](implicitS:cats.kernel.Band[B]):cats.kernel.Band[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction0", "tail" : "(S: Band[A]): Band[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelBandForFunction0[A](implicitS:cats.kernel.Band[A]):cats.kernel.Band[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction1", "tail" : "(M: Monoid[B]): Monoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelMonoidForFunction1[A,B](implicitM:cats.kernel.Monoid[B]):cats.kernel.Monoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction0", "tail" : "(M: Monoid[A]): Monoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelMonoidForFunction0[A](implicitM:cats.kernel.Monoid[A]):cats.kernel.Monoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction1", "tail" : "(S: CommutativeSemigroup[B]): CommutativeSemigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelCommutativeSemigroupForFunction1[A,B](implicitS:cats.kernel.CommutativeSemigroup[B]):cats.kernel.CommutativeSemigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction0", "tail" : "(S: CommutativeSemigroup[A]): CommutativeSemigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelCommutativeSemigroupForFunction0[A](implicitS:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeSemigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction1", "tail" : "(S: Semigroup[B]): Semigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelSemigroupForFunction1[A,B](implicitS:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction0", "tail" : "(S: Semigroup[A]): Semigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction0", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelSemigroupForFunction0[A](implicitS:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForEquiv", "tail" : ": ContravariantMonoidal[Equiv]", "member" : "cats.instances.EquivInstances.catsContravariantMonoidalForEquiv", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsContravariantMonoidalForEquiv:cats.ContravariantMonoidal[Equiv]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForEq", "tail" : ": ContravariantMonoidal[Eq]", "member" : "cats.instances.EqInstances.catsContravariantMonoidalForEq", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsContravariantMonoidalForEq:cats.ContravariantMonoidal[cats.Eq]", "kind" : "implicit val"}, {"label" : "catsKernelEquivForEq", "tail" : "(ev: Eq[A]): Equiv[A]", "member" : "cats.kernel.EqToEquivConversion.catsKernelEquivForEq", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelEquivForEq[A](implicitev:cats.kernel.Eq[A]):scala.math.Equiv[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherAndValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$9$]Either[E, β$9$], [β$10$]Validated[E, β$10$]]", "member" : "cats.instances.EitherInstances.catsParallelForEitherAndValidated", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsParallelForEitherAndValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$9$]scala.util.Either[E,β$9$],[β$10$]cats.data.Validated[E,β$10$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForEither", "tail" : "(A: Show[A], B: Show[B]): Show[Either[A, B]]", "member" : "cats.instances.EitherInstances.catsStdShowForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForEither[A,B](implicitA:cats.Show[A],implicitB:cats.Show[B]):cats.Show[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupKForEither", "tail" : "(): SemigroupK[[β$7$]Either[L, β$7$]]", "member" : "cats.instances.EitherInstances.catsStdSemigroupKForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdSemigroupKForEither[L]:cats.SemigroupK[[β$7$]scala.util.Either[L,β$7$]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForEither", "tail" : "(): MonadError[[β$0$]Either[A, β$0$], A] with Traverse[[β$1$]Either[A, β$1$]] with Align[[β$2$]Either[A, β$2$]]", "member" : "cats.instances.EitherInstances.catsStdInstancesForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForEither[A]:cats.MonadError[[β$0$]scala.util.Either[A,β$0$],A]withcats.Traverse[[β$1$]scala.util.Either[A,β$1$]]withcats.Align[[β$2$]scala.util.Either[A,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForEither", "tail" : ": Bitraverse[Either]", "member" : "cats.instances.EitherInstances.catsStdBitraverseForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdBitraverseForEither:cats.Bitraverse[Either]", "kind" : "implicit val"}, {"label" : "catsDataMonoidForEither", "tail" : "(B: Monoid[B]): Monoid[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsDataMonoidForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsDataMonoidForEither[A,B](implicitB:cats.kernel.Monoid[B]):cats.kernel.Monoid[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdOrderForEither", "tail" : "(A: Order[A], B: Order[B]): Order[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsStdOrderForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdOrderForEither[A,B](implicitA:cats.kernel.Order[A],implicitB:cats.kernel.Order[B]):cats.kernel.Order[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdHashForEither", "tail" : "(A: Hash[A], B: Hash[B]): Hash[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdHashForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdHashForEither[A,B](implicitA:cats.kernel.Hash[A],implicitB:cats.kernel.Hash[B]):cats.kernel.Hash[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdPartialOrderForEither", "tail" : "(A: PartialOrder[A], B: PartialOrder[B]): PartialOrder[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdPartialOrderForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdPartialOrderForEither[A,B](implicitA:cats.kernel.PartialOrder[A],implicitB:cats.kernel.PartialOrder[B]):cats.kernel.PartialOrder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsDataSemigroupForEither", "tail" : "(B: Semigroup[B]): Semigroup[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsDataSemigroupForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsDataSemigroupForEither[A,B](implicitB:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdEqForEither", "tail" : "(A: Eq[A], B: Eq[B]): Eq[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances1.catsStdEqForEither", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdEqForEither[A,B](implicitA:cats.kernel.Eq[A],implicitB:cats.kernel.Eq[B]):cats.kernel.Eq[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdShowForBitSet", "tail" : "(): Show[BitSet]", "member" : "cats.instances.BitSetInstances.catsStdShowForBitSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForBitSet:cats.Show[scala.collection.immutable.BitSet]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForBitSet", "tail" : ": BoundedSemilattice[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdSemilatticeForBitSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForBitSet:cats.kernel.BoundedSemilattice[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBitSet", "tail" : ": PartialOrder[BitSet] with Hash[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdOrderForBitSet", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForBitSet:cats.kernel.PartialOrder[scala.collection.immutable.BitSet]withcats.kernel.Hash[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigDecimal", "tail" : ": Show[BigDecimal]", "member" : "cats.instances.BigDecimalInstances.catsStdShowForBigDecimal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForBigDecimal:cats.Show[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigDecimal", "tail" : ": CommutativeGroup[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdGroupForBigDecimal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForBigDecimal:cats.kernel.CommutativeGroup[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigDecimal", "tail" : ": Order[BigDecimal] with Hash[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdOrderForBigDecimal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForBigDecimal:cats.kernel.Order[BigDecimal]withcats.kernel.Hash[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigInt", "tail" : ": Show[BigInt]", "member" : "cats.instances.BigIntInstances.catsStdShowForBigInt", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForBigInt:cats.Show[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigInt", "tail" : ": CommutativeGroup[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdGroupForBigInt", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForBigInt:cats.kernel.CommutativeGroup[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigInt", "tail" : ": Order[BigInt] with Hash[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdOrderForBigInt", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForBigInt:cats.kernel.Order[BigInt]withcats.kernel.Hash[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple22", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20], A21: BoundedSemilattice[A21]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20],implicitA21:cats.kernel.BoundedSemilattice[A21]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple22", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20], A21: Order[A21]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20],implicitA21:cats.kernel.Order[A21]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple22", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20], A21: CommutativeGroup[A21]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20],implicitA21:cats.kernel.CommutativeGroup[A21]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple21", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple21", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple21", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple20", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple20", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple20", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple19", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple19", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple19", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple18", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple18", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple18", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple17", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple17", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple17", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple16", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple16", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple16", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple15", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple15", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple15", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple14", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple14", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple14", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple13", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple13", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple13", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple12", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple12", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple12", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple11", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple11", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple11", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple10", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple10", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple10", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple9", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple9", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple9", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple8", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple8", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7]): Order[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple8", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple7", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple7", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6]): Order[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple7", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple6", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple6", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5]): Order[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple6", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5]): CommutativeGroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple5", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4]): BoundedSemilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple5", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4]): Order[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4]):cats.kernel.Order[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple5", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4]): CommutativeGroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple4", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3]): BoundedSemilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple4", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3]): Order[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3]):cats.kernel.Order[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple4", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3]): CommutativeGroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple3", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2]): BoundedSemilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2]):cats.kernel.BoundedSemilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple3", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2]): Order[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2]):cats.kernel.Order[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple3", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2]): CommutativeGroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2]):cats.kernel.CommutativeGroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple2", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1]): BoundedSemilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1]):cats.kernel.BoundedSemilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple2", "tail" : "(A0: Order[A0], A1: Order[A1]): Order[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple2[A0,A1](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1]):cats.kernel.Order[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple2", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1]): CommutativeGroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1]):cats.kernel.CommutativeGroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple1", "tail" : "(A0: BoundedSemilattice[A0]): BoundedSemilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBoundedSemilatticeForTuple1[A0](implicitA0:cats.kernel.BoundedSemilattice[A0]):cats.kernel.BoundedSemilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple1", "tail" : "(A0: Order[A0]): Order[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForTuple1[A0](implicitA0:cats.kernel.Order[A0]):cats.kernel.Order[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple1", "tail" : "(A0: CommutativeGroup[A0]): CommutativeGroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeGroupForTuple1[A0](implicitA0:cats.kernel.CommutativeGroup[A0]):cats.kernel.CommutativeGroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple22", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20], A21: PartialOrder[A21]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20],implicitA21:cats.kernel.PartialOrder[A21]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple22", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20], A21: Hash[A21]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20],implicitA21:cats.kernel.Hash[A21]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple22", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20], A21: Group[A21]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20],implicitA21:cats.kernel.Group[A21]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple22", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20], A21: CommutativeMonoid[A21]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20],implicitA21:cats.kernel.CommutativeMonoid[A21]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple22", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20], A21: Semilattice[A21]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20],implicitA21:cats.kernel.Semilattice[A21]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple21", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple21", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple21", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple21", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple21", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple20", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple20", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple20", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple20", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple20", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple19", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple19", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple19", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple19", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple19", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple18", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple18", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple18", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple18", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple18", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple17", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple17", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple17", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple17", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple17", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple16", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple16", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple16", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple16", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple16", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple15", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple15", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple15", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple15", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple15", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple14", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple14", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple14", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple14", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple14", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple13", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple13", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple13", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple13", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple13", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple12", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple12", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple12", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple12", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple12", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple11", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple11", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple11", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple11", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple11", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple10", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple10", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple10", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple10", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple10", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple9", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple9", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple9", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple9", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple9", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple8", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple8", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple8", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7]): Group[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple8", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple8", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple7", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple7", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6]): Hash[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple7", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6]): Group[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple7", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple7", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6]): Semilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple6", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5]): PartialOrder[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple6", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5]): Hash[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple6", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5]): Group[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple6", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple6", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5]): Semilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple5", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4]): PartialOrder[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple5", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4]): Hash[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4]):cats.kernel.Hash[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple5", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4]): Group[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4]):cats.kernel.Group[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple5", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4]): CommutativeMonoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple5", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4]): Semilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple4", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3]): PartialOrder[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3]):cats.kernel.PartialOrder[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple4", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3]): Hash[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3]):cats.kernel.Hash[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple4", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3]): Group[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3]):cats.kernel.Group[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple4", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3]): CommutativeMonoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple4", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3]): Semilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3]):cats.kernel.Semilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple3", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2]): PartialOrder[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2]):cats.kernel.PartialOrder[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple3", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2]): Hash[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple3[A0,A1,A2](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2]):cats.kernel.Hash[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple3", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2]): Group[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2]):cats.kernel.Group[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple3", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2]): CommutativeMonoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2]):cats.kernel.CommutativeMonoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple3", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2]): Semilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2]):cats.kernel.Semilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple2", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1]): PartialOrder[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple2[A0,A1](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1]):cats.kernel.PartialOrder[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple2", "tail" : "(A0: Hash[A0], A1: Hash[A1]): Hash[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple2[A0,A1](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1]):cats.kernel.Hash[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple2", "tail" : "(A0: Group[A0], A1: Group[A1]): Group[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple2[A0,A1](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1]):cats.kernel.Group[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple2", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1]): CommutativeMonoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1]):cats.kernel.CommutativeMonoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple2", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1]): Semilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1]):cats.kernel.Semilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple1", "tail" : "(A0: PartialOrder[A0]): PartialOrder[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdPartialOrderForTuple1[A0](implicitA0:cats.kernel.PartialOrder[A0]):cats.kernel.PartialOrder[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple1", "tail" : "(A0: Hash[A0]): Hash[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdHashForTuple1[A0](implicitA0:cats.kernel.Hash[A0]):cats.kernel.Hash[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple1", "tail" : "(A0: Group[A0]): Group[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForTuple1[A0](implicitA0:cats.kernel.Group[A0]):cats.kernel.Group[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple1", "tail" : "(A0: CommutativeMonoid[A0]): CommutativeMonoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeMonoidForTuple1[A0](implicitA0:cats.kernel.CommutativeMonoid[A0]):cats.kernel.CommutativeMonoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple1", "tail" : "(A0: Semilattice[A0]): Semilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemilatticeForTuple1[A0](implicitA0:cats.kernel.Semilattice[A0]):cats.kernel.Semilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple22", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20], A21: Monoid[A21]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20],implicitA21:cats.kernel.Monoid[A21]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple22", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20], A21: CommutativeSemigroup[A21]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20],implicitA21:cats.kernel.CommutativeSemigroup[A21]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple22", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20], A21: Band[A21]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20],implicitA21:cats.kernel.Band[A21]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple21", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple21", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple21", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple20", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple20", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple20", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple19", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple19", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple19", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple18", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple18", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple18", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple17", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple17", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple17", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple16", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple16", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple16", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple15", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple15", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple15", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple14", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple14", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple14", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple13", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple13", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple13", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple12", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple12", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple12", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple11", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple11", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple11", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple10", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple10", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple10", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple9", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple9", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple9", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple8", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple8", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple8", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7]): Band[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple7", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6]): Monoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple7", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple7", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6]): Band[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple6", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5]): Monoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple6", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple6", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5]): Band[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple5", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4]): Monoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4]):cats.kernel.Monoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple5", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4]): CommutativeSemigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple5", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4]): Band[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4]):cats.kernel.Band[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple4", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3]): Monoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3]):cats.kernel.Monoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple4", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3]): CommutativeSemigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple4", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3]): Band[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3]):cats.kernel.Band[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple3", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2]): Monoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2]):cats.kernel.Monoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple3", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2]): CommutativeSemigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2]):cats.kernel.CommutativeSemigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple3", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2]): Band[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple3[A0,A1,A2](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2]):cats.kernel.Band[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple2", "tail" : "(A0: Monoid[A0], A1: Monoid[A1]): Monoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple2[A0,A1](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1]):cats.kernel.Monoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple2", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1]): CommutativeSemigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1]):cats.kernel.CommutativeSemigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple2", "tail" : "(A0: Band[A0], A1: Band[A1]): Band[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple2[A0,A1](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1]):cats.kernel.Band[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple1", "tail" : "(A0: Monoid[A0]): Monoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdMonoidForTuple1[A0](implicitA0:cats.kernel.Monoid[A0]):cats.kernel.Monoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple1", "tail" : "(A0: CommutativeSemigroup[A0]): CommutativeSemigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdCommutativeSemigroupForTuple1[A0](implicitA0:cats.kernel.CommutativeSemigroup[A0]):cats.kernel.CommutativeSemigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple1", "tail" : "(A0: Band[A0]): Band[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdBandForTuple1[A0](implicitA0:cats.kernel.Band[A0]):cats.kernel.Band[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple22", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20], A21: Eq[A21]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20],implicitA21:cats.kernel.Eq[A21]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple22", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20], A21: Semigroup[A21]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple22", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20],implicitA21:cats.kernel.Semigroup[A21]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple21", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple21", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple21", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple20", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple20", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple20", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple19", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple19", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple19", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple18", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple18", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple18", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple17", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple17", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple17", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple16", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple16", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple16", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple15", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple15", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple15", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple14", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple14", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple14", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple13", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple13", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple13", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple12", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple12", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple12", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple11", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple11", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple11", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple10", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple10", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple10", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple9", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple9", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple9", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple8", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple8", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple8", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple7", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6]): Eq[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple7", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6]): Semigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple7", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple6", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5]): Eq[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple6", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5]): Semigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple6", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple5", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4]): Eq[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4]):cats.kernel.Eq[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple5", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4]): Semigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple5", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple4", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3]): Eq[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3]):cats.kernel.Eq[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple4", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3]): Semigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple4", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3]):cats.kernel.Semigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple3", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2]): Eq[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple3[A0,A1,A2](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2]):cats.kernel.Eq[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple3", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2]): Semigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple3", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2]):cats.kernel.Semigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple2", "tail" : "(A0: Eq[A0], A1: Eq[A1]): Eq[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple2[A0,A1](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1]):cats.kernel.Eq[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple2", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1]): Semigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1]):cats.kernel.Semigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple1", "tail" : "(A0: Eq[A0]): Eq[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdEqForTuple1[A0](implicitA0:cats.kernel.Eq[A0]):cats.kernel.Eq[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple1", "tail" : "(A0: Semigroup[A0]): Semigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple1", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdSemigroupForTuple1[A0](implicitA0:cats.kernel.Semigroup[A0]):cats.kernel.Semigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTuple2", "tail" : "(): Traverse[[β$0$](X, β$0$)] with Comonad[[β$1$](X, β$1$)] with Reducible[[β$2$](X, β$2$)]", "member" : "cats.instances.Tuple2Instances.catsStdInstancesForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdInstancesForTuple2[X]:cats.Traverse[[β$0$](X,β$0$)]withcats.Comonad[[β$1$](X,β$1$)]withcats.Reducible[[β$2$](X,β$2$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForTuple2", "tail" : "(aShow: Show[A], bShow: Show[B]): Show[(A, B)]", "member" : "cats.instances.Tuple2Instances.catsStdShowForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForTuple2[A,B](implicitaShow:cats.Show[A],implicitbShow:cats.Show[B]):cats.Show[(A,B)]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForTuple2", "tail" : ": Bitraverse[Tuple2]", "member" : "cats.instances.Tuple2Instances.catsStdBitraverseForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdBitraverseForTuple2:cats.Bitraverse[Tuple2]", "kind" : "implicit val"}, {"label" : "catsStdCommutativeMonadForTuple2", "tail" : "(MX: CommutativeMonoid[X]): CommutativeMonad[[β$6$](X, β$6$)]", "member" : "cats.instances.Tuple2Instances1.catsStdCommutativeMonadForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdCommutativeMonadForTuple2[X](implicitMX:cats.kernel.CommutativeMonoid[X]):cats.CommutativeMonad[[β$6$](X,β$6$)]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeFlatMapForTuple2", "tail" : "(MX: CommutativeSemigroup[X]): CommutativeFlatMap[[β$8$](X, β$8$)]", "member" : "cats.instances.Tuple2Instances2.catsStdCommutativeFlatMapForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdCommutativeFlatMapForTuple2[X](implicitMX:cats.kernel.CommutativeSemigroup[X]):cats.CommutativeFlatMap[[β$8$](X,β$8$)]", "kind" : "implicit def"}, {"label" : "catsStdMonadForTuple2", "tail" : "(MX: Monoid[X]): Monad[[β$10$](X, β$10$)]", "member" : "cats.instances.Tuple2Instances3.catsStdMonadForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdMonadForTuple2[X](implicitMX:cats.Monoid[X]):cats.Monad[[β$10$](X,β$10$)]", "kind" : "implicit def"}, {"label" : "catsStdFlatMapForTuple2", "tail" : "(SX: Semigroup[X]): FlatMap[[β$12$](X, β$12$)]", "member" : "cats.instances.Tuple2Instances4.catsStdFlatMapForTuple2", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdFlatMapForTuple2[X](implicitSX:cats.Semigroup[X]):cats.FlatMap[[β$12$](X,β$12$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForUnit", "tail" : ": Show[Unit]", "member" : "cats.instances.UnitInstances.catsStdShowForUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForUnit:cats.Show[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdAlgebraForUnit", "tail" : ": BoundedSemilattice[Unit] with CommutativeGroup[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdAlgebraForUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdAlgebraForUnit:cats.kernel.BoundedSemilattice[Unit]withcats.kernel.CommutativeGroup[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUnit", "tail" : ": Order[Unit] with Hash[Unit] with LowerBounded[Unit] with UpperBounded[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdOrderForUnit", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForUnit:cats.kernel.Order[Unit]withcats.kernel.Hash[Unit]withcats.kernel.LowerBounded[Unit]withcats.kernel.UpperBounded[Unit]", "kind" : "implicit val"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean] with Hash[Boolean] with LowerBounded[Boolean] with UpperBounded[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]withcats.kernel.Hash[Boolean]withcats.kernel.LowerBounded[Boolean]withcats.kernel.UpperBounded[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double] with Hash[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]withcats.kernel.Hash[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float] with Hash[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]withcats.kernel.Hash[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForShort", "tail" : ": Show[Short]", "member" : "cats.instances.ShortInstances.catsStdShowForShort", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForShort:cats.Show[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForShort", "tail" : ": CommutativeGroup[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdGroupForShort", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForShort:cats.kernel.CommutativeGroup[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForShort", "tail" : ": Order[Short] with Hash[Short] with LowerBounded[Short] with UpperBounded[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdOrderForShort", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForShort:cats.kernel.Order[Short]withcats.kernel.Hash[Short]withcats.kernel.LowerBounded[Short]withcats.kernel.UpperBounded[Short]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long] with Hash[Long] with LowerBounded[Long] with UpperBounded[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]withcats.kernel.Hash[Long]withcats.kernel.LowerBounded[Long]withcats.kernel.UpperBounded[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForByte", "tail" : ": Show[Byte]", "member" : "cats.instances.ByteInstances.catsStdShowForByte", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForByte:cats.Show[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForByte", "tail" : ": CommutativeGroup[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdGroupForByte", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForByte:cats.kernel.CommutativeGroup[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForByte", "tail" : ": Order[Byte] with Hash[Byte] with LowerBounded[Byte] with UpperBounded[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdOrderForByte", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForByte:cats.kernel.Order[Byte]withcats.kernel.Hash[Byte]withcats.kernel.LowerBounded[Byte]withcats.kernel.UpperBounded[Byte]", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int] with Hash[Int] with LowerBounded[Int] with UpperBounded[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]withcats.kernel.Hash[Int]withcats.kernel.LowerBounded[Int]withcats.kernel.UpperBounded[Int]", "kind" : "implicit val"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "checkAll", "tail" : "(name: String, ruleSet: RuleSet)(config: PropertyCheckConfiguration, prettifier: Prettifier, pos: Position): Unit", "member" : "org.typelevel.discipline.scalatest.FunSuiteDiscipline.checkAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#checkAll(name:String,ruleSet:org.typelevel.discipline.Laws#RuleSet)(implicitconfig:FunSuiteDiscipline.this.PropertyCheckConfiguration,implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "convertConfiguration", "tail" : "(config: PropertyCheckConfiguration): org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "member" : "org.typelevel.discipline.scalatest.Discipline.convertConfiguration", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertConfiguration(config:Discipline.this.PropertyCheckConfiguration):org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "kind" : "final def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), genAndNameF: (Gen[F], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),genAndNameF:(org.scalacheck.Gen[F],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], genF: Gen[F], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],genF:org.scalacheck.Gen[F],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, nameF: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,nameF:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,E,ASSERTION](fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,D,ASSERTION](fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,ASSERTION](nameA:String,nameB:String,nameC:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,C,ASSERTION](fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,ASSERTION](nameA:String,nameB:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,B,ASSERTION](fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,ASSERTION](genA:org.scalacheck.Gen[A],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,ASSERTION](nameA:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll[A,ASSERTION](fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(configParams: PropertyCheckConfigParam*): ConfiguredPropertyCheck", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#forAll(configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*):ScalaCheckDrivenPropertyChecks.this.ConfiguredPropertyCheck", "kind" : "def"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "whenever", "tail" : "(condition: Boolean)(fun: => T)(wa: WheneverAsserting[T]): Result", "member" : "org.scalatest.prop.Whenever.whenever", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#whenever[T](condition:Boolean)(fun:=>T)(implicitwa:org.scalatest.enablers.WheneverAsserting[T]):wa.Result", "kind" : "def"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.of", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToRegexWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToStringShouldWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.the", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#between[K,V,JMAP[k,v]<:java.util.Map[k,v]](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#between[E,C[_]](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#every[K,V,JMAP[k,v]<:java.util.Map[k,v]](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#every[K,V,MAP[k,v]<:scala.collection.Map[k,v]](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#every[E,C[_]](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.should.Matchers.message", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: => Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.should.Matchers.thrownBy", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneElementOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atMostOneElementOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderElementsOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#inOrderElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrder", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allElementsOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#allElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderOnly", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.only", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsInOrderAs", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#theSameElementsInOrderAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsAs", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#theSameElementsAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noElementsOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#noElementsOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noneOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneElementOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atLeastOneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneElementOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#oneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.should.Matchers.definedAt", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>=", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<=", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.should.Matchers.regex", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.should.Matchers.theSameInstanceAs", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.should.Matchers.value", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.should.Matchers.key", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.should.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.funsuite.AnyFunSuite.toString", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testDataFor", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.styleName", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testsFor", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.run", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTests", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.tags", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTest", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testNames", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.ignore", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.test", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerIgnoredTest", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerTest", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.markup", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.alert", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.note", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.info", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createDateTime", "tail" : "(seconds: Int, minutes: Int, hours: Int, dayOfMonth: Int, month: Int, year: Int): DateTime", "member" : "cron4s.testkit.DateTimeTestKitBase.createDateTime", "link" : "cron4s\/testkit\/DateTimeCronTestKit.html#createDateTime(seconds:Int,minutes:Int,hours:Int,dayOfMonth:Int,month:Int,year:Int):DateTime", "kind" : "abstract def"}], "class" : "cron4s\/testkit\/DateTimeCronTestKit.html", "kind" : "class"}, {"name" : "cron4s.testkit.DateTimeNodeTestKit", "shortDescription" : "Created by alonsodomin on 04\/08\/2016.", "members_class" : [{"label" : "ConfiguredPropertyCheck", "tail" : "", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.ConfiguredPropertyCheck", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ConfiguredPropertyCheckextendsAnyRef", "kind" : "class"}, {"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.StringShouldWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnyShouldWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForCollectedString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfCollectedAny", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedArray", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedAny", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfContainWordForCollectedAny", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfNotWordForCollectedAny", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.Collected", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForExtent", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.TheSameInstanceAsPhrase", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ValueWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.KeyWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForAny", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.HavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "every", "tail" : "", "member" : "cron4s.testkit.DateTimeNodeTestKit.every", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#every", "kind" : "object"}, {"label" : "several", "tail" : "", "member" : "cron4s.testkit.DateTimeNodeTestKit.several", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#several", "kind" : "object"}, {"label" : "between", "tail" : "", "member" : "cron4s.testkit.DateTimeNodeTestKit.between", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#between", "kind" : "object"}, {"label" : "const", "tail" : "", "member" : "cron4s.testkit.DateTimeNodeTestKit.const", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#const", "kind" : "object"}, {"label" : "each", "tail" : "", "member" : "cron4s.testkit.DateTimeNodeTestKit.each", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#each", "kind" : "object"}, {"label" : "NodeCheck", "tail" : "", "member" : "cron4s.testkit.DateTimeNodeTestKit.NodeCheck", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#NodeCheckextendsAnyRef", "kind" : "trait"}, {"member" : "cron4s.testkit.DateTimeNodeTestKit#<init>", "error" : "unsupported entity"}, {"label" : "arbitraryDateTime", "tail" : ": Arbitrary[DateTime]", "member" : "cron4s.testkit.DateTimeTestKitBase.arbitraryDateTime", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#arbitraryDateTime:org.scalacheck.Arbitrary[DateTime]", "kind" : "implicit final lazy val"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.Cron4sLawSuite.generatorDrivenConfig", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#generatorDrivenConfig:Cron4sLawSuite.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "catsSyntaxParallelFoldMapA", "tail" : "(ta: T[A]): ParallelFoldMapAOps[T, A]", "member" : "cats.syntax.ParallelFoldMapASyntax.catsSyntaxParallelFoldMapA", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxParallelFoldMapA[T[_],A](ta:T[A]):cats.syntax.ParallelFoldMapAOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxWriterId", "tail" : "(a: A): WriterIdSyntax[A]", "member" : "cats.syntax.WriterSyntax.catsSyntaxWriterId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxWriterId[A](a:A):cats.syntax.WriterIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxVectors", "tail" : "(va: Vector[A]): VectorOps[A]", "member" : "cats.syntax.VectorSyntax.catsSyntaxVectors", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxVectors[A](va:Vector[A]):cats.syntax.VectorOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxValidatedId", "tail" : "(a: A): ValidatedIdSyntax[A]", "member" : "cats.syntax.ValidatedSyntax.catsSyntaxValidatedId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxValidatedId[A](a:A):cats.syntax.ValidatedIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "toNonEmptyTraverseOps", "tail" : "(target: F[C])(tc: NonEmptyTraverse[F]): Ops[F, C] { type TypeClassType = cats.NonEmptyTraverse[F] }", "member" : "cats.NonEmptyTraverse.ToNonEmptyTraverseOps.toNonEmptyTraverseOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toNonEmptyTraverseOps[F[_],C](target:F[C])(implicittc:cats.NonEmptyTraverse[F]):cats.NonEmptyTraverse.Ops[F,C]{typeTypeClassType=cats.NonEmptyTraverse[F]}", "kind" : "implicit def"}, {"label" : "toTraverseOps", "tail" : "(target: F[C])(tc: Traverse[F]): Ops[F, C] { type TypeClassType = cats.Traverse[F] }", "member" : "cats.Traverse.ToTraverseOps.toTraverseOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toTraverseOps[F[_],C](target:F[C])(implicittc:cats.Traverse[F]):cats.Traverse.Ops[F,C]{typeTypeClassType=cats.Traverse[F]}", "kind" : "implicit def"}, {"label" : "toStrongOps", "tail" : "(target: F[A, B])(tc: Strong[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Strong[F] }", "member" : "cats.arrow.Strong.ToStrongOps.toStrongOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toStrongOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Strong[F]):cats.arrow.Strong.Ops[F,A,B]{typeTypeClassType=cats.arrow.Strong[F]}", "kind" : "implicit def"}, {"label" : "showInterpolator", "tail" : "(sc: StringContext): ShowInterpolator", "member" : "cats.syntax.ShowSyntax.showInterpolator", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#showInterpolator(sc:StringContext):cats.Show.ShowInterpolator", "kind" : "implicit final def"}, {"label" : "toShow", "tail" : "(target: A)(tc: Show[A]): Ops[A]", "member" : "cats.Show.ToShowOps.toShow", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toShow[A](target:A)(implicittc:cats.Show[A]):cats.Show.Ops[A]", "kind" : "implicit def"}, {"label" : "toSemigroupKOps", "tail" : "(target: F[A])(tc: SemigroupK[F]): Ops[F, A] { type TypeClassType = cats.SemigroupK[F] }", "member" : "cats.SemigroupK.ToSemigroupKOps.toSemigroupKOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toSemigroupKOps[F[_],A](target:F[A])(implicittc:cats.SemigroupK[F]):cats.SemigroupK.Ops[F,A]{typeTypeClassType=cats.SemigroupK[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxNestedReducible", "tail" : "(fga: F[G[A]])(arg0: Reducible[F]): NestedReducibleOps[F, G, A]", "member" : "cats.syntax.ReducibleSyntax.catsSyntaxNestedReducible", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxNestedReducible[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Reducible[F]):cats.syntax.NestedReducibleOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toReducibleOps", "tail" : "(target: F[D])(tc: Reducible[F]): Ops[F, D] { type TypeClassType = cats.Reducible[F] }", "member" : "cats.Reducible.ToReducibleOps.toReducibleOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toReducibleOps[F[_],D](target:F[D])(implicittc:cats.Reducible[F]):cats.Reducible.Ops[F,D]{typeTypeClassType=cats.Reducible[F]}", "kind" : "implicit def"}, {"label" : "toProfunctorOps", "tail" : "(target: F[A, B])(tc: Profunctor[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Profunctor[F] }", "member" : "cats.arrow.Profunctor.ToProfunctorOps.toProfunctorOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toProfunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Profunctor[F]):cats.arrow.Profunctor.Ops[F,A,B]{typeTypeClassType=cats.arrow.Profunctor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxParallelAp", "tail" : "(ma: M[A])(arg0: FlatMap[M]): ParallelApOps[M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelAp", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxParallelAp[M[_],A](ma:M[A])(implicitevidence$4:cats.FlatMap[M]):cats.syntax.ParallelApOps[M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelSequence", "tail" : "(tma: T[M[A]])(arg0: Traverse[T], arg1: Monad[M]): ParallelSequenceOps[T, M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelSequence", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxParallelSequence[T[_],M[_],A](tma:T[M[A]])(implicitevidence$2:cats.Traverse[T],implicitevidence$3:cats.Monad[M]):cats.syntax.ParallelSequenceOps[T,M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelTraverse", "tail" : "(ta: T[A])(arg0: Traverse[T]): ParallelTraversableOps[T, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelTraverse", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxParallelTraverse[T[_],A](ta:T[A])(implicitevidence$1:cats.Traverse[T]):cats.syntax.ParallelTraversableOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Parallel", "tail" : "(t22: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20], M[A21])): Tuple22ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple22Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple22Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20],M[A21])):cats.syntax.Tuple22ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Parallel", "tail" : "(t21: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20])): Tuple21ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple21Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple21Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20])):cats.syntax.Tuple21ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Parallel", "tail" : "(t20: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19])): Tuple20ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple20Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple20Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19])):cats.syntax.Tuple20ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Parallel", "tail" : "(t19: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18])): Tuple19ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple19Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple19Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18])):cats.syntax.Tuple19ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Parallel", "tail" : "(t18: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17])): Tuple18ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple18Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple18Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17])):cats.syntax.Tuple18ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Parallel", "tail" : "(t17: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16])): Tuple17ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple17Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple17Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16])):cats.syntax.Tuple17ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Parallel", "tail" : "(t16: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15])): Tuple16ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple16Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple16Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15])):cats.syntax.Tuple16ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Parallel", "tail" : "(t15: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14])): Tuple15ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple15Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple15Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14])):cats.syntax.Tuple15ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Parallel", "tail" : "(t14: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13])): Tuple14ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple14Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple14Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13])):cats.syntax.Tuple14ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Parallel", "tail" : "(t13: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12])): Tuple13ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple13Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple13Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12])):cats.syntax.Tuple13ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Parallel", "tail" : "(t12: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11])): Tuple12ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple12Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple12Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11])):cats.syntax.Tuple12ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Parallel", "tail" : "(t11: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10])): Tuple11ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple11Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple11Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10])):cats.syntax.Tuple11ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Parallel", "tail" : "(t10: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9])): Tuple10ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple10Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple10Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9])):cats.syntax.Tuple10ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Parallel", "tail" : "(t9: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8])): Tuple9ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple9Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple9Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8])):cats.syntax.Tuple9ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Parallel", "tail" : "(t8: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7])): Tuple8ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple8Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple8Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7])):cats.syntax.Tuple8ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Parallel", "tail" : "(t7: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6])): Tuple7ParallelOps[M, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple7Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple7Parallel[M[_],A0,A1,A2,A3,A4,A5,A6](t7:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6])):cats.syntax.Tuple7ParallelOps[M,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Parallel", "tail" : "(t6: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5])): Tuple6ParallelOps[M, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple6Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple6Parallel[M[_],A0,A1,A2,A3,A4,A5](t6:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5])):cats.syntax.Tuple6ParallelOps[M,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Parallel", "tail" : "(t5: (M[A0], M[A1], M[A2], M[A3], M[A4])): Tuple5ParallelOps[M, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple5Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple5Parallel[M[_],A0,A1,A2,A3,A4](t5:(M[A0],M[A1],M[A2],M[A3],M[A4])):cats.syntax.Tuple5ParallelOps[M,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Parallel", "tail" : "(t4: (M[A0], M[A1], M[A2], M[A3])): Tuple4ParallelOps[M, A0, A1, A2, A3]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple4Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple4Parallel[M[_],A0,A1,A2,A3](t4:(M[A0],M[A1],M[A2],M[A3])):cats.syntax.Tuple4ParallelOps[M,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Parallel", "tail" : "(t3: (M[A0], M[A1], M[A2])): Tuple3ParallelOps[M, A0, A1, A2]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple3Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple3Parallel[M[_],A0,A1,A2](t3:(M[A0],M[A1],M[A2])):cats.syntax.Tuple3ParallelOps[M,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Parallel", "tail" : "(t2: (M[A0], M[A1])): Tuple2ParallelOps[M, A0, A1]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple2Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple2Parallel[M[_],A0,A1](t2:(M[A0],M[A1])):cats.syntax.Tuple2ParallelOps[M,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Parallel", "tail" : "(t1: (M[A0])): Tuple1ParallelOps[M, A0]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple1Parallel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple1Parallel[M[_],A0](t1:(M[A0],)):cats.syntax.Tuple1ParallelOps[M,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxOrder", "tail" : "(a: A)(arg0: Order[A]): OrderOps[A]", "member" : "cats.syntax.OrderSyntax.catsSyntaxOrder", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxOrder[A](a:A)(implicitevidence$1:cats.Order[A]):cats.syntax.OrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxPartialOrder", "tail" : "(a: A)(arg0: PartialOrder[A]): PartialOrderOps[A]", "member" : "cats.syntax.PartialOrderSyntax.catsSyntaxPartialOrder", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxPartialOrder[A](a:A)(implicitevidence$1:cats.PartialOrder[A]):cats.syntax.PartialOrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOption", "tail" : "(oa: Option[A]): OptionOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxOption[A](oa:Option[A]):cats.syntax.OptionOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOptionId", "tail" : "(a: A): OptionIdOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOptionId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxOptionId[A](a:A):cats.syntax.OptionIdOps[A]", "kind" : "implicit final def"}, {"label" : "none", "tail" : "(): Option[A]", "member" : "cats.syntax.OptionSyntax.none", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#none[A]:Option[A]", "kind" : "final def"}, {"label" : "catsSyntaxMonoid", "tail" : "(a: A)(arg0: Monoid[A]): MonoidOps[A]", "member" : "cats.syntax.MonoidSyntax.catsSyntaxMonoid", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxMonoid[A](a:A)(implicitevidence$1:cats.Monoid[A]):cats.syntax.MonoidOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadIdOps", "tail" : "(a: A): MonadIdOps[A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonadIdOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxMonadIdOps[A](a:A):cats.syntax.MonadIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonad", "tail" : "(fa: F[A]): MonadOps[F, A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonad", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxMonad[F[_],A](fa:F[A]):cats.syntax.MonadOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadErrorRethrow", "tail" : "(fea: F[Either[E, A]])(F: MonadError[F, _ >: E]): MonadErrorRethrowOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadErrorRethrow", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxMonadErrorRethrow[F[_],E,A](fea:F[Either[E,A]])(implicitF:cats.MonadError[F,_>:E]):cats.syntax.MonadErrorRethrowOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadError", "tail" : "(fa: F[A])(F: MonadError[F, E]): MonadErrorOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadError", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxMonadError[F[_],E,A](fa:F[A])(implicitF:cats.MonadError[F,E]):cats.syntax.MonadErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxList", "tail" : "(la: List[A]): ListOps[A]", "member" : "cats.syntax.ListSyntax.catsSyntaxList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxList[A](la:List[A]):cats.syntax.ListOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIorId", "tail" : "(a: A): IorIdOps[A]", "member" : "cats.syntax.IorSyntax.catsSyntaxIorId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxIorId[A](a:A):cats.syntax.IorIdOps[A]", "kind" : "implicit final def"}, {"label" : "toInvariantOps", "tail" : "(target: F[A])(tc: Invariant[F]): Ops[F, A] { type TypeClassType = cats.Invariant[F] }", "member" : "cats.Invariant.ToInvariantOps.toInvariantOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toInvariantOps[F[_],A](target:F[A])(implicittc:cats.Invariant[F]):cats.Invariant.Ops[F,A]{typeTypeClassType=cats.Invariant[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxHash", "tail" : "(a: A)(arg0: Hash[A]): HashOps[A]", "member" : "cats.syntax.HashSyntax.catsSyntaxHash", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxHash[A](a:A)(implicitevidence$1:cats.Hash[A]):cats.syntax.HashOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxGroup", "tail" : "(a: A)(arg0: Group[A]): GroupOps[A]", "member" : "cats.syntax.GroupSyntax.catsSyntaxGroup", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxGroup[A](a:A)(implicitevidence$1:cats.Group[A]):cats.syntax.GroupOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxSemigroup", "tail" : "(a: A)(arg0: Semigroup[A]): SemigroupOps[A]", "member" : "cats.syntax.SemigroupSyntax.catsSyntaxSemigroup", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxSemigroup[A](a:A)(implicitevidence$1:cats.Semigroup[A]):cats.syntax.SemigroupOps[A]", "kind" : "implicit final def"}, {"label" : "toFunctorOps", "tail" : "(target: F[A])(tc: Functor[F]): Ops[F, A] { type TypeClassType = cats.Functor[F] }", "member" : "cats.Functor.ToFunctorOps.toFunctorOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toFunctorOps[F[_],A](target:F[A])(implicittc:cats.Functor[F]):cats.Functor.Ops[F,A]{typeTypeClassType=cats.Functor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFoldOps", "tail" : "(fa: F[A])(arg0: Foldable[F]): FoldableOps[F, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxFoldOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxFoldOps[F[_],A](fa:F[A])(implicitevidence$2:cats.Foldable[F]):cats.syntax.FoldableOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedFoldable", "tail" : "(fga: F[G[A]])(arg0: Foldable[F]): NestedFoldableOps[F, G, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxNestedFoldable", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxNestedFoldable[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Foldable[F]):cats.syntax.NestedFoldableOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toUnorderedFoldableOps", "tail" : "(target: F[A])(tc: UnorderedFoldable[F]): Ops[F, A] { type TypeClassType = cats.UnorderedFoldable[F] }", "member" : "cats.UnorderedFoldable.ToUnorderedFoldableOps.toUnorderedFoldableOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toUnorderedFoldableOps[F[_],A](target:F[A])(implicittc:cats.UnorderedFoldable[F]):cats.UnorderedFoldable.Ops[F,A]{typeTypeClassType=cats.UnorderedFoldable[F]}", "kind" : "implicit def"}, {"label" : "toFoldableOps", "tail" : "(target: F[D])(tc: Foldable[F]): Ops[F, D] { type TypeClassType = cats.Foldable[F] }", "member" : "cats.Foldable.ToFoldableOps.toFoldableOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toFoldableOps[F[_],D](target:F[D])(implicittc:cats.Foldable[F]):cats.Foldable.Ops[F,D]{typeTypeClassType=cats.Foldable[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFlatMapOps", "tail" : "(fa: F[A])(arg0: FlatMap[F]): FlatMapOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxFlatMapOps[F[_],A](fa:F[A])(implicitevidence$3:cats.FlatMap[F]):cats.syntax.FlatMapOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatMapIdOps", "tail" : "(a: A): FlatMapIdOps[A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapIdOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxFlatMapIdOps[A](a:A):cats.syntax.FlatMapIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIfM", "tail" : "(fa: F[Boolean])(arg0: FlatMap[F]): IfMOps[F]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxIfM", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxIfM[F[_]](fa:F[Boolean])(implicitevidence$2:cats.FlatMap[F]):cats.syntax.IfMOps[F]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatten", "tail" : "(ffa: F[F[A]])(arg0: FlatMap[F]): FlattenOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatten", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxFlatten[F[_],A](ffa:F[F[A]])(implicitevidence$1:cats.FlatMap[F]):cats.syntax.FlattenOps[F,A]", "kind" : "implicit final def"}, {"label" : "toFlatMapOps", "tail" : "(target: F[C])(tc: FlatMap[F]): Ops[F, C] { type TypeClassType = cats.FlatMap[F] }", "member" : "cats.FlatMap.ToFlatMapOps.toFlatMapOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toFlatMapOps[F[_],C](target:F[C])(implicittc:cats.FlatMap[F]):cats.FlatMap.Ops[F,C]{typeTypeClassType=cats.FlatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxEq", "tail" : "(a: A)(arg0: Eq[A]): EqOps[A]", "member" : "cats.syntax.EqSyntax.catsSyntaxEq", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxEq[A](a:A)(implicitevidence$1:cats.Eq[A]):cats.syntax.EqOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxEitherId", "tail" : "(a: A): EitherIdOps[A]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxEitherId[A](a:A):cats.syntax.EitherIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxRight", "tail" : "(right: Right[A, B]): RightOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxRight", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxRight[A,B](right:Right[A,B]):cats.syntax.RightOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxLeft", "tail" : "(left: Left[A, B]): LeftOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxLeft", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxLeft[A,B](left:Left[A,B]):cats.syntax.LeftOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherObject", "tail" : "(either: Either.type): EitherObjectOps", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherObject", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxEitherObject(either:Either.type):cats.syntax.EitherObjectOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxEither", "tail" : "(eab: Either[A, B]): EitherOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxEither[A,B](eab:Either[A,B]):cats.syntax.EitherOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherK", "tail" : "(a: F[A]): EitherKOps[F, A]", "member" : "cats.syntax.EitherKSyntax.catsSyntaxEitherK", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxEitherK[F[_],A](a:F[A]):cats.syntax.EitherKOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantSemigroupal", "tail" : "(fa: F[A])(F: ContravariantSemigroupal[F]): Ops[F, A]", "member" : "cats.syntax.ContravariantSemigroupalSyntax.catsSyntaxContravariantSemigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxContravariantSemigroupal[F[_],A](fa:F[A])(implicitF:cats.ContravariantSemigroupal[F]):cats.ContravariantSemigroupal.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantMonoidal", "tail" : "(fa: F[A])(F: ContravariantMonoidal[F]): ContravariantMonoidalOps[F, A]", "member" : "cats.syntax.ContravariantMonoidalSyntax.catsSyntaxContravariantMonoidal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxContravariantMonoidal[F[_],A](fa:F[A])(implicitF:cats.ContravariantMonoidal[F]):cats.syntax.ContravariantMonoidalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxDistributiveOps", "tail" : "(fa: F[A])(arg0: Functor[F]): DistributiveOps[F, A]", "member" : "cats.syntax.DistributiveSyntax.catsSyntaxDistributiveOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxDistributiveOps[F[_],A](fa:F[A])(implicitevidence$1:cats.Functor[F]):cats.syntax.DistributiveOps[F,A]", "kind" : "implicit final def"}, {"label" : "toDistributiveOps", "tail" : "(target: F[A])(tc: Distributive[F]): Ops[F, A] { type TypeClassType = cats.Distributive[F] }", "member" : "cats.Distributive.ToDistributiveOps.toDistributiveOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toDistributiveOps[F[_],A](target:F[A])(implicittc:cats.Distributive[F]):cats.Distributive.Ops[F,A]{typeTypeClassType=cats.Distributive[F]}", "kind" : "implicit def"}, {"label" : "toContravariantOps", "tail" : "(target: F[A])(tc: Contravariant[F]): Ops[F, A] { type TypeClassType = cats.Contravariant[F] }", "member" : "cats.Contravariant.ToContravariantOps.toContravariantOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toContravariantOps[F[_],A](target:F[A])(implicittc:cats.Contravariant[F]):cats.Contravariant.Ops[F,A]{typeTypeClassType=cats.Contravariant[F]}", "kind" : "implicit def"}, {"label" : "toComposeOps", "tail" : "(target: F[B, D])(tc: Compose[F]): Ops[F, B, D] { type TypeClassType = cats.arrow.Compose[F] }", "member" : "cats.arrow.Compose.ToComposeOps.toComposeOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toComposeOps[F[_,_],B,D](target:F[B,D])(implicittc:cats.arrow.Compose[F]):cats.arrow.Compose.Ops[F,B,D]{typeTypeClassType=cats.arrow.Compose[F]}", "kind" : "implicit def"}, {"label" : "toComonadOps", "tail" : "(target: F[A])(tc: Comonad[F]): Ops[F, A] { type TypeClassType = cats.Comonad[F] }", "member" : "cats.Comonad.ToComonadOps.toComonadOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toComonadOps[F[_],A](target:F[A])(implicittc:cats.Comonad[F]):cats.Comonad.Ops[F,A]{typeTypeClassType=cats.Comonad[F]}", "kind" : "implicit def"}, {"label" : "toCoflatMapOps", "tail" : "(target: F[A])(tc: CoflatMap[F]): Ops[F, A] { type TypeClassType = cats.CoflatMap[F] }", "member" : "cats.CoflatMap.ToCoflatMapOps.toCoflatMapOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toCoflatMapOps[F[_],A](target:F[A])(implicittc:cats.CoflatMap[F]):cats.CoflatMap.Ops[F,A]{typeTypeClassType=cats.CoflatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxSemigroupal", "tail" : "(fa: F[A])(F: Semigroupal[F]): SemigroupalOps[F, A]", "member" : "cats.syntax.SemigroupalSyntax.catsSyntaxSemigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxSemigroupal[F[_],A](fa:F[A])(implicitF:cats.Semigroupal[F]):cats.syntax.SemigroupalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxBitraverse", "tail" : "(fab: F[A, B])(arg0: Bitraverse[F]): BitraverseOps[F, A, B]", "member" : "cats.syntax.BitraverseSyntax.catsSyntaxBitraverse", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxBitraverse[F[_,_],A,B](fab:F[A,B])(implicitevidence$1:cats.Bitraverse[F]):cats.syntax.BitraverseOps[F,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedBitraverse", "tail" : "(fgagb: F[G[A], G[B]])(arg0: Bitraverse[F]): NestedBitraverseOps[F, G, A, B]", "member" : "cats.syntax.BitraverseSyntax1.catsSyntaxNestedBitraverse", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxNestedBitraverse[F[_,_],G[_],A,B](fgagb:F[G[A],G[B]])(implicitevidence$2:cats.Bitraverse[F]):cats.syntax.NestedBitraverseOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "toBifoldableOps", "tail" : "(target: F[A, B])(tc: Bifoldable[F]): Ops[F, A, B] { type TypeClassType = cats.Bifoldable[F] }", "member" : "cats.Bifoldable.ToBifoldableOps.toBifoldableOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toBifoldableOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifoldable[F]):cats.Bifoldable.Ops[F,A,B]{typeTypeClassType=cats.Bifoldable[F]}", "kind" : "implicit def"}, {"label" : "toBifunctorOps", "tail" : "(target: F[A, B])(tc: Bifunctor[F]): Ops[F, A, B] { type TypeClassType = cats.Bifunctor[F] }", "member" : "cats.Bifunctor.ToBifunctorOps.toBifunctorOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toBifunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifunctor[F]):cats.Bifunctor.Ops[F,A,B]{typeTypeClassType=cats.Bifunctor[F]}", "kind" : "implicit def"}, {"label" : "toArrowChoiceOps", "tail" : "(target: F[A, E])(tc: ArrowChoice[F]): Ops[F, A, E] { type TypeClassType = cats.arrow.ArrowChoice[F] }", "member" : "cats.arrow.ArrowChoice.ToArrowChoiceOps.toArrowChoiceOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toArrowChoiceOps[F[_,_],A,E](target:F[A,E])(implicittc:cats.arrow.ArrowChoice[F]):cats.arrow.ArrowChoice.Ops[F,A,E]{typeTypeClassType=cats.arrow.ArrowChoice[F]}", "kind" : "implicit def"}, {"label" : "toArrowOps", "tail" : "(target: F[A, B])(tc: Arrow[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Arrow[F] }", "member" : "cats.arrow.Arrow.ToArrowOps.toArrowOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toArrowOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Arrow[F]):cats.arrow.Arrow.Ops[F,A,B]{typeTypeClassType=cats.arrow.Arrow[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxApplyOps", "tail" : "(fa: F[A]): ApplyOps[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApplyOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxApplyOps[F[_],A](fa:F[A]):cats.syntax.ApplyOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApply", "tail" : "(fa: F[A])(F: Apply[F]): Ops[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApply", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxApply[F[_],A](fa:F[A])(implicitF:cats.Apply[F]):cats.Apply.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Semigroupal", "tail" : "(t22: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20], F[A21])): Tuple22SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple22Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple22Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20],F[A21])):cats.syntax.Tuple22SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Semigroupal", "tail" : "(t21: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20])): Tuple21SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple21Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple21Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20])):cats.syntax.Tuple21SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Semigroupal", "tail" : "(t20: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19])): Tuple20SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple20Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple20Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19])):cats.syntax.Tuple20SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Semigroupal", "tail" : "(t19: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18])): Tuple19SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple19Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple19Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18])):cats.syntax.Tuple19SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Semigroupal", "tail" : "(t18: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17])): Tuple18SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple18Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple18Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17])):cats.syntax.Tuple18SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Semigroupal", "tail" : "(t17: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16])): Tuple17SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple17Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple17Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16])):cats.syntax.Tuple17SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Semigroupal", "tail" : "(t16: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15])): Tuple16SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple16Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple16Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15])):cats.syntax.Tuple16SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Semigroupal", "tail" : "(t15: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14])): Tuple15SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple15Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple15Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14])):cats.syntax.Tuple15SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Semigroupal", "tail" : "(t14: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13])): Tuple14SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple14Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple14Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13])):cats.syntax.Tuple14SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Semigroupal", "tail" : "(t13: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12])): Tuple13SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple13Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple13Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12])):cats.syntax.Tuple13SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Semigroupal", "tail" : "(t12: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11])): Tuple12SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple12Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple12Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11])):cats.syntax.Tuple12SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Semigroupal", "tail" : "(t11: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10])): Tuple11SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple11Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple11Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10])):cats.syntax.Tuple11SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Semigroupal", "tail" : "(t10: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9])): Tuple10SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple10Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple10Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9])):cats.syntax.Tuple10SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Semigroupal", "tail" : "(t9: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8])): Tuple9SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple9Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple9Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8])):cats.syntax.Tuple9SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Semigroupal", "tail" : "(t8: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7])): Tuple8SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple8Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple8Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7])):cats.syntax.Tuple8SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Semigroupal", "tail" : "(t7: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6])): Tuple7SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple7Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple7Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6](t7:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6])):cats.syntax.Tuple7SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Semigroupal", "tail" : "(t6: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5])): Tuple6SemigroupalOps[F, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple6Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple6Semigroupal[F[_],A0,A1,A2,A3,A4,A5](t6:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5])):cats.syntax.Tuple6SemigroupalOps[F,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Semigroupal", "tail" : "(t5: (F[A0], F[A1], F[A2], F[A3], F[A4])): Tuple5SemigroupalOps[F, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple5Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple5Semigroupal[F[_],A0,A1,A2,A3,A4](t5:(F[A0],F[A1],F[A2],F[A3],F[A4])):cats.syntax.Tuple5SemigroupalOps[F,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Semigroupal", "tail" : "(t4: (F[A0], F[A1], F[A2], F[A3])): Tuple4SemigroupalOps[F, A0, A1, A2, A3]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple4Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple4Semigroupal[F[_],A0,A1,A2,A3](t4:(F[A0],F[A1],F[A2],F[A3])):cats.syntax.Tuple4SemigroupalOps[F,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Semigroupal", "tail" : "(t3: (F[A0], F[A1], F[A2])): Tuple3SemigroupalOps[F, A0, A1, A2]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple3Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple3Semigroupal[F[_],A0,A1,A2](t3:(F[A0],F[A1],F[A2])):cats.syntax.Tuple3SemigroupalOps[F,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Semigroupal", "tail" : "(t2: (F[A0], F[A1])): Tuple2SemigroupalOps[F, A0, A1]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple2Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple2Semigroupal[F[_],A0,A1](t2:(F[A0],F[A1])):cats.syntax.Tuple2SemigroupalOps[F,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Semigroupal", "tail" : "(t1: (F[A0])): Tuple1SemigroupalOps[F, A0]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple1Semigroupal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxTuple1Semigroupal[F[_],A0](t1:(F[A0],)):cats.syntax.Tuple1SemigroupalOps[F,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxApplicativeError", "tail" : "(fa: F[A])(F: ApplicativeError[F, E]): ApplicativeErrorOps[F, E, A]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeError", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxApplicativeError[F[_],E,A](fa:F[A])(implicitF:cats.ApplicativeError[F,E]):cats.syntax.ApplicativeErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeErrorId", "tail" : "(e: E): ApplicativeErrorIdOps[E]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeErrorId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxApplicativeErrorId[E](e:E):cats.syntax.ApplicativeErrorIdOps[E]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicative", "tail" : "(fa: F[A]): ApplicativeOps[F, A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicative", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxApplicative[F[_],A](fa:F[A]):cats.syntax.ApplicativeOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeId", "tail" : "(a: A): ApplicativeIdOps[A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicativeId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxApplicativeId[A](a:A):cats.syntax.ApplicativeIdOps[A]", "kind" : "implicit final def"}, {"label" : "toAlignOps", "tail" : "(target: F[A])(tc: Align[F]): Ops[F, A] { type TypeClassType = cats.Align[F] }", "member" : "cats.Align.ToAlignOps.toAlignOps", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toAlignOps[F[_],A](target:F[A])(implicittc:cats.Align[F]):cats.Align.Ops[F,A]{typeTypeClassType=cats.Align[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxAlternativeGuard", "tail" : "(b: Boolean): GuardOps", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeGuard", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxAlternativeGuard(b:Boolean):cats.syntax.GuardOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxAlternativeSeparate", "tail" : "(fgab: F[G[A, B]]): SeparateOps[F, G, A, B]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeSeparate", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxAlternativeSeparate[F[_],G[_,_],A,B](fgab:F[G[A,B]]):cats.syntax.SeparateOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxUnite", "tail" : "(fga: F[G[A]]): UniteOps[F, G, A]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxUnite", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSyntaxUnite[F[_],G[_],A](fga:F[G[A]]):cats.syntax.UniteOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "catsStdNonEmptyParallelForVectorZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.VectorInstances.catsStdNonEmptyParallelForVectorZipVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdNonEmptyParallelForVectorZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "implicit def"}, {"label" : "catsStdShowForVector", "tail" : "(arg0: Show[A]): Show[Vector[A]]", "member" : "cats.instances.VectorInstances.catsStdShowForVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForVector[A](implicitevidence$1:cats.Show[A]):cats.Show[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForVector", "tail" : ": Traverse[Vector] with Monad[Vector] with Alternative[Vector] with CoflatMap[Vector] with Align[Vector]", "member" : "cats.instances.VectorInstances.catsStdInstancesForVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForVector:cats.Traverse[Vector]withcats.Monad[Vector]withcats.Alternative[Vector]withcats.CoflatMap[Vector]withcats.Align[Vector]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForVector", "tail" : "(): Monoid[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdMonoidForVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForVector[A]:cats.kernel.Monoid[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForVector", "tail" : "(arg0: Order[A]): Order[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdOrderForVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForVector[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForVector", "tail" : "(arg0: Hash[A]): Hash[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdHashForVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForVector[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForVector", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdPartialOrderForVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForVector[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForVector", "tail" : "(arg0: Eq[A]): Eq[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances2.catsKernelStdEqForVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForVector[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForUUID", "tail" : ": Show[UUID]", "member" : "cats.instances.UUIDInstances.catsStdShowForUUID", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForUUID:cats.Show[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUUID", "tail" : ": Order[UUID] with Hash[UUID] with LowerBounded[UUID] with UpperBounded[UUID]", "member" : "cats.kernel.instances.UUIDInstances.catsKernelStdOrderForUUID", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForUUID:cats.kernel.Order[java.util.UUID]withcats.kernel.Hash[java.util.UUID]withcats.kernel.LowerBounded[java.util.UUID]withcats.kernel.UpperBounded[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsStdEqForTry", "tail" : "(A: Eq[A], T: Eq[Throwable]): Eq[Try[A]]", "member" : "cats.instances.TryInstances.catsStdEqForTry", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdEqForTry[A,T](implicitA:cats.Eq[A],implicitT:cats.Eq[Throwable]):cats.Eq[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForTry", "tail" : "(A: Show[A]): Show[Try[A]]", "member" : "cats.instances.TryInstances.catsStdShowForTry", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForTry[A](implicitA:cats.Show[A]):cats.Show[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTry", "tail" : "(): MonadError[Try, Throwable] with CoflatMap[Try] with Traverse[Try] with Monad[Try]", "member" : "cats.instances.TryInstances.catsStdInstancesForTry", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForTry:cats.MonadError[scala.util.Try,Throwable]withcats.CoflatMap[scala.util.Try]withcats.Traverse[scala.util.Try]withcats.Monad[scala.util.Try]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForTry", "tail" : "(arg0: Monoid[A]): Monoid[Try[A]]", "member" : "cats.instances.TryInstances1.catsStdMonoidForTry", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdMonoidForTry[A](implicitevidence$1:cats.Monoid[A]):cats.Monoid[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForTry", "tail" : "(arg0: Semigroup[A]): Semigroup[Try[A]]", "member" : "cats.instances.TryInstances2.catsStdSemigroupForTry", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdSemigroupForTry[A](implicitevidence$2:cats.Semigroup[A]):cats.Semigroup[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsInstancesForTailRec", "tail" : "(): StackSafeMonad[TailRec] with Defer[TailRec]", "member" : "cats.instances.TailRecInstances.catsInstancesForTailRec", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsInstancesForTailRec:cats.StackSafeMonad[util.control.TailCalls.TailRec]withcats.Defer[util.control.TailCalls.TailRec]", "kind" : "implicit def"}, {"label" : "catsStdShowForSymbol", "tail" : ": Show[Symbol]", "member" : "cats.instances.SymbolInstances.catsStdShowForSymbol", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForSymbol:cats.Show[Symbol]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForSymbol", "tail" : ": Order[Symbol] with Hash[Symbol] with LowerBounded[Symbol]", "member" : "cats.kernel.instances.SymbolInstances.catsKernelStdOrderForSymbol", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForSymbol:cats.kernel.Order[Symbol]withcats.kernel.Hash[Symbol]withcats.kernel.LowerBounded[Symbol]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String] with Hash[String] with LowerBounded[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForString:cats.kernel.Order[String]withcats.kernel.Hash[String]withcats.kernel.LowerBounded[String]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForStream", "tail" : ": Traverse[Stream] with Alternative[Stream] with Monad[Stream] with CoflatMap[Stream] with Align[Stream]", "member" : "cats.instances.StreamInstances.catsStdInstancesForStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForStream:cats.Traverse[Stream]withcats.Alternative[Stream]withcats.Monad[Stream]withcats.CoflatMap[Stream]withcats.Align[Stream]", "kind" : "implicit val"}, {"label" : "catsStdParallelForStreamZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.StreamInstances.catsStdParallelForStreamZipStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdParallelForStreamZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "implicit def"}, {"label" : "catsStdShowForStream", "tail" : "(arg0: Show[A]): Show[Stream[A]]", "member" : "cats.instances.StreamInstances.catsStdShowForStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForStream[A](implicitevidence$1:cats.Show[A]):cats.Show[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForStream", "tail" : "(): Monoid[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdMonoidForStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForStream[A]:cats.kernel.Monoid[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForStream", "tail" : "(arg0: Order[A]): Order[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdOrderForStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForStream[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForStream", "tail" : "(arg0: Hash[A]): Hash[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdHashForStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForStream[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForStream", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdPartialOrderForStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForStream[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForStream", "tail" : "(arg0: Eq[A]): Eq[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances2.catsKernelStdEqForStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForStream[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedSet", "tail" : "(arg0: Show[A]): Show[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances.catsStdShowForSortedSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForSortedSet[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.SortedSet[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSortedSet", "tail" : ": Foldable[SortedSet] with SemigroupK[SortedSet]", "member" : "cats.instances.SortedSetInstances.catsStdInstancesForSortedSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForSortedSet:cats.Foldable[scala.collection.immutable.SortedSet]withcats.SemigroupK[scala.collection.immutable.SortedSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdSemilatticeForSortedSet", "tail" : "(arg0: Order[A]): BoundedSemilattice[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances1.catsKernelStdSemilatticeForSortedSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForSortedSet[A](implicitevidence$5:cats.kernel.Order[A]):cats.kernel.BoundedSemilattice[scala.collection.immutable.SortedSet[A]]", "kind" : "def"}, {"label" : "catsStdInstancesForSortedMap", "tail" : "(arg0: Order[K]): Traverse[[β$0$]SortedMap[K, β$0$]] with FlatMap[[β$1$]SortedMap[K, β$1$]] with Align[[β$2$]SortedMap[K, β$2$]]", "member" : "cats.instances.SortedMapInstances.catsStdInstancesForSortedMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForSortedMap[K](implicitevidence$7:cats.Order[K]):cats.Traverse[[β$0$]scala.collection.immutable.SortedMap[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.SortedMap[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.SortedMap[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedMap", "tail" : "(arg0: Order[A], showA: Show[A], showB: Show[B]): Show[SortedMap[A, B]]", "member" : "cats.instances.SortedMapInstances.catsStdShowForSortedMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForSortedMap[A,B](implicitevidence$6:cats.Order[A],implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[scala.collection.immutable.SortedMap[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: CommutativeSemigroup[V]): CommutativeMonoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdCommutativeMonoidForSortedMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdCommutativeMonoidForSortedMap[K,V](implicitevidence$4:cats.Order[K],implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdHashForSortedMap", "tail" : "(arg0: Hash[K], arg1: Order[K], arg2: Hash[V]): Hash[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdHashForSortedMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdHashForSortedMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.Order[K],implicitevidence$3:cats.kernel.Hash[V]):cats.kernel.Hash[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: Semigroup[V]): Monoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances2.catsStdMonoidForSortedMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdMonoidForSortedMap[K,V](implicitevidence$10:cats.Order[K],implicitevidence$11:cats.kernel.Semigroup[V]):cats.Monoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdEqForSortedMap", "tail" : "(arg0: Order[K], arg1: Eq[V]): Eq[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances1.catsStdEqForSortedMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdEqForSortedMap[K,V](implicitevidence$8:cats.Order[K],implicitevidence$9:cats.kernel.Eq[V]):cats.kernel.Eq[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdShowForSet", "tail" : "(arg0: Show[A]): Show[Set[A]]", "member" : "cats.instances.SetInstances.catsStdShowForSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForSet[A](implicitevidence$3:cats.Show[A]):cats.Show[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSet", "tail" : ": UnorderedTraverse[Set] with MonoidK[Set]", "member" : "cats.instances.SetInstances.catsStdInstancesForSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForSet:cats.UnorderedTraverse[Set]withcats.MonoidK[Set]", "kind" : "implicit val"}, {"label" : "catsKernelStdHashForSet", "tail" : "(): Hash[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdHashForSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForSet[A]:cats.kernel.Hash[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForSet", "tail" : "(): BoundedSemilattice[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdSemilatticeForSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForSet[A]:cats.kernel.BoundedSemilattice[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForSet", "tail" : "(): PartialOrder[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdPartialOrderForSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForSet[A]:cats.kernel.PartialOrder[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForQueue", "tail" : "(): TraverseFilter[Queue]", "member" : "cats.instances.QueueInstances.catsStdTraverseFilterForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdTraverseFilterForQueue:cats.TraverseFilter[scala.collection.immutable.Queue]", "kind" : "implicit def"}, {"label" : "catsStdShowForQueue", "tail" : "(arg0: Show[A]): Show[Queue[A]]", "member" : "cats.instances.QueueInstances.catsStdShowForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForQueue[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForQueue", "tail" : ": Traverse[Queue] with Alternative[Queue] with Monad[Queue] with CoflatMap[Queue]", "member" : "cats.instances.QueueInstances.catsStdInstancesForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForQueue:cats.Traverse[scala.collection.immutable.Queue]withcats.Alternative[scala.collection.immutable.Queue]withcats.Monad[scala.collection.immutable.Queue]withcats.CoflatMap[scala.collection.immutable.Queue]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForQueue", "tail" : "(): Monoid[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdMonoidForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForQueue[A]:cats.kernel.Monoid[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForQueue", "tail" : "(arg0: Order[A]): Order[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdOrderForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForQueue[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForQueue", "tail" : "(arg0: Hash[A]): Hash[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdHashForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForQueue[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForQueue", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdPartialOrderForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForQueue[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForQueue", "tail" : "(arg0: Eq[A]): Eq[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances2.catsKernelStdEqForQueue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForQueue[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForPartialOrdering", "tail" : ": ContravariantMonoidal[PartialOrdering]", "member" : "cats.instances.PartialOrderingInstances.catsContravariantMonoidalForPartialOrdering", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsContravariantMonoidalForPartialOrdering:cats.ContravariantMonoidal[PartialOrdering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForPartialOrder", "tail" : ": ContravariantMonoidal[PartialOrder]", "member" : "cats.instances.PartialOrderInstances.catsContravariantMonoidalForPartialOrder", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsContravariantMonoidalForPartialOrder:cats.ContravariantMonoidal[cats.PartialOrder]", "kind" : "implicit val"}, {"label" : "catsKernelPartialOrderingForPartialOrder", "tail" : "(ev: PartialOrder[A]): PartialOrdering[A]", "member" : "cats.kernel.PartialOrderToPartialOrderingConversion.catsKernelPartialOrderingForPartialOrder", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelPartialOrderingForPartialOrder[A](implicitev:cats.kernel.PartialOrder[A]):PartialOrdering[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherTNestedParallelValidated", "tail" : "(arg0: Semigroup[E], P: Parallel[M]): Aux[[γ$5$]EitherT[M, E, γ$5$], [γ$6$]Nested[cats.Parallel.F, [β$4$]Validated[E, β$4$], γ$6$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherTNestedParallelValidated", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsParallelForEitherTNestedParallelValidated[M[_<:<?>],E](implicitevidence$2:cats.kernel.Semigroup[E],implicitP:cats.Parallel[M]):cats.Parallel.Aux[[γ$5$]cats.data.EitherT[M,E,γ$5$],[γ$6$]cats.data.Nested[P.F,[β$4$]cats.data.Validated[E,β$4$],γ$6$]]", "kind" : "def"}, {"label" : "catsStdParallelForZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdParallelForZipLazyList[A<:<?>]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "def"}, {"label" : "catsStdParallelForZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipStream", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdParallelForZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipVector", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdNonEmptyParallelForZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdNonEmptyParallelForZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "def"}, {"label" : "catsParallelForOptionTNestedOption", "tail" : "(P: Parallel[M]): Aux[[β$2$]OptionT[M, β$2$], [γ$3$]Nested[cats.Parallel.F, Option, γ$3$]]", "member" : "cats.instances.ParallelInstances.catsParallelForOptionTNestedOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsParallelForOptionTNestedOption[M[_<:<?>]](implicitP:cats.Parallel[M]):cats.Parallel.Aux[[β$2$]cats.data.OptionT[M,β$2$],[γ$3$]cats.data.Nested[P.F,Option,γ$3$]]", "kind" : "def"}, {"label" : "catsParallelForEitherValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$0$]Either[E, β$0$], [β$1$]Validated[E, β$1$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherValidated", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsParallelForEitherValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$0$]scala.util.Either[E,β$0$],[β$1$]cats.data.Validated[E,β$1$]]", "kind" : "def"}, {"label" : "catsParallelForEitherTNestedValidated", "tail" : "(arg0: Monad[M], arg1: Semigroup[E]): Aux[[γ$1$]EitherT[M, E, γ$1$], [γ$2$]Nested[M, [β$0$]Validated[E, β$0$], γ$2$]]", "member" : "cats.instances.ParallelInstances1.catsParallelForEitherTNestedValidated", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsParallelForEitherTNestedValidated[M[_<:<?>],E](implicitevidence$1:cats.Monad[M],implicitevidence$2:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[γ$1$]cats.data.EitherT[M,E,γ$1$],[γ$2$]cats.data.Nested[M,[β$0$]cats.data.Validated[E,β$0$],γ$2$]]", "kind" : "def"}, {"label" : "catsContravariantMonoidalForOrdering", "tail" : ": ContravariantMonoidal[Ordering]", "member" : "cats.instances.OrderingInstances.catsContravariantMonoidalForOrdering", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsContravariantMonoidalForOrdering:cats.ContravariantMonoidal[Ordering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForOrder", "tail" : ": ContravariantMonoidal[Order]", "member" : "cats.instances.OrderInstances.catsContravariantMonoidalForOrder", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsContravariantMonoidalForOrder:cats.ContravariantMonoidal[cats.Order]", "kind" : "implicit val"}, {"label" : "catsKernelOrderingForOrder", "tail" : "(ev: Order[A]): Ordering[A]", "member" : "cats.kernel.OrderToOrderingConversion.catsKernelOrderingForOrder", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelOrderingForOrder[A](implicitev:cats.kernel.Order[A]):Ordering[A]", "kind" : "implicit def"}, {"label" : "catsStdShowForOption", "tail" : "(A: Show[A]): Show[Option[A]]", "member" : "cats.instances.OptionInstances.catsStdShowForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForOption[A](implicitA:cats.Show[A]):cats.Show[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForOption", "tail" : ": Traverse[Option] with MonadError[Option, Unit] with Alternative[Option] with CommutativeMonad[Option] with CoflatMap[Option] with Align[Option]", "member" : "cats.instances.OptionInstances.catsStdInstancesForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForOption:cats.Traverse[Option]withcats.MonadError[Option,Unit]withcats.Alternative[Option]withcats.CommutativeMonad[Option]withcats.CoflatMap[Option]withcats.Align[Option]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForOption", "tail" : "(arg0: Semigroup[A]): Monoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdMonoidForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForOption[A](implicitevidence$3:cats.kernel.Semigroup[A]):cats.kernel.Monoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForOption", "tail" : "(arg0: CommutativeSemigroup[A]): CommutativeMonoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdCommutativeMonoidForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForOption[A](implicitevidence$2:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeMonoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForOption", "tail" : "(arg0: Order[A]): Order[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdOrderForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForOption[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForOption", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Option[A]]", "member" : "cats.kernel.instances.OptionInstances0.catsKernelStdPartialOrderForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForOption[A](implicitevidence$4:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForOption", "tail" : "(arg0: Hash[A]): Hash[Option[A]]", "member" : "cats.kernel.instances.OptionInstances1.catsKernelStdHashForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForOption[A](implicitevidence$5:cats.kernel.Hash[A]):cats.kernel.Hash[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForOption", "tail" : "(arg0: Eq[A]): Eq[Option[A]]", "member" : "cats.kernel.instances.OptionInstances2.catsKernelStdEqForOption", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForOption[A](implicitevidence$6:cats.kernel.Eq[A]):cats.kernel.Eq[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForMap", "tail" : "(): UnorderedTraverse[[β$0$]Map[K, β$0$]] with FlatMap[[β$1$]Map[K, β$1$]] with Align[[β$2$]Map[K, β$2$]]", "member" : "cats.instances.MapInstances.catsStdInstancesForMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForMap[K]:cats.UnorderedTraverse[[β$0$]scala.collection.immutable.Map[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.Map[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.Map[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForMap", "tail" : "(showA: Show[A], showB: Show[B]): Show[Map[A, B]]", "member" : "cats.instances.MapInstances.catsStdShowForMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForMap[A,B](implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[Map[A,B]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForMap", "tail" : "(arg0: CommutativeSemigroup[V]): CommutativeMonoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdCommutativeMonoidForMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForMap[K,V](implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForMap", "tail" : "(arg0: Hash[K], arg1: Hash[V]): Hash[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdHashForMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.kernel.Hash[V]):cats.kernel.Hash[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForMap", "tail" : "(arg0: Semigroup[V]): Monoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdMonoidForMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForMap[K,V](implicitevidence$5:cats.kernel.Semigroup[V]):cats.kernel.Monoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForMap", "tail" : "(arg0: Eq[V]): Eq[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdEqForMap", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForMap[K,V](implicitevidence$4:cats.kernel.Eq[V]):cats.kernel.Eq[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsStdNonEmptyParallelForListZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ListInstances.catsStdNonEmptyParallelForListZipList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdNonEmptyParallelForListZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "implicit def"}, {"label" : "catsStdShowForList", "tail" : "(arg0: Show[A]): Show[List[A]]", "member" : "cats.instances.ListInstances.catsStdShowForList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForList[A](implicitevidence$1:cats.Show[A]):cats.Show[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForList", "tail" : ": Traverse[List] with Alternative[List] with Monad[List] with CoflatMap[List] with Align[List]", "member" : "cats.instances.ListInstances.catsStdInstancesForList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForList:cats.Traverse[List]withcats.Alternative[List]withcats.Monad[List]withcats.CoflatMap[List]withcats.Align[List]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForList", "tail" : "(): Monoid[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdMonoidForList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForList[A]:cats.kernel.Monoid[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForList", "tail" : "(arg0: Order[A]): Order[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdOrderForList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForList", "tail" : "(arg0: Hash[A]): Hash[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdHashForList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdPartialOrderForList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForList", "tail" : "(arg0: Eq[A]): Eq[List[A]]", "member" : "cats.kernel.instances.ListInstances2.catsKernelStdEqForList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdParallelForLazyListZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.LazyListInstances.catsStdParallelForLazyListZipLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdParallelForLazyListZipLazyList[A]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForLazyList", "tail" : ": TraverseFilter[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdTraverseFilterForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdTraverseFilterForLazyList:cats.TraverseFilter[LazyList]", "kind" : "implicit val"}, {"label" : "catsStdShowForLazyList", "tail" : "(arg0: Show[A]): Show[LazyList[A]]", "member" : "cats.instances.LazyListInstances.catsStdShowForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForLazyList[A](implicitevidence$1:cats.Show[A]):cats.Show[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForLazyList", "tail" : ": Traverse[LazyList] with Alternative[LazyList] with Monad[LazyList] with CoflatMap[LazyList] with Align[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdInstancesForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForLazyList:cats.Traverse[LazyList]withcats.Alternative[LazyList]withcats.Monad[LazyList]withcats.CoflatMap[LazyList]withcats.Align[LazyList]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForLazyList", "tail" : "(): Monoid[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdMonoidForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForLazyList[A]:cats.kernel.Monoid[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForLazyList", "tail" : "(arg0: Order[A]): Order[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdOrderForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForLazyList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForLazyList", "tail" : "(arg0: Hash[A]): Hash[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdHashForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForLazyList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForLazyList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdPartialOrderForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForLazyList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForLazyList", "tail" : "(arg0: Eq[A]): Eq[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances2.catsKernelStdEqForLazyList", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForLazyList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsInvariantMonoidalCommutativeSemigroup", "tail" : ": InvariantMonoidal[CommutativeSemigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalCommutativeSemigroup", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsInvariantMonoidalCommutativeSemigroup:cats.InvariantMonoidal[cats.kernel.CommutativeSemigroup]", "kind" : "implicit val"}, {"label" : "catsInvariantMonoidalSemigroup", "tail" : ": InvariantMonoidal[Semigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalSemigroup", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsInvariantMonoidalSemigroup:cats.InvariantMonoidal[cats.kernel.Semigroup]", "kind" : "implicit val"}, {"label" : "catsSemigroupalForMonoid", "tail" : "(): InvariantSemigroupal[Monoid]", "member" : "cats.instances.InvariantMonoidalInstances.catsSemigroupalForMonoid", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsSemigroupalForMonoid:cats.InvariantSemigroupal[cats.Monoid]", "kind" : "implicit def"}, {"label" : "catsContravariantForHash", "tail" : ": Contravariant[Hash]", "member" : "cats.instances.HashInstances.catsContravariantForHash", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsContravariantForHash:cats.Contravariant[cats.Hash]", "kind" : "implicit val"}, {"label" : "catsKernelHashToHashing", "tail" : "(ev: Hash[A]): Hashing[A]", "member" : "cats.kernel.HashToHashingConversion.catsKernelHashToHashing", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelHashToHashing[A](implicitev:cats.kernel.Hash[A]):scala.util.hashing.Hashing[A]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForFuture", "tail" : "(ec: ExecutionContext): MonadError[Future, Throwable] with CoflatMap[Future] with Monad[Future]", "member" : "cats.instances.FutureInstances.catsStdInstancesForFuture", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForFuture(implicitec:scala.concurrent.ExecutionContext):cats.MonadError[scala.concurrent.Future,Throwable]withcats.CoflatMap[scala.concurrent.Future]withcats.Monad[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForFuture", "tail" : "(arg0: Monoid[A], ec: ExecutionContext): Monoid[Future[A]]", "member" : "cats.instances.FutureInstances1.catsStdMonoidForFuture", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdMonoidForFuture[A](implicitevidence$1:cats.Monoid[A],implicitec:scala.concurrent.ExecutionContext):cats.Monoid[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForFuture", "tail" : "(arg0: Semigroup[A], ec: ExecutionContext): Semigroup[Future[A]]", "member" : "cats.instances.FutureInstances2.catsStdSemigroupForFuture", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdSemigroupForFuture[A](implicitevidence$2:cats.Semigroup[A],implicitec:scala.concurrent.ExecutionContext):cats.Semigroup[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdMonoidKForFunction1", "tail" : ": MonoidK[Endo]", "member" : "cats.instances.Function1Instances.catsStdMonoidKForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdMonoidKForFunction1:cats.MonoidK[cats.Endo]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForFunction1", "tail" : ": ArrowChoice[Function1] with CommutativeArrow[Function1]", "member" : "cats.instances.Function1Instances.catsStdInstancesForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForFunction1:cats.arrow.ArrowChoice[Function1]withcats.arrow.CommutativeArrow[Function1]", "kind" : "implicit val"}, {"label" : "catsStdMonadForFunction1", "tail" : "(): Monad[[β$8$](T1) => β$8$]", "member" : "cats.instances.Function1Instances.catsStdMonadForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdMonadForFunction1[T1]:cats.Monad[[β$8$]T1=>β$8$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantMonoidalForFunction1", "tail" : "(arg0: Monoid[R]): ContravariantMonoidal[[α$6$](α$6$) => R]", "member" : "cats.instances.Function1Instances.catsStdContravariantMonoidalForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdContravariantMonoidalForFunction1[R](implicitevidence$2:cats.Monoid[R]):cats.ContravariantMonoidal[[α$6$]α$6$=>R]", "kind" : "implicit def"}, {"label" : "catsStdDistributiveForFunction1", "tail" : "(): Distributive[[β$12$](T1) => β$12$]", "member" : "cats.instances.Function1Instances0.catsStdDistributiveForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdDistributiveForFunction1[T1]:cats.Distributive[[β$12$]T1=>β$12$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantForFunction1", "tail" : "(): Contravariant[[α$10$](α$10$) => R]", "member" : "cats.instances.Function1Instances0.catsStdContravariantForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdContravariantForFunction1[R]:cats.Contravariant[[α$10$]α$10$=>R]", "kind" : "implicit def"}, {"label" : "catsStdBimonadForFunction0", "tail" : ": Bimonad[Function0]", "member" : "cats.instances.Function0Instances.catsStdBimonadForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdBimonadForFunction0:cats.Bimonad[Function0]", "kind" : "implicit val"}, {"label" : "function0Distributive", "tail" : "(): Distributive[Function0]", "member" : "cats.instances.Function0Instances0.function0Distributive", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#function0Distributive:cats.Distributive[Function0]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction1", "tail" : "(G: CommutativeGroup[B]): CommutativeGroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelCommutativeGroupForFunction1[A,B](implicitG:cats.kernel.CommutativeGroup[B]):cats.kernel.CommutativeGroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction0", "tail" : "(G: CommutativeGroup[A]): CommutativeGroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelCommutativeGroupForFunction0[A](implicitG:cats.kernel.CommutativeGroup[A]):cats.kernel.CommutativeGroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelOrderForFunction0", "tail" : "(ev: Order[A]): Order[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelOrderForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelOrderForFunction0[A](implicitev:cats.kernel.Order[A]):cats.kernel.Order[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction1", "tail" : "(G: BoundedSemilattice[B]): BoundedSemilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelBoundedSemilatticeForFunction1[A,B](implicitG:cats.kernel.BoundedSemilattice[B]):cats.kernel.BoundedSemilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction0", "tail" : "(G: BoundedSemilattice[A]): BoundedSemilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelBoundedSemilatticeForFunction0[A](implicitG:cats.kernel.BoundedSemilattice[A]):cats.kernel.BoundedSemilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction1", "tail" : "(G: Group[B]): Group[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelGroupForFunction1[A,B](implicitG:cats.kernel.Group[B]):cats.kernel.Group[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction0", "tail" : "(G: Group[A]): Group[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelGroupForFunction0[A](implicitG:cats.kernel.Group[A]):cats.kernel.Group[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelPartialOrderForFunction0", "tail" : "(ev: PartialOrder[A]): PartialOrder[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelPartialOrderForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelPartialOrderForFunction0[A](implicitev:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelHashForFunction0", "tail" : "(ev: Hash[A]): Hash[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelHashForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelHashForFunction0[A](implicitev:cats.kernel.Hash[A]):cats.kernel.Hash[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction1", "tail" : "(M: Semilattice[B]): Semilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelSemilatticeForFunction1[A,B](implicitM:cats.kernel.Semilattice[B]):cats.kernel.Semilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction0", "tail" : "(M: Semilattice[A]): Semilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelSemilatticeForFunction0[A](implicitM:cats.kernel.Semilattice[A]):cats.kernel.Semilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction1", "tail" : "(M: CommutativeMonoid[B]): CommutativeMonoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelCommutativeMonoidForFunction1[A,B](implicitM:cats.kernel.CommutativeMonoid[B]):cats.kernel.CommutativeMonoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction0", "tail" : "(M: CommutativeMonoid[A]): CommutativeMonoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelCommutativeMonoidForFunction0[A](implicitM:cats.kernel.CommutativeMonoid[A]):cats.kernel.CommutativeMonoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelEqForFunction0", "tail" : "(ev: Eq[A]): Eq[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelEqForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelEqForFunction0[A](implicitev:cats.kernel.Eq[A]):cats.kernel.Eq[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction1", "tail" : "(S: Band[B]): Band[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelBandForFunction1[A,B](implicitS:cats.kernel.Band[B]):cats.kernel.Band[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction0", "tail" : "(S: Band[A]): Band[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelBandForFunction0[A](implicitS:cats.kernel.Band[A]):cats.kernel.Band[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction1", "tail" : "(M: Monoid[B]): Monoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelMonoidForFunction1[A,B](implicitM:cats.kernel.Monoid[B]):cats.kernel.Monoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction0", "tail" : "(M: Monoid[A]): Monoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelMonoidForFunction0[A](implicitM:cats.kernel.Monoid[A]):cats.kernel.Monoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction1", "tail" : "(S: CommutativeSemigroup[B]): CommutativeSemigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelCommutativeSemigroupForFunction1[A,B](implicitS:cats.kernel.CommutativeSemigroup[B]):cats.kernel.CommutativeSemigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction0", "tail" : "(S: CommutativeSemigroup[A]): CommutativeSemigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelCommutativeSemigroupForFunction0[A](implicitS:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeSemigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction1", "tail" : "(S: Semigroup[B]): Semigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelSemigroupForFunction1[A,B](implicitS:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction0", "tail" : "(S: Semigroup[A]): Semigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction0", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelSemigroupForFunction0[A](implicitS:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForEquiv", "tail" : ": ContravariantMonoidal[Equiv]", "member" : "cats.instances.EquivInstances.catsContravariantMonoidalForEquiv", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsContravariantMonoidalForEquiv:cats.ContravariantMonoidal[Equiv]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForEq", "tail" : ": ContravariantMonoidal[Eq]", "member" : "cats.instances.EqInstances.catsContravariantMonoidalForEq", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsContravariantMonoidalForEq:cats.ContravariantMonoidal[cats.Eq]", "kind" : "implicit val"}, {"label" : "catsKernelEquivForEq", "tail" : "(ev: Eq[A]): Equiv[A]", "member" : "cats.kernel.EqToEquivConversion.catsKernelEquivForEq", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelEquivForEq[A](implicitev:cats.kernel.Eq[A]):scala.math.Equiv[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherAndValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$9$]Either[E, β$9$], [β$10$]Validated[E, β$10$]]", "member" : "cats.instances.EitherInstances.catsParallelForEitherAndValidated", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsParallelForEitherAndValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$9$]scala.util.Either[E,β$9$],[β$10$]cats.data.Validated[E,β$10$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForEither", "tail" : "(A: Show[A], B: Show[B]): Show[Either[A, B]]", "member" : "cats.instances.EitherInstances.catsStdShowForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForEither[A,B](implicitA:cats.Show[A],implicitB:cats.Show[B]):cats.Show[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupKForEither", "tail" : "(): SemigroupK[[β$7$]Either[L, β$7$]]", "member" : "cats.instances.EitherInstances.catsStdSemigroupKForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdSemigroupKForEither[L]:cats.SemigroupK[[β$7$]scala.util.Either[L,β$7$]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForEither", "tail" : "(): MonadError[[β$0$]Either[A, β$0$], A] with Traverse[[β$1$]Either[A, β$1$]] with Align[[β$2$]Either[A, β$2$]]", "member" : "cats.instances.EitherInstances.catsStdInstancesForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForEither[A]:cats.MonadError[[β$0$]scala.util.Either[A,β$0$],A]withcats.Traverse[[β$1$]scala.util.Either[A,β$1$]]withcats.Align[[β$2$]scala.util.Either[A,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForEither", "tail" : ": Bitraverse[Either]", "member" : "cats.instances.EitherInstances.catsStdBitraverseForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdBitraverseForEither:cats.Bitraverse[Either]", "kind" : "implicit val"}, {"label" : "catsDataMonoidForEither", "tail" : "(B: Monoid[B]): Monoid[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsDataMonoidForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsDataMonoidForEither[A,B](implicitB:cats.kernel.Monoid[B]):cats.kernel.Monoid[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdOrderForEither", "tail" : "(A: Order[A], B: Order[B]): Order[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsStdOrderForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdOrderForEither[A,B](implicitA:cats.kernel.Order[A],implicitB:cats.kernel.Order[B]):cats.kernel.Order[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdHashForEither", "tail" : "(A: Hash[A], B: Hash[B]): Hash[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdHashForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdHashForEither[A,B](implicitA:cats.kernel.Hash[A],implicitB:cats.kernel.Hash[B]):cats.kernel.Hash[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdPartialOrderForEither", "tail" : "(A: PartialOrder[A], B: PartialOrder[B]): PartialOrder[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdPartialOrderForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdPartialOrderForEither[A,B](implicitA:cats.kernel.PartialOrder[A],implicitB:cats.kernel.PartialOrder[B]):cats.kernel.PartialOrder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsDataSemigroupForEither", "tail" : "(B: Semigroup[B]): Semigroup[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsDataSemigroupForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsDataSemigroupForEither[A,B](implicitB:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdEqForEither", "tail" : "(A: Eq[A], B: Eq[B]): Eq[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances1.catsStdEqForEither", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdEqForEither[A,B](implicitA:cats.kernel.Eq[A],implicitB:cats.kernel.Eq[B]):cats.kernel.Eq[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdShowForBitSet", "tail" : "(): Show[BitSet]", "member" : "cats.instances.BitSetInstances.catsStdShowForBitSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForBitSet:cats.Show[scala.collection.immutable.BitSet]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForBitSet", "tail" : ": BoundedSemilattice[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdSemilatticeForBitSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForBitSet:cats.kernel.BoundedSemilattice[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBitSet", "tail" : ": PartialOrder[BitSet] with Hash[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdOrderForBitSet", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForBitSet:cats.kernel.PartialOrder[scala.collection.immutable.BitSet]withcats.kernel.Hash[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigDecimal", "tail" : ": Show[BigDecimal]", "member" : "cats.instances.BigDecimalInstances.catsStdShowForBigDecimal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForBigDecimal:cats.Show[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigDecimal", "tail" : ": CommutativeGroup[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdGroupForBigDecimal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForBigDecimal:cats.kernel.CommutativeGroup[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigDecimal", "tail" : ": Order[BigDecimal] with Hash[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdOrderForBigDecimal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForBigDecimal:cats.kernel.Order[BigDecimal]withcats.kernel.Hash[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigInt", "tail" : ": Show[BigInt]", "member" : "cats.instances.BigIntInstances.catsStdShowForBigInt", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForBigInt:cats.Show[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigInt", "tail" : ": CommutativeGroup[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdGroupForBigInt", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForBigInt:cats.kernel.CommutativeGroup[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigInt", "tail" : ": Order[BigInt] with Hash[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdOrderForBigInt", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForBigInt:cats.kernel.Order[BigInt]withcats.kernel.Hash[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple22", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20], A21: BoundedSemilattice[A21]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20],implicitA21:cats.kernel.BoundedSemilattice[A21]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple22", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20], A21: Order[A21]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20],implicitA21:cats.kernel.Order[A21]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple22", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20], A21: CommutativeGroup[A21]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20],implicitA21:cats.kernel.CommutativeGroup[A21]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple21", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple21", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple21", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple20", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple20", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple20", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple19", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple19", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple19", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple18", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple18", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple18", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple17", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple17", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple17", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple16", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple16", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple16", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple15", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple15", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple15", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple14", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple14", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple14", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple13", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple13", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple13", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple12", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple12", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple12", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple11", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple11", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple11", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple10", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple10", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple10", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple9", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple9", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple9", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple8", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple8", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7]): Order[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple8", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple7", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple7", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6]): Order[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple7", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple6", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple6", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5]): Order[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple6", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5]): CommutativeGroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple5", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4]): BoundedSemilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple5", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4]): Order[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4]):cats.kernel.Order[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple5", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4]): CommutativeGroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple4", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3]): BoundedSemilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple4", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3]): Order[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3]):cats.kernel.Order[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple4", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3]): CommutativeGroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple3", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2]): BoundedSemilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2]):cats.kernel.BoundedSemilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple3", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2]): Order[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2]):cats.kernel.Order[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple3", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2]): CommutativeGroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2]):cats.kernel.CommutativeGroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple2", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1]): BoundedSemilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1]):cats.kernel.BoundedSemilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple2", "tail" : "(A0: Order[A0], A1: Order[A1]): Order[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple2[A0,A1](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1]):cats.kernel.Order[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple2", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1]): CommutativeGroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1]):cats.kernel.CommutativeGroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple1", "tail" : "(A0: BoundedSemilattice[A0]): BoundedSemilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBoundedSemilatticeForTuple1[A0](implicitA0:cats.kernel.BoundedSemilattice[A0]):cats.kernel.BoundedSemilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple1", "tail" : "(A0: Order[A0]): Order[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForTuple1[A0](implicitA0:cats.kernel.Order[A0]):cats.kernel.Order[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple1", "tail" : "(A0: CommutativeGroup[A0]): CommutativeGroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeGroupForTuple1[A0](implicitA0:cats.kernel.CommutativeGroup[A0]):cats.kernel.CommutativeGroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple22", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20], A21: PartialOrder[A21]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20],implicitA21:cats.kernel.PartialOrder[A21]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple22", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20], A21: Hash[A21]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20],implicitA21:cats.kernel.Hash[A21]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple22", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20], A21: Group[A21]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20],implicitA21:cats.kernel.Group[A21]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple22", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20], A21: CommutativeMonoid[A21]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20],implicitA21:cats.kernel.CommutativeMonoid[A21]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple22", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20], A21: Semilattice[A21]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20],implicitA21:cats.kernel.Semilattice[A21]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple21", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple21", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple21", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple21", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple21", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple20", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple20", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple20", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple20", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple20", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple19", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple19", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple19", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple19", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple19", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple18", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple18", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple18", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple18", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple18", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple17", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple17", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple17", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple17", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple17", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple16", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple16", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple16", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple16", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple16", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple15", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple15", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple15", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple15", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple15", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple14", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple14", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple14", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple14", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple14", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple13", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple13", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple13", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple13", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple13", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple12", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple12", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple12", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple12", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple12", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple11", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple11", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple11", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple11", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple11", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple10", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple10", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple10", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple10", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple10", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple9", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple9", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple9", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple9", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple9", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple8", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple8", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple8", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7]): Group[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple8", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple8", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple7", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple7", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6]): Hash[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple7", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6]): Group[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple7", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple7", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6]): Semilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple6", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5]): PartialOrder[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple6", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5]): Hash[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple6", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5]): Group[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple6", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple6", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5]): Semilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple5", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4]): PartialOrder[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple5", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4]): Hash[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4]):cats.kernel.Hash[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple5", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4]): Group[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4]):cats.kernel.Group[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple5", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4]): CommutativeMonoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple5", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4]): Semilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple4", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3]): PartialOrder[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3]):cats.kernel.PartialOrder[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple4", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3]): Hash[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3]):cats.kernel.Hash[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple4", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3]): Group[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3]):cats.kernel.Group[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple4", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3]): CommutativeMonoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple4", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3]): Semilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3]):cats.kernel.Semilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple3", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2]): PartialOrder[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2]):cats.kernel.PartialOrder[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple3", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2]): Hash[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple3[A0,A1,A2](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2]):cats.kernel.Hash[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple3", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2]): Group[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2]):cats.kernel.Group[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple3", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2]): CommutativeMonoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2]):cats.kernel.CommutativeMonoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple3", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2]): Semilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2]):cats.kernel.Semilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple2", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1]): PartialOrder[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple2[A0,A1](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1]):cats.kernel.PartialOrder[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple2", "tail" : "(A0: Hash[A0], A1: Hash[A1]): Hash[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple2[A0,A1](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1]):cats.kernel.Hash[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple2", "tail" : "(A0: Group[A0], A1: Group[A1]): Group[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple2[A0,A1](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1]):cats.kernel.Group[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple2", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1]): CommutativeMonoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1]):cats.kernel.CommutativeMonoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple2", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1]): Semilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1]):cats.kernel.Semilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple1", "tail" : "(A0: PartialOrder[A0]): PartialOrder[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdPartialOrderForTuple1[A0](implicitA0:cats.kernel.PartialOrder[A0]):cats.kernel.PartialOrder[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple1", "tail" : "(A0: Hash[A0]): Hash[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdHashForTuple1[A0](implicitA0:cats.kernel.Hash[A0]):cats.kernel.Hash[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple1", "tail" : "(A0: Group[A0]): Group[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForTuple1[A0](implicitA0:cats.kernel.Group[A0]):cats.kernel.Group[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple1", "tail" : "(A0: CommutativeMonoid[A0]): CommutativeMonoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeMonoidForTuple1[A0](implicitA0:cats.kernel.CommutativeMonoid[A0]):cats.kernel.CommutativeMonoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple1", "tail" : "(A0: Semilattice[A0]): Semilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemilatticeForTuple1[A0](implicitA0:cats.kernel.Semilattice[A0]):cats.kernel.Semilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple22", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20], A21: Monoid[A21]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20],implicitA21:cats.kernel.Monoid[A21]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple22", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20], A21: CommutativeSemigroup[A21]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20],implicitA21:cats.kernel.CommutativeSemigroup[A21]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple22", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20], A21: Band[A21]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20],implicitA21:cats.kernel.Band[A21]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple21", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple21", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple21", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple20", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple20", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple20", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple19", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple19", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple19", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple18", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple18", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple18", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple17", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple17", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple17", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple16", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple16", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple16", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple15", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple15", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple15", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple14", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple14", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple14", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple13", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple13", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple13", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple12", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple12", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple12", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple11", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple11", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple11", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple10", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple10", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple10", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple9", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple9", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple9", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple8", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple8", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple8", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7]): Band[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple7", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6]): Monoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple7", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple7", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6]): Band[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple6", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5]): Monoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple6", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple6", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5]): Band[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple5", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4]): Monoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4]):cats.kernel.Monoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple5", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4]): CommutativeSemigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple5", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4]): Band[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4]):cats.kernel.Band[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple4", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3]): Monoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3]):cats.kernel.Monoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple4", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3]): CommutativeSemigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple4", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3]): Band[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3]):cats.kernel.Band[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple3", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2]): Monoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2]):cats.kernel.Monoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple3", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2]): CommutativeSemigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2]):cats.kernel.CommutativeSemigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple3", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2]): Band[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple3[A0,A1,A2](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2]):cats.kernel.Band[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple2", "tail" : "(A0: Monoid[A0], A1: Monoid[A1]): Monoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple2[A0,A1](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1]):cats.kernel.Monoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple2", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1]): CommutativeSemigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1]):cats.kernel.CommutativeSemigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple2", "tail" : "(A0: Band[A0], A1: Band[A1]): Band[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple2[A0,A1](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1]):cats.kernel.Band[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple1", "tail" : "(A0: Monoid[A0]): Monoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdMonoidForTuple1[A0](implicitA0:cats.kernel.Monoid[A0]):cats.kernel.Monoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple1", "tail" : "(A0: CommutativeSemigroup[A0]): CommutativeSemigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdCommutativeSemigroupForTuple1[A0](implicitA0:cats.kernel.CommutativeSemigroup[A0]):cats.kernel.CommutativeSemigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple1", "tail" : "(A0: Band[A0]): Band[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdBandForTuple1[A0](implicitA0:cats.kernel.Band[A0]):cats.kernel.Band[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple22", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20], A21: Eq[A21]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20],implicitA21:cats.kernel.Eq[A21]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple22", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20], A21: Semigroup[A21]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple22", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20],implicitA21:cats.kernel.Semigroup[A21]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple21", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple21", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple21", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple20", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple20", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple20", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple19", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple19", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple19", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple18", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple18", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple18", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple17", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple17", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple17", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple16", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple16", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple16", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple15", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple15", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple15", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple14", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple14", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple14", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple13", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple13", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple13", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple12", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple12", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple12", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple11", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple11", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple11", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple10", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple10", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple10", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple9", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple9", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple9", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple8", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple8", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple8", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple7", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6]): Eq[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple7", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6]): Semigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple7", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple6", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5]): Eq[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple6", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5]): Semigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple6", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple5", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4]): Eq[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4]):cats.kernel.Eq[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple5", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4]): Semigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple5", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple4", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3]): Eq[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3]):cats.kernel.Eq[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple4", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3]): Semigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple4", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3]):cats.kernel.Semigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple3", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2]): Eq[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple3[A0,A1,A2](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2]):cats.kernel.Eq[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple3", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2]): Semigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple3", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2]):cats.kernel.Semigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple2", "tail" : "(A0: Eq[A0], A1: Eq[A1]): Eq[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple2[A0,A1](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1]):cats.kernel.Eq[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple2", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1]): Semigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1]):cats.kernel.Semigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple1", "tail" : "(A0: Eq[A0]): Eq[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdEqForTuple1[A0](implicitA0:cats.kernel.Eq[A0]):cats.kernel.Eq[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple1", "tail" : "(A0: Semigroup[A0]): Semigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple1", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdSemigroupForTuple1[A0](implicitA0:cats.kernel.Semigroup[A0]):cats.kernel.Semigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTuple2", "tail" : "(): Traverse[[β$0$](X, β$0$)] with Comonad[[β$1$](X, β$1$)] with Reducible[[β$2$](X, β$2$)]", "member" : "cats.instances.Tuple2Instances.catsStdInstancesForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdInstancesForTuple2[X]:cats.Traverse[[β$0$](X,β$0$)]withcats.Comonad[[β$1$](X,β$1$)]withcats.Reducible[[β$2$](X,β$2$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForTuple2", "tail" : "(aShow: Show[A], bShow: Show[B]): Show[(A, B)]", "member" : "cats.instances.Tuple2Instances.catsStdShowForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForTuple2[A,B](implicitaShow:cats.Show[A],implicitbShow:cats.Show[B]):cats.Show[(A,B)]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForTuple2", "tail" : ": Bitraverse[Tuple2]", "member" : "cats.instances.Tuple2Instances.catsStdBitraverseForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdBitraverseForTuple2:cats.Bitraverse[Tuple2]", "kind" : "implicit val"}, {"label" : "catsStdCommutativeMonadForTuple2", "tail" : "(MX: CommutativeMonoid[X]): CommutativeMonad[[β$6$](X, β$6$)]", "member" : "cats.instances.Tuple2Instances1.catsStdCommutativeMonadForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdCommutativeMonadForTuple2[X](implicitMX:cats.kernel.CommutativeMonoid[X]):cats.CommutativeMonad[[β$6$](X,β$6$)]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeFlatMapForTuple2", "tail" : "(MX: CommutativeSemigroup[X]): CommutativeFlatMap[[β$8$](X, β$8$)]", "member" : "cats.instances.Tuple2Instances2.catsStdCommutativeFlatMapForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdCommutativeFlatMapForTuple2[X](implicitMX:cats.kernel.CommutativeSemigroup[X]):cats.CommutativeFlatMap[[β$8$](X,β$8$)]", "kind" : "implicit def"}, {"label" : "catsStdMonadForTuple2", "tail" : "(MX: Monoid[X]): Monad[[β$10$](X, β$10$)]", "member" : "cats.instances.Tuple2Instances3.catsStdMonadForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdMonadForTuple2[X](implicitMX:cats.Monoid[X]):cats.Monad[[β$10$](X,β$10$)]", "kind" : "implicit def"}, {"label" : "catsStdFlatMapForTuple2", "tail" : "(SX: Semigroup[X]): FlatMap[[β$12$](X, β$12$)]", "member" : "cats.instances.Tuple2Instances4.catsStdFlatMapForTuple2", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdFlatMapForTuple2[X](implicitSX:cats.Semigroup[X]):cats.FlatMap[[β$12$](X,β$12$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForUnit", "tail" : ": Show[Unit]", "member" : "cats.instances.UnitInstances.catsStdShowForUnit", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForUnit:cats.Show[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdAlgebraForUnit", "tail" : ": BoundedSemilattice[Unit] with CommutativeGroup[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdAlgebraForUnit", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdAlgebraForUnit:cats.kernel.BoundedSemilattice[Unit]withcats.kernel.CommutativeGroup[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUnit", "tail" : ": Order[Unit] with Hash[Unit] with LowerBounded[Unit] with UpperBounded[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdOrderForUnit", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForUnit:cats.kernel.Order[Unit]withcats.kernel.Hash[Unit]withcats.kernel.LowerBounded[Unit]withcats.kernel.UpperBounded[Unit]", "kind" : "implicit val"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean] with Hash[Boolean] with LowerBounded[Boolean] with UpperBounded[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]withcats.kernel.Hash[Boolean]withcats.kernel.LowerBounded[Boolean]withcats.kernel.UpperBounded[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double] with Hash[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]withcats.kernel.Hash[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float] with Hash[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]withcats.kernel.Hash[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForShort", "tail" : ": Show[Short]", "member" : "cats.instances.ShortInstances.catsStdShowForShort", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForShort:cats.Show[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForShort", "tail" : ": CommutativeGroup[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdGroupForShort", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForShort:cats.kernel.CommutativeGroup[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForShort", "tail" : ": Order[Short] with Hash[Short] with LowerBounded[Short] with UpperBounded[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdOrderForShort", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForShort:cats.kernel.Order[Short]withcats.kernel.Hash[Short]withcats.kernel.LowerBounded[Short]withcats.kernel.UpperBounded[Short]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long] with Hash[Long] with LowerBounded[Long] with UpperBounded[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]withcats.kernel.Hash[Long]withcats.kernel.LowerBounded[Long]withcats.kernel.UpperBounded[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForByte", "tail" : ": Show[Byte]", "member" : "cats.instances.ByteInstances.catsStdShowForByte", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForByte:cats.Show[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForByte", "tail" : ": CommutativeGroup[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdGroupForByte", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForByte:cats.kernel.CommutativeGroup[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForByte", "tail" : ": Order[Byte] with Hash[Byte] with LowerBounded[Byte] with UpperBounded[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdOrderForByte", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForByte:cats.kernel.Order[Byte]withcats.kernel.Hash[Byte]withcats.kernel.LowerBounded[Byte]withcats.kernel.UpperBounded[Byte]", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int] with Hash[Int] with LowerBounded[Int] with UpperBounded[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]withcats.kernel.Hash[Int]withcats.kernel.LowerBounded[Int]withcats.kernel.UpperBounded[Int]", "kind" : "implicit val"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "checkAll", "tail" : "(name: String, ruleSet: RuleSet)(config: PropertyCheckConfiguration, prettifier: Prettifier, pos: Position): Unit", "member" : "org.typelevel.discipline.scalatest.FunSuiteDiscipline.checkAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#checkAll(name:String,ruleSet:org.typelevel.discipline.Laws#RuleSet)(implicitconfig:FunSuiteDiscipline.this.PropertyCheckConfiguration,implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "convertConfiguration", "tail" : "(config: PropertyCheckConfiguration): org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "member" : "org.typelevel.discipline.scalatest.Discipline.convertConfiguration", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertConfiguration(config:Discipline.this.PropertyCheckConfiguration):org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "kind" : "final def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), genAndNameF: (Gen[F], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),genAndNameF:(org.scalacheck.Gen[F],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], genF: Gen[F], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],genF:org.scalacheck.Gen[F],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, nameF: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,nameF:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,E,ASSERTION](fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,D,ASSERTION](fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,ASSERTION](nameA:String,nameB:String,nameC:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,C,ASSERTION](fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,ASSERTION](nameA:String,nameB:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,B,ASSERTION](fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,ASSERTION](genA:org.scalacheck.Gen[A],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,ASSERTION](nameA:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll[A,ASSERTION](fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(configParams: PropertyCheckConfigParam*): ConfiguredPropertyCheck", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#forAll(configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*):ScalaCheckDrivenPropertyChecks.this.ConfiguredPropertyCheck", "kind" : "def"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "whenever", "tail" : "(condition: Boolean)(fun: => T)(wa: WheneverAsserting[T]): Result", "member" : "org.scalatest.prop.Whenever.whenever", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#whenever[T](condition:Boolean)(fun:=>T)(implicitwa:org.scalatest.enablers.WheneverAsserting[T]):wa.Result", "kind" : "def"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.of", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToRegexWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToStringShouldWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.the", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#between[K,V,JMAP[k,v]<:java.util.Map[k,v]](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#between[E,C[_]](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#every[K,V,JMAP[k,v]<:java.util.Map[k,v]](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#every[K,V,MAP[k,v]<:scala.collection.Map[k,v]](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#every[E,C[_]](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.should.Matchers.message", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: => Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.should.Matchers.thrownBy", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneElementOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atMostOneElementOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderElementsOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#inOrderElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrder", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allElementsOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#allElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderOnly", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.only", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsInOrderAs", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#theSameElementsInOrderAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsAs", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#theSameElementsAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noElementsOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#noElementsOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noneOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneElementOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atLeastOneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneElementOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#oneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.should.Matchers.definedAt", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>=", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<=", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.should.Matchers.regex", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.should.Matchers.theSameInstanceAs", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.should.Matchers.value", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.should.Matchers.key", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.should.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.funsuite.AnyFunSuite.toString", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testDataFor", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.styleName", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testsFor", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.run", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTests", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.tags", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTest", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testNames", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.ignore", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.test", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerIgnoredTest", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerTest", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.markup", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.alert", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.note", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.info", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createDateTime", "tail" : "(seconds: Int, minutes: Int, hours: Int, dayOfMonth: Int, month: Int, year: Int): DateTime", "member" : "cron4s.testkit.DateTimeTestKitBase.createDateTime", "link" : "cron4s\/testkit\/DateTimeNodeTestKit.html#createDateTime(seconds:Int,minutes:Int,hours:Int,dayOfMonth:Int,month:Int,year:Int):DateTime", "kind" : "abstract def"}], "class" : "cron4s\/testkit\/DateTimeNodeTestKit.html", "kind" : "class"}, {"name" : "cron4s.testkit.DateTimeTestKitBase", "trait" : "cron4s\/testkit\/DateTimeTestKitBase.html", "kind" : "trait", "members_trait" : [{"label" : "arbitraryDateTime", "tail" : ": Arbitrary[DateTime]", "member" : "cron4s.testkit.DateTimeTestKitBase.arbitraryDateTime", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#arbitraryDateTime:org.scalacheck.Arbitrary[DateTime]", "kind" : "implicit final lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createDateTime", "tail" : "(seconds: Int, minutes: Int, hours: Int, dayOfMonth: Int, month: Int, year: Int): DateTime", "member" : "cron4s.testkit.DateTimeTestKitBase.createDateTime", "link" : "cron4s\/testkit\/DateTimeTestKitBase.html#createDateTime(seconds:Int,minutes:Int,hours:Int,dayOfMonth:Int,month:Int,year:Int):DateTime", "kind" : "abstract def"}], "shortDescription" : "Created by alonsodomin on 29\/08\/2016."}, {"name" : "cron4s.testkit.IsDateTimeTestKit", "shortDescription" : "Created by alonsodomin on 29\/08\/2016.", "members_class" : [{"label" : "ConfiguredPropertyCheck", "tail" : "", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.ConfiguredPropertyCheck", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ConfiguredPropertyCheckextendsAnyRef", "kind" : "class"}, {"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.StringShouldWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnyShouldWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForCollectedString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForCollectedString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForCollectedString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfCollectedAny", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedArray", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedAny", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfContainWordForCollectedAny", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfNotWordForCollectedAny", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.Collected", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForExtent", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.TheSameInstanceAsPhrase", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ValueWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.KeyWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForAny", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.HavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"member" : "cron4s.testkit.IsDateTimeTestKit#<init>", "error" : "unsupported entity"}, {"label" : "arbitraryDateTime", "tail" : ": Arbitrary[DateTime]", "member" : "cron4s.testkit.DateTimeTestKitBase.arbitraryDateTime", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryDateTime:org.scalacheck.Arbitrary[DateTime]", "kind" : "implicit final lazy val"}, {"label" : "arbitraryDayOfWeek", "tail" : ": Arbitrary[DayOfWeek]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryDayOfWeek", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryDayOfWeek:org.scalacheck.Arbitrary[cron4s.CronField.DayOfWeek]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonth", "tail" : ": Arbitrary[Month]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryMonth", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryMonth:org.scalacheck.Arbitrary[cron4s.CronField.Month]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDayOfMonth", "tail" : ": Arbitrary[DayOfMonth]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryDayOfMonth", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryDayOfMonth:org.scalacheck.Arbitrary[cron4s.CronField.DayOfMonth]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHour", "tail" : ": Arbitrary[Hour]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryHour", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryHour:org.scalacheck.Arbitrary[cron4s.CronField.Hour]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinute", "tail" : ": Arbitrary[Minute]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitraryMinute", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryMinute:org.scalacheck.Arbitrary[cron4s.CronField.Minute]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecond", "tail" : ": Arbitrary[Second]", "member" : "cron4s.testkit.gen.ArbitraryCronField.arbitrarySecond", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitrarySecond:org.scalacheck.Arbitrary[cron4s.CronField.Second]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDayOfWeekValue", "tail" : ": Arbitrary[CronFieldValue[DayOfWeek]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryDayOfWeekValue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryDayOfWeekValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.DayOfWeek]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMonthValue", "tail" : ": Arbitrary[CronFieldValue[Month]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryMonthValue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryMonthValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Month]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryDayOfMonthValue", "tail" : ": Arbitrary[CronFieldValue[DayOfMonth]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryDayOfMonthValue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryDayOfMonthValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.DayOfMonth]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryHourValue", "tail" : ": Arbitrary[CronFieldValue[Hour]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryHourValue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryHourValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Hour]]", "kind" : "implicit lazy val"}, {"label" : "arbitraryMinuteValue", "tail" : ": Arbitrary[CronFieldValue[Minute]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitraryMinuteValue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitraryMinuteValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Minute]]", "kind" : "implicit lazy val"}, {"label" : "arbitrarySecondValue", "tail" : ": Arbitrary[CronFieldValue[Second]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.arbitrarySecondValue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#arbitrarySecondValue:org.scalacheck.Arbitrary[cron4s.testkit.CronFieldValue[cron4s.CronField.Second]]", "kind" : "implicit lazy val"}, {"label" : "cronFieldValueGen", "tail" : "(unit: CronUnit[F])(ev: Enumerated[CronUnit[F]]): Gen[CronFieldValue[F]]", "member" : "cron4s.testkit.gen.ArbitraryCronFieldValues.cronFieldValueGen", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#cronFieldValueGen[F<:cron4s.CronField](unit:cron4s.CronUnit[F])(implicitev:cron4s.base.Enumerated[cron4s.CronUnit[F]]):org.scalacheck.Gen[cron4s.testkit.CronFieldValue[F]]", "kind" : "def"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.Cron4sLawSuite.generatorDrivenConfig", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#generatorDrivenConfig:Cron4sLawSuite.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "catsSyntaxParallelFoldMapA", "tail" : "(ta: T[A]): ParallelFoldMapAOps[T, A]", "member" : "cats.syntax.ParallelFoldMapASyntax.catsSyntaxParallelFoldMapA", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxParallelFoldMapA[T[_],A](ta:T[A]):cats.syntax.ParallelFoldMapAOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxWriterId", "tail" : "(a: A): WriterIdSyntax[A]", "member" : "cats.syntax.WriterSyntax.catsSyntaxWriterId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxWriterId[A](a:A):cats.syntax.WriterIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxVectors", "tail" : "(va: Vector[A]): VectorOps[A]", "member" : "cats.syntax.VectorSyntax.catsSyntaxVectors", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxVectors[A](va:Vector[A]):cats.syntax.VectorOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxValidatedId", "tail" : "(a: A): ValidatedIdSyntax[A]", "member" : "cats.syntax.ValidatedSyntax.catsSyntaxValidatedId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxValidatedId[A](a:A):cats.syntax.ValidatedIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "toNonEmptyTraverseOps", "tail" : "(target: F[C])(tc: NonEmptyTraverse[F]): Ops[F, C] { type TypeClassType = cats.NonEmptyTraverse[F] }", "member" : "cats.NonEmptyTraverse.ToNonEmptyTraverseOps.toNonEmptyTraverseOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toNonEmptyTraverseOps[F[_],C](target:F[C])(implicittc:cats.NonEmptyTraverse[F]):cats.NonEmptyTraverse.Ops[F,C]{typeTypeClassType=cats.NonEmptyTraverse[F]}", "kind" : "implicit def"}, {"label" : "toTraverseOps", "tail" : "(target: F[C])(tc: Traverse[F]): Ops[F, C] { type TypeClassType = cats.Traverse[F] }", "member" : "cats.Traverse.ToTraverseOps.toTraverseOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toTraverseOps[F[_],C](target:F[C])(implicittc:cats.Traverse[F]):cats.Traverse.Ops[F,C]{typeTypeClassType=cats.Traverse[F]}", "kind" : "implicit def"}, {"label" : "toStrongOps", "tail" : "(target: F[A, B])(tc: Strong[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Strong[F] }", "member" : "cats.arrow.Strong.ToStrongOps.toStrongOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toStrongOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Strong[F]):cats.arrow.Strong.Ops[F,A,B]{typeTypeClassType=cats.arrow.Strong[F]}", "kind" : "implicit def"}, {"label" : "showInterpolator", "tail" : "(sc: StringContext): ShowInterpolator", "member" : "cats.syntax.ShowSyntax.showInterpolator", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#showInterpolator(sc:StringContext):cats.Show.ShowInterpolator", "kind" : "implicit final def"}, {"label" : "toShow", "tail" : "(target: A)(tc: Show[A]): Ops[A]", "member" : "cats.Show.ToShowOps.toShow", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toShow[A](target:A)(implicittc:cats.Show[A]):cats.Show.Ops[A]", "kind" : "implicit def"}, {"label" : "toSemigroupKOps", "tail" : "(target: F[A])(tc: SemigroupK[F]): Ops[F, A] { type TypeClassType = cats.SemigroupK[F] }", "member" : "cats.SemigroupK.ToSemigroupKOps.toSemigroupKOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toSemigroupKOps[F[_],A](target:F[A])(implicittc:cats.SemigroupK[F]):cats.SemigroupK.Ops[F,A]{typeTypeClassType=cats.SemigroupK[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxNestedReducible", "tail" : "(fga: F[G[A]])(arg0: Reducible[F]): NestedReducibleOps[F, G, A]", "member" : "cats.syntax.ReducibleSyntax.catsSyntaxNestedReducible", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxNestedReducible[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Reducible[F]):cats.syntax.NestedReducibleOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toReducibleOps", "tail" : "(target: F[D])(tc: Reducible[F]): Ops[F, D] { type TypeClassType = cats.Reducible[F] }", "member" : "cats.Reducible.ToReducibleOps.toReducibleOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toReducibleOps[F[_],D](target:F[D])(implicittc:cats.Reducible[F]):cats.Reducible.Ops[F,D]{typeTypeClassType=cats.Reducible[F]}", "kind" : "implicit def"}, {"label" : "toProfunctorOps", "tail" : "(target: F[A, B])(tc: Profunctor[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Profunctor[F] }", "member" : "cats.arrow.Profunctor.ToProfunctorOps.toProfunctorOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toProfunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Profunctor[F]):cats.arrow.Profunctor.Ops[F,A,B]{typeTypeClassType=cats.arrow.Profunctor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxParallelAp", "tail" : "(ma: M[A])(arg0: FlatMap[M]): ParallelApOps[M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelAp", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxParallelAp[M[_],A](ma:M[A])(implicitevidence$4:cats.FlatMap[M]):cats.syntax.ParallelApOps[M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelSequence", "tail" : "(tma: T[M[A]])(arg0: Traverse[T], arg1: Monad[M]): ParallelSequenceOps[T, M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelSequence", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxParallelSequence[T[_],M[_],A](tma:T[M[A]])(implicitevidence$2:cats.Traverse[T],implicitevidence$3:cats.Monad[M]):cats.syntax.ParallelSequenceOps[T,M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelTraverse", "tail" : "(ta: T[A])(arg0: Traverse[T]): ParallelTraversableOps[T, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelTraverse", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxParallelTraverse[T[_],A](ta:T[A])(implicitevidence$1:cats.Traverse[T]):cats.syntax.ParallelTraversableOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Parallel", "tail" : "(t22: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20], M[A21])): Tuple22ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple22Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple22Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20],M[A21])):cats.syntax.Tuple22ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Parallel", "tail" : "(t21: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20])): Tuple21ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple21Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple21Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20])):cats.syntax.Tuple21ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Parallel", "tail" : "(t20: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19])): Tuple20ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple20Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple20Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19])):cats.syntax.Tuple20ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Parallel", "tail" : "(t19: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18])): Tuple19ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple19Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple19Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18])):cats.syntax.Tuple19ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Parallel", "tail" : "(t18: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17])): Tuple18ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple18Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple18Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17])):cats.syntax.Tuple18ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Parallel", "tail" : "(t17: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16])): Tuple17ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple17Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple17Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16])):cats.syntax.Tuple17ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Parallel", "tail" : "(t16: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15])): Tuple16ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple16Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple16Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15])):cats.syntax.Tuple16ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Parallel", "tail" : "(t15: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14])): Tuple15ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple15Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple15Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14])):cats.syntax.Tuple15ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Parallel", "tail" : "(t14: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13])): Tuple14ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple14Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple14Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13])):cats.syntax.Tuple14ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Parallel", "tail" : "(t13: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12])): Tuple13ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple13Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple13Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12])):cats.syntax.Tuple13ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Parallel", "tail" : "(t12: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11])): Tuple12ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple12Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple12Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11])):cats.syntax.Tuple12ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Parallel", "tail" : "(t11: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10])): Tuple11ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple11Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple11Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10])):cats.syntax.Tuple11ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Parallel", "tail" : "(t10: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9])): Tuple10ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple10Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple10Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9])):cats.syntax.Tuple10ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Parallel", "tail" : "(t9: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8])): Tuple9ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple9Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple9Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8])):cats.syntax.Tuple9ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Parallel", "tail" : "(t8: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7])): Tuple8ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple8Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple8Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7])):cats.syntax.Tuple8ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Parallel", "tail" : "(t7: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6])): Tuple7ParallelOps[M, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple7Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple7Parallel[M[_],A0,A1,A2,A3,A4,A5,A6](t7:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6])):cats.syntax.Tuple7ParallelOps[M,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Parallel", "tail" : "(t6: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5])): Tuple6ParallelOps[M, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple6Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple6Parallel[M[_],A0,A1,A2,A3,A4,A5](t6:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5])):cats.syntax.Tuple6ParallelOps[M,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Parallel", "tail" : "(t5: (M[A0], M[A1], M[A2], M[A3], M[A4])): Tuple5ParallelOps[M, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple5Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple5Parallel[M[_],A0,A1,A2,A3,A4](t5:(M[A0],M[A1],M[A2],M[A3],M[A4])):cats.syntax.Tuple5ParallelOps[M,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Parallel", "tail" : "(t4: (M[A0], M[A1], M[A2], M[A3])): Tuple4ParallelOps[M, A0, A1, A2, A3]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple4Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple4Parallel[M[_],A0,A1,A2,A3](t4:(M[A0],M[A1],M[A2],M[A3])):cats.syntax.Tuple4ParallelOps[M,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Parallel", "tail" : "(t3: (M[A0], M[A1], M[A2])): Tuple3ParallelOps[M, A0, A1, A2]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple3Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple3Parallel[M[_],A0,A1,A2](t3:(M[A0],M[A1],M[A2])):cats.syntax.Tuple3ParallelOps[M,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Parallel", "tail" : "(t2: (M[A0], M[A1])): Tuple2ParallelOps[M, A0, A1]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple2Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple2Parallel[M[_],A0,A1](t2:(M[A0],M[A1])):cats.syntax.Tuple2ParallelOps[M,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Parallel", "tail" : "(t1: (M[A0])): Tuple1ParallelOps[M, A0]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple1Parallel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple1Parallel[M[_],A0](t1:(M[A0],)):cats.syntax.Tuple1ParallelOps[M,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxOrder", "tail" : "(a: A)(arg0: Order[A]): OrderOps[A]", "member" : "cats.syntax.OrderSyntax.catsSyntaxOrder", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxOrder[A](a:A)(implicitevidence$1:cats.Order[A]):cats.syntax.OrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxPartialOrder", "tail" : "(a: A)(arg0: PartialOrder[A]): PartialOrderOps[A]", "member" : "cats.syntax.PartialOrderSyntax.catsSyntaxPartialOrder", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxPartialOrder[A](a:A)(implicitevidence$1:cats.PartialOrder[A]):cats.syntax.PartialOrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOption", "tail" : "(oa: Option[A]): OptionOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxOption[A](oa:Option[A]):cats.syntax.OptionOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOptionId", "tail" : "(a: A): OptionIdOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOptionId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxOptionId[A](a:A):cats.syntax.OptionIdOps[A]", "kind" : "implicit final def"}, {"label" : "none", "tail" : "(): Option[A]", "member" : "cats.syntax.OptionSyntax.none", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#none[A]:Option[A]", "kind" : "final def"}, {"label" : "catsSyntaxMonoid", "tail" : "(a: A)(arg0: Monoid[A]): MonoidOps[A]", "member" : "cats.syntax.MonoidSyntax.catsSyntaxMonoid", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxMonoid[A](a:A)(implicitevidence$1:cats.Monoid[A]):cats.syntax.MonoidOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadIdOps", "tail" : "(a: A): MonadIdOps[A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonadIdOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxMonadIdOps[A](a:A):cats.syntax.MonadIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonad", "tail" : "(fa: F[A]): MonadOps[F, A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonad", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxMonad[F[_],A](fa:F[A]):cats.syntax.MonadOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadErrorRethrow", "tail" : "(fea: F[Either[E, A]])(F: MonadError[F, _ >: E]): MonadErrorRethrowOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadErrorRethrow", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxMonadErrorRethrow[F[_],E,A](fea:F[Either[E,A]])(implicitF:cats.MonadError[F,_>:E]):cats.syntax.MonadErrorRethrowOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadError", "tail" : "(fa: F[A])(F: MonadError[F, E]): MonadErrorOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadError", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxMonadError[F[_],E,A](fa:F[A])(implicitF:cats.MonadError[F,E]):cats.syntax.MonadErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxList", "tail" : "(la: List[A]): ListOps[A]", "member" : "cats.syntax.ListSyntax.catsSyntaxList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxList[A](la:List[A]):cats.syntax.ListOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIorId", "tail" : "(a: A): IorIdOps[A]", "member" : "cats.syntax.IorSyntax.catsSyntaxIorId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxIorId[A](a:A):cats.syntax.IorIdOps[A]", "kind" : "implicit final def"}, {"label" : "toInvariantOps", "tail" : "(target: F[A])(tc: Invariant[F]): Ops[F, A] { type TypeClassType = cats.Invariant[F] }", "member" : "cats.Invariant.ToInvariantOps.toInvariantOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toInvariantOps[F[_],A](target:F[A])(implicittc:cats.Invariant[F]):cats.Invariant.Ops[F,A]{typeTypeClassType=cats.Invariant[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxHash", "tail" : "(a: A)(arg0: Hash[A]): HashOps[A]", "member" : "cats.syntax.HashSyntax.catsSyntaxHash", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxHash[A](a:A)(implicitevidence$1:cats.Hash[A]):cats.syntax.HashOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxGroup", "tail" : "(a: A)(arg0: Group[A]): GroupOps[A]", "member" : "cats.syntax.GroupSyntax.catsSyntaxGroup", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxGroup[A](a:A)(implicitevidence$1:cats.Group[A]):cats.syntax.GroupOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxSemigroup", "tail" : "(a: A)(arg0: Semigroup[A]): SemigroupOps[A]", "member" : "cats.syntax.SemigroupSyntax.catsSyntaxSemigroup", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxSemigroup[A](a:A)(implicitevidence$1:cats.Semigroup[A]):cats.syntax.SemigroupOps[A]", "kind" : "implicit final def"}, {"label" : "toFunctorOps", "tail" : "(target: F[A])(tc: Functor[F]): Ops[F, A] { type TypeClassType = cats.Functor[F] }", "member" : "cats.Functor.ToFunctorOps.toFunctorOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toFunctorOps[F[_],A](target:F[A])(implicittc:cats.Functor[F]):cats.Functor.Ops[F,A]{typeTypeClassType=cats.Functor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFoldOps", "tail" : "(fa: F[A])(arg0: Foldable[F]): FoldableOps[F, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxFoldOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxFoldOps[F[_],A](fa:F[A])(implicitevidence$2:cats.Foldable[F]):cats.syntax.FoldableOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedFoldable", "tail" : "(fga: F[G[A]])(arg0: Foldable[F]): NestedFoldableOps[F, G, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxNestedFoldable", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxNestedFoldable[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Foldable[F]):cats.syntax.NestedFoldableOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toUnorderedFoldableOps", "tail" : "(target: F[A])(tc: UnorderedFoldable[F]): Ops[F, A] { type TypeClassType = cats.UnorderedFoldable[F] }", "member" : "cats.UnorderedFoldable.ToUnorderedFoldableOps.toUnorderedFoldableOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toUnorderedFoldableOps[F[_],A](target:F[A])(implicittc:cats.UnorderedFoldable[F]):cats.UnorderedFoldable.Ops[F,A]{typeTypeClassType=cats.UnorderedFoldable[F]}", "kind" : "implicit def"}, {"label" : "toFoldableOps", "tail" : "(target: F[D])(tc: Foldable[F]): Ops[F, D] { type TypeClassType = cats.Foldable[F] }", "member" : "cats.Foldable.ToFoldableOps.toFoldableOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toFoldableOps[F[_],D](target:F[D])(implicittc:cats.Foldable[F]):cats.Foldable.Ops[F,D]{typeTypeClassType=cats.Foldable[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFlatMapOps", "tail" : "(fa: F[A])(arg0: FlatMap[F]): FlatMapOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxFlatMapOps[F[_],A](fa:F[A])(implicitevidence$3:cats.FlatMap[F]):cats.syntax.FlatMapOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatMapIdOps", "tail" : "(a: A): FlatMapIdOps[A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapIdOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxFlatMapIdOps[A](a:A):cats.syntax.FlatMapIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIfM", "tail" : "(fa: F[Boolean])(arg0: FlatMap[F]): IfMOps[F]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxIfM", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxIfM[F[_]](fa:F[Boolean])(implicitevidence$2:cats.FlatMap[F]):cats.syntax.IfMOps[F]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatten", "tail" : "(ffa: F[F[A]])(arg0: FlatMap[F]): FlattenOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatten", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxFlatten[F[_],A](ffa:F[F[A]])(implicitevidence$1:cats.FlatMap[F]):cats.syntax.FlattenOps[F,A]", "kind" : "implicit final def"}, {"label" : "toFlatMapOps", "tail" : "(target: F[C])(tc: FlatMap[F]): Ops[F, C] { type TypeClassType = cats.FlatMap[F] }", "member" : "cats.FlatMap.ToFlatMapOps.toFlatMapOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toFlatMapOps[F[_],C](target:F[C])(implicittc:cats.FlatMap[F]):cats.FlatMap.Ops[F,C]{typeTypeClassType=cats.FlatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxEq", "tail" : "(a: A)(arg0: Eq[A]): EqOps[A]", "member" : "cats.syntax.EqSyntax.catsSyntaxEq", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxEq[A](a:A)(implicitevidence$1:cats.Eq[A]):cats.syntax.EqOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxEitherId", "tail" : "(a: A): EitherIdOps[A]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxEitherId[A](a:A):cats.syntax.EitherIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxRight", "tail" : "(right: Right[A, B]): RightOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxRight", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxRight[A,B](right:Right[A,B]):cats.syntax.RightOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxLeft", "tail" : "(left: Left[A, B]): LeftOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxLeft", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxLeft[A,B](left:Left[A,B]):cats.syntax.LeftOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherObject", "tail" : "(either: Either.type): EitherObjectOps", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherObject", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxEitherObject(either:Either.type):cats.syntax.EitherObjectOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxEither", "tail" : "(eab: Either[A, B]): EitherOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxEither[A,B](eab:Either[A,B]):cats.syntax.EitherOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherK", "tail" : "(a: F[A]): EitherKOps[F, A]", "member" : "cats.syntax.EitherKSyntax.catsSyntaxEitherK", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxEitherK[F[_],A](a:F[A]):cats.syntax.EitherKOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantSemigroupal", "tail" : "(fa: F[A])(F: ContravariantSemigroupal[F]): Ops[F, A]", "member" : "cats.syntax.ContravariantSemigroupalSyntax.catsSyntaxContravariantSemigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxContravariantSemigroupal[F[_],A](fa:F[A])(implicitF:cats.ContravariantSemigroupal[F]):cats.ContravariantSemigroupal.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantMonoidal", "tail" : "(fa: F[A])(F: ContravariantMonoidal[F]): ContravariantMonoidalOps[F, A]", "member" : "cats.syntax.ContravariantMonoidalSyntax.catsSyntaxContravariantMonoidal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxContravariantMonoidal[F[_],A](fa:F[A])(implicitF:cats.ContravariantMonoidal[F]):cats.syntax.ContravariantMonoidalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxDistributiveOps", "tail" : "(fa: F[A])(arg0: Functor[F]): DistributiveOps[F, A]", "member" : "cats.syntax.DistributiveSyntax.catsSyntaxDistributiveOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxDistributiveOps[F[_],A](fa:F[A])(implicitevidence$1:cats.Functor[F]):cats.syntax.DistributiveOps[F,A]", "kind" : "implicit final def"}, {"label" : "toDistributiveOps", "tail" : "(target: F[A])(tc: Distributive[F]): Ops[F, A] { type TypeClassType = cats.Distributive[F] }", "member" : "cats.Distributive.ToDistributiveOps.toDistributiveOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toDistributiveOps[F[_],A](target:F[A])(implicittc:cats.Distributive[F]):cats.Distributive.Ops[F,A]{typeTypeClassType=cats.Distributive[F]}", "kind" : "implicit def"}, {"label" : "toContravariantOps", "tail" : "(target: F[A])(tc: Contravariant[F]): Ops[F, A] { type TypeClassType = cats.Contravariant[F] }", "member" : "cats.Contravariant.ToContravariantOps.toContravariantOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toContravariantOps[F[_],A](target:F[A])(implicittc:cats.Contravariant[F]):cats.Contravariant.Ops[F,A]{typeTypeClassType=cats.Contravariant[F]}", "kind" : "implicit def"}, {"label" : "toComposeOps", "tail" : "(target: F[B, D])(tc: Compose[F]): Ops[F, B, D] { type TypeClassType = cats.arrow.Compose[F] }", "member" : "cats.arrow.Compose.ToComposeOps.toComposeOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toComposeOps[F[_,_],B,D](target:F[B,D])(implicittc:cats.arrow.Compose[F]):cats.arrow.Compose.Ops[F,B,D]{typeTypeClassType=cats.arrow.Compose[F]}", "kind" : "implicit def"}, {"label" : "toComonadOps", "tail" : "(target: F[A])(tc: Comonad[F]): Ops[F, A] { type TypeClassType = cats.Comonad[F] }", "member" : "cats.Comonad.ToComonadOps.toComonadOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toComonadOps[F[_],A](target:F[A])(implicittc:cats.Comonad[F]):cats.Comonad.Ops[F,A]{typeTypeClassType=cats.Comonad[F]}", "kind" : "implicit def"}, {"label" : "toCoflatMapOps", "tail" : "(target: F[A])(tc: CoflatMap[F]): Ops[F, A] { type TypeClassType = cats.CoflatMap[F] }", "member" : "cats.CoflatMap.ToCoflatMapOps.toCoflatMapOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toCoflatMapOps[F[_],A](target:F[A])(implicittc:cats.CoflatMap[F]):cats.CoflatMap.Ops[F,A]{typeTypeClassType=cats.CoflatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxSemigroupal", "tail" : "(fa: F[A])(F: Semigroupal[F]): SemigroupalOps[F, A]", "member" : "cats.syntax.SemigroupalSyntax.catsSyntaxSemigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxSemigroupal[F[_],A](fa:F[A])(implicitF:cats.Semigroupal[F]):cats.syntax.SemigroupalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxBitraverse", "tail" : "(fab: F[A, B])(arg0: Bitraverse[F]): BitraverseOps[F, A, B]", "member" : "cats.syntax.BitraverseSyntax.catsSyntaxBitraverse", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxBitraverse[F[_,_],A,B](fab:F[A,B])(implicitevidence$1:cats.Bitraverse[F]):cats.syntax.BitraverseOps[F,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedBitraverse", "tail" : "(fgagb: F[G[A], G[B]])(arg0: Bitraverse[F]): NestedBitraverseOps[F, G, A, B]", "member" : "cats.syntax.BitraverseSyntax1.catsSyntaxNestedBitraverse", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxNestedBitraverse[F[_,_],G[_],A,B](fgagb:F[G[A],G[B]])(implicitevidence$2:cats.Bitraverse[F]):cats.syntax.NestedBitraverseOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "toBifoldableOps", "tail" : "(target: F[A, B])(tc: Bifoldable[F]): Ops[F, A, B] { type TypeClassType = cats.Bifoldable[F] }", "member" : "cats.Bifoldable.ToBifoldableOps.toBifoldableOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toBifoldableOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifoldable[F]):cats.Bifoldable.Ops[F,A,B]{typeTypeClassType=cats.Bifoldable[F]}", "kind" : "implicit def"}, {"label" : "toBifunctorOps", "tail" : "(target: F[A, B])(tc: Bifunctor[F]): Ops[F, A, B] { type TypeClassType = cats.Bifunctor[F] }", "member" : "cats.Bifunctor.ToBifunctorOps.toBifunctorOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toBifunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifunctor[F]):cats.Bifunctor.Ops[F,A,B]{typeTypeClassType=cats.Bifunctor[F]}", "kind" : "implicit def"}, {"label" : "toArrowChoiceOps", "tail" : "(target: F[A, E])(tc: ArrowChoice[F]): Ops[F, A, E] { type TypeClassType = cats.arrow.ArrowChoice[F] }", "member" : "cats.arrow.ArrowChoice.ToArrowChoiceOps.toArrowChoiceOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toArrowChoiceOps[F[_,_],A,E](target:F[A,E])(implicittc:cats.arrow.ArrowChoice[F]):cats.arrow.ArrowChoice.Ops[F,A,E]{typeTypeClassType=cats.arrow.ArrowChoice[F]}", "kind" : "implicit def"}, {"label" : "toArrowOps", "tail" : "(target: F[A, B])(tc: Arrow[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Arrow[F] }", "member" : "cats.arrow.Arrow.ToArrowOps.toArrowOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toArrowOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Arrow[F]):cats.arrow.Arrow.Ops[F,A,B]{typeTypeClassType=cats.arrow.Arrow[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxApplyOps", "tail" : "(fa: F[A]): ApplyOps[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApplyOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxApplyOps[F[_],A](fa:F[A]):cats.syntax.ApplyOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApply", "tail" : "(fa: F[A])(F: Apply[F]): Ops[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApply", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxApply[F[_],A](fa:F[A])(implicitF:cats.Apply[F]):cats.Apply.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Semigroupal", "tail" : "(t22: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20], F[A21])): Tuple22SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple22Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple22Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20],F[A21])):cats.syntax.Tuple22SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Semigroupal", "tail" : "(t21: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20])): Tuple21SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple21Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple21Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20])):cats.syntax.Tuple21SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Semigroupal", "tail" : "(t20: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19])): Tuple20SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple20Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple20Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19])):cats.syntax.Tuple20SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Semigroupal", "tail" : "(t19: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18])): Tuple19SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple19Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple19Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18])):cats.syntax.Tuple19SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Semigroupal", "tail" : "(t18: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17])): Tuple18SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple18Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple18Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17])):cats.syntax.Tuple18SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Semigroupal", "tail" : "(t17: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16])): Tuple17SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple17Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple17Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16])):cats.syntax.Tuple17SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Semigroupal", "tail" : "(t16: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15])): Tuple16SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple16Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple16Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15])):cats.syntax.Tuple16SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Semigroupal", "tail" : "(t15: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14])): Tuple15SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple15Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple15Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14])):cats.syntax.Tuple15SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Semigroupal", "tail" : "(t14: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13])): Tuple14SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple14Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple14Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13])):cats.syntax.Tuple14SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Semigroupal", "tail" : "(t13: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12])): Tuple13SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple13Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple13Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12])):cats.syntax.Tuple13SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Semigroupal", "tail" : "(t12: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11])): Tuple12SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple12Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple12Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11])):cats.syntax.Tuple12SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Semigroupal", "tail" : "(t11: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10])): Tuple11SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple11Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple11Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10])):cats.syntax.Tuple11SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Semigroupal", "tail" : "(t10: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9])): Tuple10SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple10Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple10Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9])):cats.syntax.Tuple10SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Semigroupal", "tail" : "(t9: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8])): Tuple9SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple9Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple9Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8])):cats.syntax.Tuple9SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Semigroupal", "tail" : "(t8: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7])): Tuple8SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple8Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple8Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7])):cats.syntax.Tuple8SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Semigroupal", "tail" : "(t7: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6])): Tuple7SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple7Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple7Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6](t7:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6])):cats.syntax.Tuple7SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Semigroupal", "tail" : "(t6: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5])): Tuple6SemigroupalOps[F, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple6Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple6Semigroupal[F[_],A0,A1,A2,A3,A4,A5](t6:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5])):cats.syntax.Tuple6SemigroupalOps[F,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Semigroupal", "tail" : "(t5: (F[A0], F[A1], F[A2], F[A3], F[A4])): Tuple5SemigroupalOps[F, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple5Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple5Semigroupal[F[_],A0,A1,A2,A3,A4](t5:(F[A0],F[A1],F[A2],F[A3],F[A4])):cats.syntax.Tuple5SemigroupalOps[F,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Semigroupal", "tail" : "(t4: (F[A0], F[A1], F[A2], F[A3])): Tuple4SemigroupalOps[F, A0, A1, A2, A3]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple4Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple4Semigroupal[F[_],A0,A1,A2,A3](t4:(F[A0],F[A1],F[A2],F[A3])):cats.syntax.Tuple4SemigroupalOps[F,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Semigroupal", "tail" : "(t3: (F[A0], F[A1], F[A2])): Tuple3SemigroupalOps[F, A0, A1, A2]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple3Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple3Semigroupal[F[_],A0,A1,A2](t3:(F[A0],F[A1],F[A2])):cats.syntax.Tuple3SemigroupalOps[F,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Semigroupal", "tail" : "(t2: (F[A0], F[A1])): Tuple2SemigroupalOps[F, A0, A1]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple2Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple2Semigroupal[F[_],A0,A1](t2:(F[A0],F[A1])):cats.syntax.Tuple2SemigroupalOps[F,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Semigroupal", "tail" : "(t1: (F[A0])): Tuple1SemigroupalOps[F, A0]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple1Semigroupal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxTuple1Semigroupal[F[_],A0](t1:(F[A0],)):cats.syntax.Tuple1SemigroupalOps[F,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxApplicativeError", "tail" : "(fa: F[A])(F: ApplicativeError[F, E]): ApplicativeErrorOps[F, E, A]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeError", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxApplicativeError[F[_],E,A](fa:F[A])(implicitF:cats.ApplicativeError[F,E]):cats.syntax.ApplicativeErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeErrorId", "tail" : "(e: E): ApplicativeErrorIdOps[E]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeErrorId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxApplicativeErrorId[E](e:E):cats.syntax.ApplicativeErrorIdOps[E]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicative", "tail" : "(fa: F[A]): ApplicativeOps[F, A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicative", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxApplicative[F[_],A](fa:F[A]):cats.syntax.ApplicativeOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeId", "tail" : "(a: A): ApplicativeIdOps[A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicativeId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxApplicativeId[A](a:A):cats.syntax.ApplicativeIdOps[A]", "kind" : "implicit final def"}, {"label" : "toAlignOps", "tail" : "(target: F[A])(tc: Align[F]): Ops[F, A] { type TypeClassType = cats.Align[F] }", "member" : "cats.Align.ToAlignOps.toAlignOps", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toAlignOps[F[_],A](target:F[A])(implicittc:cats.Align[F]):cats.Align.Ops[F,A]{typeTypeClassType=cats.Align[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxAlternativeGuard", "tail" : "(b: Boolean): GuardOps", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeGuard", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxAlternativeGuard(b:Boolean):cats.syntax.GuardOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxAlternativeSeparate", "tail" : "(fgab: F[G[A, B]]): SeparateOps[F, G, A, B]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeSeparate", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxAlternativeSeparate[F[_],G[_,_],A,B](fgab:F[G[A,B]]):cats.syntax.SeparateOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxUnite", "tail" : "(fga: F[G[A]]): UniteOps[F, G, A]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxUnite", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSyntaxUnite[F[_],G[_],A](fga:F[G[A]]):cats.syntax.UniteOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "catsStdNonEmptyParallelForVectorZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.VectorInstances.catsStdNonEmptyParallelForVectorZipVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdNonEmptyParallelForVectorZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "implicit def"}, {"label" : "catsStdShowForVector", "tail" : "(arg0: Show[A]): Show[Vector[A]]", "member" : "cats.instances.VectorInstances.catsStdShowForVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForVector[A](implicitevidence$1:cats.Show[A]):cats.Show[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForVector", "tail" : ": Traverse[Vector] with Monad[Vector] with Alternative[Vector] with CoflatMap[Vector] with Align[Vector]", "member" : "cats.instances.VectorInstances.catsStdInstancesForVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForVector:cats.Traverse[Vector]withcats.Monad[Vector]withcats.Alternative[Vector]withcats.CoflatMap[Vector]withcats.Align[Vector]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForVector", "tail" : "(): Monoid[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdMonoidForVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForVector[A]:cats.kernel.Monoid[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForVector", "tail" : "(arg0: Order[A]): Order[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdOrderForVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForVector[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForVector", "tail" : "(arg0: Hash[A]): Hash[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdHashForVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForVector[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForVector", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdPartialOrderForVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForVector[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForVector", "tail" : "(arg0: Eq[A]): Eq[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances2.catsKernelStdEqForVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForVector[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForUUID", "tail" : ": Show[UUID]", "member" : "cats.instances.UUIDInstances.catsStdShowForUUID", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForUUID:cats.Show[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUUID", "tail" : ": Order[UUID] with Hash[UUID] with LowerBounded[UUID] with UpperBounded[UUID]", "member" : "cats.kernel.instances.UUIDInstances.catsKernelStdOrderForUUID", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForUUID:cats.kernel.Order[java.util.UUID]withcats.kernel.Hash[java.util.UUID]withcats.kernel.LowerBounded[java.util.UUID]withcats.kernel.UpperBounded[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsStdEqForTry", "tail" : "(A: Eq[A], T: Eq[Throwable]): Eq[Try[A]]", "member" : "cats.instances.TryInstances.catsStdEqForTry", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdEqForTry[A,T](implicitA:cats.Eq[A],implicitT:cats.Eq[Throwable]):cats.Eq[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForTry", "tail" : "(A: Show[A]): Show[Try[A]]", "member" : "cats.instances.TryInstances.catsStdShowForTry", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForTry[A](implicitA:cats.Show[A]):cats.Show[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTry", "tail" : "(): MonadError[Try, Throwable] with CoflatMap[Try] with Traverse[Try] with Monad[Try]", "member" : "cats.instances.TryInstances.catsStdInstancesForTry", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForTry:cats.MonadError[scala.util.Try,Throwable]withcats.CoflatMap[scala.util.Try]withcats.Traverse[scala.util.Try]withcats.Monad[scala.util.Try]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForTry", "tail" : "(arg0: Monoid[A]): Monoid[Try[A]]", "member" : "cats.instances.TryInstances1.catsStdMonoidForTry", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdMonoidForTry[A](implicitevidence$1:cats.Monoid[A]):cats.Monoid[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForTry", "tail" : "(arg0: Semigroup[A]): Semigroup[Try[A]]", "member" : "cats.instances.TryInstances2.catsStdSemigroupForTry", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdSemigroupForTry[A](implicitevidence$2:cats.Semigroup[A]):cats.Semigroup[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsInstancesForTailRec", "tail" : "(): StackSafeMonad[TailRec] with Defer[TailRec]", "member" : "cats.instances.TailRecInstances.catsInstancesForTailRec", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsInstancesForTailRec:cats.StackSafeMonad[util.control.TailCalls.TailRec]withcats.Defer[util.control.TailCalls.TailRec]", "kind" : "implicit def"}, {"label" : "catsStdShowForSymbol", "tail" : ": Show[Symbol]", "member" : "cats.instances.SymbolInstances.catsStdShowForSymbol", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForSymbol:cats.Show[Symbol]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForSymbol", "tail" : ": Order[Symbol] with Hash[Symbol] with LowerBounded[Symbol]", "member" : "cats.kernel.instances.SymbolInstances.catsKernelStdOrderForSymbol", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForSymbol:cats.kernel.Order[Symbol]withcats.kernel.Hash[Symbol]withcats.kernel.LowerBounded[Symbol]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String] with Hash[String] with LowerBounded[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForString:cats.kernel.Order[String]withcats.kernel.Hash[String]withcats.kernel.LowerBounded[String]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForStream", "tail" : ": Traverse[Stream] with Alternative[Stream] with Monad[Stream] with CoflatMap[Stream] with Align[Stream]", "member" : "cats.instances.StreamInstances.catsStdInstancesForStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForStream:cats.Traverse[Stream]withcats.Alternative[Stream]withcats.Monad[Stream]withcats.CoflatMap[Stream]withcats.Align[Stream]", "kind" : "implicit val"}, {"label" : "catsStdParallelForStreamZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.StreamInstances.catsStdParallelForStreamZipStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdParallelForStreamZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "implicit def"}, {"label" : "catsStdShowForStream", "tail" : "(arg0: Show[A]): Show[Stream[A]]", "member" : "cats.instances.StreamInstances.catsStdShowForStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForStream[A](implicitevidence$1:cats.Show[A]):cats.Show[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForStream", "tail" : "(): Monoid[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdMonoidForStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForStream[A]:cats.kernel.Monoid[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForStream", "tail" : "(arg0: Order[A]): Order[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdOrderForStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForStream[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForStream", "tail" : "(arg0: Hash[A]): Hash[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdHashForStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForStream[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForStream", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdPartialOrderForStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForStream[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForStream", "tail" : "(arg0: Eq[A]): Eq[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances2.catsKernelStdEqForStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForStream[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedSet", "tail" : "(arg0: Show[A]): Show[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances.catsStdShowForSortedSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForSortedSet[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.SortedSet[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSortedSet", "tail" : ": Foldable[SortedSet] with SemigroupK[SortedSet]", "member" : "cats.instances.SortedSetInstances.catsStdInstancesForSortedSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForSortedSet:cats.Foldable[scala.collection.immutable.SortedSet]withcats.SemigroupK[scala.collection.immutable.SortedSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdSemilatticeForSortedSet", "tail" : "(arg0: Order[A]): BoundedSemilattice[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances1.catsKernelStdSemilatticeForSortedSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForSortedSet[A](implicitevidence$5:cats.kernel.Order[A]):cats.kernel.BoundedSemilattice[scala.collection.immutable.SortedSet[A]]", "kind" : "def"}, {"label" : "catsStdInstancesForSortedMap", "tail" : "(arg0: Order[K]): Traverse[[β$0$]SortedMap[K, β$0$]] with FlatMap[[β$1$]SortedMap[K, β$1$]] with Align[[β$2$]SortedMap[K, β$2$]]", "member" : "cats.instances.SortedMapInstances.catsStdInstancesForSortedMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForSortedMap[K](implicitevidence$7:cats.Order[K]):cats.Traverse[[β$0$]scala.collection.immutable.SortedMap[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.SortedMap[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.SortedMap[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedMap", "tail" : "(arg0: Order[A], showA: Show[A], showB: Show[B]): Show[SortedMap[A, B]]", "member" : "cats.instances.SortedMapInstances.catsStdShowForSortedMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForSortedMap[A,B](implicitevidence$6:cats.Order[A],implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[scala.collection.immutable.SortedMap[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: CommutativeSemigroup[V]): CommutativeMonoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdCommutativeMonoidForSortedMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdCommutativeMonoidForSortedMap[K,V](implicitevidence$4:cats.Order[K],implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdHashForSortedMap", "tail" : "(arg0: Hash[K], arg1: Order[K], arg2: Hash[V]): Hash[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdHashForSortedMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdHashForSortedMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.Order[K],implicitevidence$3:cats.kernel.Hash[V]):cats.kernel.Hash[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: Semigroup[V]): Monoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances2.catsStdMonoidForSortedMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdMonoidForSortedMap[K,V](implicitevidence$10:cats.Order[K],implicitevidence$11:cats.kernel.Semigroup[V]):cats.Monoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdEqForSortedMap", "tail" : "(arg0: Order[K], arg1: Eq[V]): Eq[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances1.catsStdEqForSortedMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdEqForSortedMap[K,V](implicitevidence$8:cats.Order[K],implicitevidence$9:cats.kernel.Eq[V]):cats.kernel.Eq[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdShowForSet", "tail" : "(arg0: Show[A]): Show[Set[A]]", "member" : "cats.instances.SetInstances.catsStdShowForSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForSet[A](implicitevidence$3:cats.Show[A]):cats.Show[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSet", "tail" : ": UnorderedTraverse[Set] with MonoidK[Set]", "member" : "cats.instances.SetInstances.catsStdInstancesForSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForSet:cats.UnorderedTraverse[Set]withcats.MonoidK[Set]", "kind" : "implicit val"}, {"label" : "catsKernelStdHashForSet", "tail" : "(): Hash[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdHashForSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForSet[A]:cats.kernel.Hash[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForSet", "tail" : "(): BoundedSemilattice[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdSemilatticeForSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForSet[A]:cats.kernel.BoundedSemilattice[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForSet", "tail" : "(): PartialOrder[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdPartialOrderForSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForSet[A]:cats.kernel.PartialOrder[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForQueue", "tail" : "(): TraverseFilter[Queue]", "member" : "cats.instances.QueueInstances.catsStdTraverseFilterForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdTraverseFilterForQueue:cats.TraverseFilter[scala.collection.immutable.Queue]", "kind" : "implicit def"}, {"label" : "catsStdShowForQueue", "tail" : "(arg0: Show[A]): Show[Queue[A]]", "member" : "cats.instances.QueueInstances.catsStdShowForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForQueue[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForQueue", "tail" : ": Traverse[Queue] with Alternative[Queue] with Monad[Queue] with CoflatMap[Queue]", "member" : "cats.instances.QueueInstances.catsStdInstancesForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForQueue:cats.Traverse[scala.collection.immutable.Queue]withcats.Alternative[scala.collection.immutable.Queue]withcats.Monad[scala.collection.immutable.Queue]withcats.CoflatMap[scala.collection.immutable.Queue]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForQueue", "tail" : "(): Monoid[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdMonoidForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForQueue[A]:cats.kernel.Monoid[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForQueue", "tail" : "(arg0: Order[A]): Order[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdOrderForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForQueue[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForQueue", "tail" : "(arg0: Hash[A]): Hash[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdHashForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForQueue[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForQueue", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdPartialOrderForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForQueue[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForQueue", "tail" : "(arg0: Eq[A]): Eq[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances2.catsKernelStdEqForQueue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForQueue[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForPartialOrdering", "tail" : ": ContravariantMonoidal[PartialOrdering]", "member" : "cats.instances.PartialOrderingInstances.catsContravariantMonoidalForPartialOrdering", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsContravariantMonoidalForPartialOrdering:cats.ContravariantMonoidal[PartialOrdering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForPartialOrder", "tail" : ": ContravariantMonoidal[PartialOrder]", "member" : "cats.instances.PartialOrderInstances.catsContravariantMonoidalForPartialOrder", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsContravariantMonoidalForPartialOrder:cats.ContravariantMonoidal[cats.PartialOrder]", "kind" : "implicit val"}, {"label" : "catsKernelPartialOrderingForPartialOrder", "tail" : "(ev: PartialOrder[A]): PartialOrdering[A]", "member" : "cats.kernel.PartialOrderToPartialOrderingConversion.catsKernelPartialOrderingForPartialOrder", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelPartialOrderingForPartialOrder[A](implicitev:cats.kernel.PartialOrder[A]):PartialOrdering[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherTNestedParallelValidated", "tail" : "(arg0: Semigroup[E], P: Parallel[M]): Aux[[γ$5$]EitherT[M, E, γ$5$], [γ$6$]Nested[cats.Parallel.F, [β$4$]Validated[E, β$4$], γ$6$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherTNestedParallelValidated", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsParallelForEitherTNestedParallelValidated[M[_<:<?>],E](implicitevidence$2:cats.kernel.Semigroup[E],implicitP:cats.Parallel[M]):cats.Parallel.Aux[[γ$5$]cats.data.EitherT[M,E,γ$5$],[γ$6$]cats.data.Nested[P.F,[β$4$]cats.data.Validated[E,β$4$],γ$6$]]", "kind" : "def"}, {"label" : "catsStdParallelForZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdParallelForZipLazyList[A<:<?>]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "def"}, {"label" : "catsStdParallelForZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipStream", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdParallelForZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipVector", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdNonEmptyParallelForZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdNonEmptyParallelForZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "def"}, {"label" : "catsParallelForOptionTNestedOption", "tail" : "(P: Parallel[M]): Aux[[β$2$]OptionT[M, β$2$], [γ$3$]Nested[cats.Parallel.F, Option, γ$3$]]", "member" : "cats.instances.ParallelInstances.catsParallelForOptionTNestedOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsParallelForOptionTNestedOption[M[_<:<?>]](implicitP:cats.Parallel[M]):cats.Parallel.Aux[[β$2$]cats.data.OptionT[M,β$2$],[γ$3$]cats.data.Nested[P.F,Option,γ$3$]]", "kind" : "def"}, {"label" : "catsParallelForEitherValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$0$]Either[E, β$0$], [β$1$]Validated[E, β$1$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherValidated", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsParallelForEitherValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$0$]scala.util.Either[E,β$0$],[β$1$]cats.data.Validated[E,β$1$]]", "kind" : "def"}, {"label" : "catsParallelForEitherTNestedValidated", "tail" : "(arg0: Monad[M], arg1: Semigroup[E]): Aux[[γ$1$]EitherT[M, E, γ$1$], [γ$2$]Nested[M, [β$0$]Validated[E, β$0$], γ$2$]]", "member" : "cats.instances.ParallelInstances1.catsParallelForEitherTNestedValidated", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsParallelForEitherTNestedValidated[M[_<:<?>],E](implicitevidence$1:cats.Monad[M],implicitevidence$2:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[γ$1$]cats.data.EitherT[M,E,γ$1$],[γ$2$]cats.data.Nested[M,[β$0$]cats.data.Validated[E,β$0$],γ$2$]]", "kind" : "def"}, {"label" : "catsContravariantMonoidalForOrdering", "tail" : ": ContravariantMonoidal[Ordering]", "member" : "cats.instances.OrderingInstances.catsContravariantMonoidalForOrdering", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsContravariantMonoidalForOrdering:cats.ContravariantMonoidal[Ordering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForOrder", "tail" : ": ContravariantMonoidal[Order]", "member" : "cats.instances.OrderInstances.catsContravariantMonoidalForOrder", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsContravariantMonoidalForOrder:cats.ContravariantMonoidal[cats.Order]", "kind" : "implicit val"}, {"label" : "catsKernelOrderingForOrder", "tail" : "(ev: Order[A]): Ordering[A]", "member" : "cats.kernel.OrderToOrderingConversion.catsKernelOrderingForOrder", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelOrderingForOrder[A](implicitev:cats.kernel.Order[A]):Ordering[A]", "kind" : "implicit def"}, {"label" : "catsStdShowForOption", "tail" : "(A: Show[A]): Show[Option[A]]", "member" : "cats.instances.OptionInstances.catsStdShowForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForOption[A](implicitA:cats.Show[A]):cats.Show[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForOption", "tail" : ": Traverse[Option] with MonadError[Option, Unit] with Alternative[Option] with CommutativeMonad[Option] with CoflatMap[Option] with Align[Option]", "member" : "cats.instances.OptionInstances.catsStdInstancesForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForOption:cats.Traverse[Option]withcats.MonadError[Option,Unit]withcats.Alternative[Option]withcats.CommutativeMonad[Option]withcats.CoflatMap[Option]withcats.Align[Option]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForOption", "tail" : "(arg0: Semigroup[A]): Monoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdMonoidForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForOption[A](implicitevidence$3:cats.kernel.Semigroup[A]):cats.kernel.Monoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForOption", "tail" : "(arg0: CommutativeSemigroup[A]): CommutativeMonoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdCommutativeMonoidForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForOption[A](implicitevidence$2:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeMonoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForOption", "tail" : "(arg0: Order[A]): Order[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdOrderForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForOption[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForOption", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Option[A]]", "member" : "cats.kernel.instances.OptionInstances0.catsKernelStdPartialOrderForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForOption[A](implicitevidence$4:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForOption", "tail" : "(arg0: Hash[A]): Hash[Option[A]]", "member" : "cats.kernel.instances.OptionInstances1.catsKernelStdHashForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForOption[A](implicitevidence$5:cats.kernel.Hash[A]):cats.kernel.Hash[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForOption", "tail" : "(arg0: Eq[A]): Eq[Option[A]]", "member" : "cats.kernel.instances.OptionInstances2.catsKernelStdEqForOption", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForOption[A](implicitevidence$6:cats.kernel.Eq[A]):cats.kernel.Eq[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForMap", "tail" : "(): UnorderedTraverse[[β$0$]Map[K, β$0$]] with FlatMap[[β$1$]Map[K, β$1$]] with Align[[β$2$]Map[K, β$2$]]", "member" : "cats.instances.MapInstances.catsStdInstancesForMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForMap[K]:cats.UnorderedTraverse[[β$0$]scala.collection.immutable.Map[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.Map[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.Map[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForMap", "tail" : "(showA: Show[A], showB: Show[B]): Show[Map[A, B]]", "member" : "cats.instances.MapInstances.catsStdShowForMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForMap[A,B](implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[Map[A,B]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForMap", "tail" : "(arg0: CommutativeSemigroup[V]): CommutativeMonoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdCommutativeMonoidForMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForMap[K,V](implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForMap", "tail" : "(arg0: Hash[K], arg1: Hash[V]): Hash[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdHashForMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.kernel.Hash[V]):cats.kernel.Hash[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForMap", "tail" : "(arg0: Semigroup[V]): Monoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdMonoidForMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForMap[K,V](implicitevidence$5:cats.kernel.Semigroup[V]):cats.kernel.Monoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForMap", "tail" : "(arg0: Eq[V]): Eq[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdEqForMap", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForMap[K,V](implicitevidence$4:cats.kernel.Eq[V]):cats.kernel.Eq[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsStdNonEmptyParallelForListZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ListInstances.catsStdNonEmptyParallelForListZipList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdNonEmptyParallelForListZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "implicit def"}, {"label" : "catsStdShowForList", "tail" : "(arg0: Show[A]): Show[List[A]]", "member" : "cats.instances.ListInstances.catsStdShowForList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForList[A](implicitevidence$1:cats.Show[A]):cats.Show[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForList", "tail" : ": Traverse[List] with Alternative[List] with Monad[List] with CoflatMap[List] with Align[List]", "member" : "cats.instances.ListInstances.catsStdInstancesForList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForList:cats.Traverse[List]withcats.Alternative[List]withcats.Monad[List]withcats.CoflatMap[List]withcats.Align[List]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForList", "tail" : "(): Monoid[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdMonoidForList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForList[A]:cats.kernel.Monoid[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForList", "tail" : "(arg0: Order[A]): Order[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdOrderForList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForList", "tail" : "(arg0: Hash[A]): Hash[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdHashForList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdPartialOrderForList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForList", "tail" : "(arg0: Eq[A]): Eq[List[A]]", "member" : "cats.kernel.instances.ListInstances2.catsKernelStdEqForList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdParallelForLazyListZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.LazyListInstances.catsStdParallelForLazyListZipLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdParallelForLazyListZipLazyList[A]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForLazyList", "tail" : ": TraverseFilter[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdTraverseFilterForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdTraverseFilterForLazyList:cats.TraverseFilter[LazyList]", "kind" : "implicit val"}, {"label" : "catsStdShowForLazyList", "tail" : "(arg0: Show[A]): Show[LazyList[A]]", "member" : "cats.instances.LazyListInstances.catsStdShowForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForLazyList[A](implicitevidence$1:cats.Show[A]):cats.Show[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForLazyList", "tail" : ": Traverse[LazyList] with Alternative[LazyList] with Monad[LazyList] with CoflatMap[LazyList] with Align[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdInstancesForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForLazyList:cats.Traverse[LazyList]withcats.Alternative[LazyList]withcats.Monad[LazyList]withcats.CoflatMap[LazyList]withcats.Align[LazyList]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForLazyList", "tail" : "(): Monoid[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdMonoidForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForLazyList[A]:cats.kernel.Monoid[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForLazyList", "tail" : "(arg0: Order[A]): Order[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdOrderForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForLazyList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForLazyList", "tail" : "(arg0: Hash[A]): Hash[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdHashForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForLazyList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForLazyList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdPartialOrderForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForLazyList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForLazyList", "tail" : "(arg0: Eq[A]): Eq[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances2.catsKernelStdEqForLazyList", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForLazyList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsInvariantMonoidalCommutativeSemigroup", "tail" : ": InvariantMonoidal[CommutativeSemigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalCommutativeSemigroup", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsInvariantMonoidalCommutativeSemigroup:cats.InvariantMonoidal[cats.kernel.CommutativeSemigroup]", "kind" : "implicit val"}, {"label" : "catsInvariantMonoidalSemigroup", "tail" : ": InvariantMonoidal[Semigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalSemigroup", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsInvariantMonoidalSemigroup:cats.InvariantMonoidal[cats.kernel.Semigroup]", "kind" : "implicit val"}, {"label" : "catsSemigroupalForMonoid", "tail" : "(): InvariantSemigroupal[Monoid]", "member" : "cats.instances.InvariantMonoidalInstances.catsSemigroupalForMonoid", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsSemigroupalForMonoid:cats.InvariantSemigroupal[cats.Monoid]", "kind" : "implicit def"}, {"label" : "catsContravariantForHash", "tail" : ": Contravariant[Hash]", "member" : "cats.instances.HashInstances.catsContravariantForHash", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsContravariantForHash:cats.Contravariant[cats.Hash]", "kind" : "implicit val"}, {"label" : "catsKernelHashToHashing", "tail" : "(ev: Hash[A]): Hashing[A]", "member" : "cats.kernel.HashToHashingConversion.catsKernelHashToHashing", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelHashToHashing[A](implicitev:cats.kernel.Hash[A]):scala.util.hashing.Hashing[A]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForFuture", "tail" : "(ec: ExecutionContext): MonadError[Future, Throwable] with CoflatMap[Future] with Monad[Future]", "member" : "cats.instances.FutureInstances.catsStdInstancesForFuture", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForFuture(implicitec:scala.concurrent.ExecutionContext):cats.MonadError[scala.concurrent.Future,Throwable]withcats.CoflatMap[scala.concurrent.Future]withcats.Monad[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForFuture", "tail" : "(arg0: Monoid[A], ec: ExecutionContext): Monoid[Future[A]]", "member" : "cats.instances.FutureInstances1.catsStdMonoidForFuture", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdMonoidForFuture[A](implicitevidence$1:cats.Monoid[A],implicitec:scala.concurrent.ExecutionContext):cats.Monoid[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForFuture", "tail" : "(arg0: Semigroup[A], ec: ExecutionContext): Semigroup[Future[A]]", "member" : "cats.instances.FutureInstances2.catsStdSemigroupForFuture", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdSemigroupForFuture[A](implicitevidence$2:cats.Semigroup[A],implicitec:scala.concurrent.ExecutionContext):cats.Semigroup[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdMonoidKForFunction1", "tail" : ": MonoidK[Endo]", "member" : "cats.instances.Function1Instances.catsStdMonoidKForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdMonoidKForFunction1:cats.MonoidK[cats.Endo]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForFunction1", "tail" : ": ArrowChoice[Function1] with CommutativeArrow[Function1]", "member" : "cats.instances.Function1Instances.catsStdInstancesForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForFunction1:cats.arrow.ArrowChoice[Function1]withcats.arrow.CommutativeArrow[Function1]", "kind" : "implicit val"}, {"label" : "catsStdMonadForFunction1", "tail" : "(): Monad[[β$8$](T1) => β$8$]", "member" : "cats.instances.Function1Instances.catsStdMonadForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdMonadForFunction1[T1]:cats.Monad[[β$8$]T1=>β$8$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantMonoidalForFunction1", "tail" : "(arg0: Monoid[R]): ContravariantMonoidal[[α$6$](α$6$) => R]", "member" : "cats.instances.Function1Instances.catsStdContravariantMonoidalForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdContravariantMonoidalForFunction1[R](implicitevidence$2:cats.Monoid[R]):cats.ContravariantMonoidal[[α$6$]α$6$=>R]", "kind" : "implicit def"}, {"label" : "catsStdDistributiveForFunction1", "tail" : "(): Distributive[[β$12$](T1) => β$12$]", "member" : "cats.instances.Function1Instances0.catsStdDistributiveForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdDistributiveForFunction1[T1]:cats.Distributive[[β$12$]T1=>β$12$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantForFunction1", "tail" : "(): Contravariant[[α$10$](α$10$) => R]", "member" : "cats.instances.Function1Instances0.catsStdContravariantForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdContravariantForFunction1[R]:cats.Contravariant[[α$10$]α$10$=>R]", "kind" : "implicit def"}, {"label" : "catsStdBimonadForFunction0", "tail" : ": Bimonad[Function0]", "member" : "cats.instances.Function0Instances.catsStdBimonadForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdBimonadForFunction0:cats.Bimonad[Function0]", "kind" : "implicit val"}, {"label" : "function0Distributive", "tail" : "(): Distributive[Function0]", "member" : "cats.instances.Function0Instances0.function0Distributive", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#function0Distributive:cats.Distributive[Function0]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction1", "tail" : "(G: CommutativeGroup[B]): CommutativeGroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelCommutativeGroupForFunction1[A,B](implicitG:cats.kernel.CommutativeGroup[B]):cats.kernel.CommutativeGroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction0", "tail" : "(G: CommutativeGroup[A]): CommutativeGroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelCommutativeGroupForFunction0[A](implicitG:cats.kernel.CommutativeGroup[A]):cats.kernel.CommutativeGroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelOrderForFunction0", "tail" : "(ev: Order[A]): Order[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelOrderForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelOrderForFunction0[A](implicitev:cats.kernel.Order[A]):cats.kernel.Order[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction1", "tail" : "(G: BoundedSemilattice[B]): BoundedSemilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelBoundedSemilatticeForFunction1[A,B](implicitG:cats.kernel.BoundedSemilattice[B]):cats.kernel.BoundedSemilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction0", "tail" : "(G: BoundedSemilattice[A]): BoundedSemilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelBoundedSemilatticeForFunction0[A](implicitG:cats.kernel.BoundedSemilattice[A]):cats.kernel.BoundedSemilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction1", "tail" : "(G: Group[B]): Group[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelGroupForFunction1[A,B](implicitG:cats.kernel.Group[B]):cats.kernel.Group[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction0", "tail" : "(G: Group[A]): Group[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelGroupForFunction0[A](implicitG:cats.kernel.Group[A]):cats.kernel.Group[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelPartialOrderForFunction0", "tail" : "(ev: PartialOrder[A]): PartialOrder[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelPartialOrderForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelPartialOrderForFunction0[A](implicitev:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelHashForFunction0", "tail" : "(ev: Hash[A]): Hash[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelHashForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelHashForFunction0[A](implicitev:cats.kernel.Hash[A]):cats.kernel.Hash[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction1", "tail" : "(M: Semilattice[B]): Semilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelSemilatticeForFunction1[A,B](implicitM:cats.kernel.Semilattice[B]):cats.kernel.Semilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction0", "tail" : "(M: Semilattice[A]): Semilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelSemilatticeForFunction0[A](implicitM:cats.kernel.Semilattice[A]):cats.kernel.Semilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction1", "tail" : "(M: CommutativeMonoid[B]): CommutativeMonoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelCommutativeMonoidForFunction1[A,B](implicitM:cats.kernel.CommutativeMonoid[B]):cats.kernel.CommutativeMonoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction0", "tail" : "(M: CommutativeMonoid[A]): CommutativeMonoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelCommutativeMonoidForFunction0[A](implicitM:cats.kernel.CommutativeMonoid[A]):cats.kernel.CommutativeMonoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelEqForFunction0", "tail" : "(ev: Eq[A]): Eq[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelEqForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelEqForFunction0[A](implicitev:cats.kernel.Eq[A]):cats.kernel.Eq[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction1", "tail" : "(S: Band[B]): Band[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelBandForFunction1[A,B](implicitS:cats.kernel.Band[B]):cats.kernel.Band[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction0", "tail" : "(S: Band[A]): Band[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelBandForFunction0[A](implicitS:cats.kernel.Band[A]):cats.kernel.Band[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction1", "tail" : "(M: Monoid[B]): Monoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelMonoidForFunction1[A,B](implicitM:cats.kernel.Monoid[B]):cats.kernel.Monoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction0", "tail" : "(M: Monoid[A]): Monoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelMonoidForFunction0[A](implicitM:cats.kernel.Monoid[A]):cats.kernel.Monoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction1", "tail" : "(S: CommutativeSemigroup[B]): CommutativeSemigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelCommutativeSemigroupForFunction1[A,B](implicitS:cats.kernel.CommutativeSemigroup[B]):cats.kernel.CommutativeSemigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction0", "tail" : "(S: CommutativeSemigroup[A]): CommutativeSemigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelCommutativeSemigroupForFunction0[A](implicitS:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeSemigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction1", "tail" : "(S: Semigroup[B]): Semigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelSemigroupForFunction1[A,B](implicitS:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction0", "tail" : "(S: Semigroup[A]): Semigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction0", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelSemigroupForFunction0[A](implicitS:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForEquiv", "tail" : ": ContravariantMonoidal[Equiv]", "member" : "cats.instances.EquivInstances.catsContravariantMonoidalForEquiv", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsContravariantMonoidalForEquiv:cats.ContravariantMonoidal[Equiv]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForEq", "tail" : ": ContravariantMonoidal[Eq]", "member" : "cats.instances.EqInstances.catsContravariantMonoidalForEq", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsContravariantMonoidalForEq:cats.ContravariantMonoidal[cats.Eq]", "kind" : "implicit val"}, {"label" : "catsKernelEquivForEq", "tail" : "(ev: Eq[A]): Equiv[A]", "member" : "cats.kernel.EqToEquivConversion.catsKernelEquivForEq", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelEquivForEq[A](implicitev:cats.kernel.Eq[A]):scala.math.Equiv[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherAndValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$9$]Either[E, β$9$], [β$10$]Validated[E, β$10$]]", "member" : "cats.instances.EitherInstances.catsParallelForEitherAndValidated", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsParallelForEitherAndValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$9$]scala.util.Either[E,β$9$],[β$10$]cats.data.Validated[E,β$10$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForEither", "tail" : "(A: Show[A], B: Show[B]): Show[Either[A, B]]", "member" : "cats.instances.EitherInstances.catsStdShowForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForEither[A,B](implicitA:cats.Show[A],implicitB:cats.Show[B]):cats.Show[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupKForEither", "tail" : "(): SemigroupK[[β$7$]Either[L, β$7$]]", "member" : "cats.instances.EitherInstances.catsStdSemigroupKForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdSemigroupKForEither[L]:cats.SemigroupK[[β$7$]scala.util.Either[L,β$7$]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForEither", "tail" : "(): MonadError[[β$0$]Either[A, β$0$], A] with Traverse[[β$1$]Either[A, β$1$]] with Align[[β$2$]Either[A, β$2$]]", "member" : "cats.instances.EitherInstances.catsStdInstancesForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForEither[A]:cats.MonadError[[β$0$]scala.util.Either[A,β$0$],A]withcats.Traverse[[β$1$]scala.util.Either[A,β$1$]]withcats.Align[[β$2$]scala.util.Either[A,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForEither", "tail" : ": Bitraverse[Either]", "member" : "cats.instances.EitherInstances.catsStdBitraverseForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdBitraverseForEither:cats.Bitraverse[Either]", "kind" : "implicit val"}, {"label" : "catsDataMonoidForEither", "tail" : "(B: Monoid[B]): Monoid[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsDataMonoidForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsDataMonoidForEither[A,B](implicitB:cats.kernel.Monoid[B]):cats.kernel.Monoid[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdOrderForEither", "tail" : "(A: Order[A], B: Order[B]): Order[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsStdOrderForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdOrderForEither[A,B](implicitA:cats.kernel.Order[A],implicitB:cats.kernel.Order[B]):cats.kernel.Order[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdHashForEither", "tail" : "(A: Hash[A], B: Hash[B]): Hash[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdHashForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdHashForEither[A,B](implicitA:cats.kernel.Hash[A],implicitB:cats.kernel.Hash[B]):cats.kernel.Hash[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdPartialOrderForEither", "tail" : "(A: PartialOrder[A], B: PartialOrder[B]): PartialOrder[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdPartialOrderForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdPartialOrderForEither[A,B](implicitA:cats.kernel.PartialOrder[A],implicitB:cats.kernel.PartialOrder[B]):cats.kernel.PartialOrder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsDataSemigroupForEither", "tail" : "(B: Semigroup[B]): Semigroup[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsDataSemigroupForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsDataSemigroupForEither[A,B](implicitB:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdEqForEither", "tail" : "(A: Eq[A], B: Eq[B]): Eq[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances1.catsStdEqForEither", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdEqForEither[A,B](implicitA:cats.kernel.Eq[A],implicitB:cats.kernel.Eq[B]):cats.kernel.Eq[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdShowForBitSet", "tail" : "(): Show[BitSet]", "member" : "cats.instances.BitSetInstances.catsStdShowForBitSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForBitSet:cats.Show[scala.collection.immutable.BitSet]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForBitSet", "tail" : ": BoundedSemilattice[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdSemilatticeForBitSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForBitSet:cats.kernel.BoundedSemilattice[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBitSet", "tail" : ": PartialOrder[BitSet] with Hash[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdOrderForBitSet", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForBitSet:cats.kernel.PartialOrder[scala.collection.immutable.BitSet]withcats.kernel.Hash[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigDecimal", "tail" : ": Show[BigDecimal]", "member" : "cats.instances.BigDecimalInstances.catsStdShowForBigDecimal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForBigDecimal:cats.Show[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigDecimal", "tail" : ": CommutativeGroup[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdGroupForBigDecimal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForBigDecimal:cats.kernel.CommutativeGroup[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigDecimal", "tail" : ": Order[BigDecimal] with Hash[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdOrderForBigDecimal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForBigDecimal:cats.kernel.Order[BigDecimal]withcats.kernel.Hash[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigInt", "tail" : ": Show[BigInt]", "member" : "cats.instances.BigIntInstances.catsStdShowForBigInt", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForBigInt:cats.Show[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigInt", "tail" : ": CommutativeGroup[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdGroupForBigInt", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForBigInt:cats.kernel.CommutativeGroup[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigInt", "tail" : ": Order[BigInt] with Hash[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdOrderForBigInt", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForBigInt:cats.kernel.Order[BigInt]withcats.kernel.Hash[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple22", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20], A21: BoundedSemilattice[A21]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20],implicitA21:cats.kernel.BoundedSemilattice[A21]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple22", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20], A21: Order[A21]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20],implicitA21:cats.kernel.Order[A21]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple22", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20], A21: CommutativeGroup[A21]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20],implicitA21:cats.kernel.CommutativeGroup[A21]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple21", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple21", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple21", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple20", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple20", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple20", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple19", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple19", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple19", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple18", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple18", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple18", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple17", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple17", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple17", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple16", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple16", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple16", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple15", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple15", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple15", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple14", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple14", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple14", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple13", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple13", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple13", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple12", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple12", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple12", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple11", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple11", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple11", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple10", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple10", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple10", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple9", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple9", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple9", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple8", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple8", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7]): Order[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple8", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple7", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple7", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6]): Order[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple7", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple6", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple6", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5]): Order[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple6", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5]): CommutativeGroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple5", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4]): BoundedSemilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple5", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4]): Order[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4]):cats.kernel.Order[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple5", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4]): CommutativeGroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple4", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3]): BoundedSemilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple4", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3]): Order[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3]):cats.kernel.Order[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple4", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3]): CommutativeGroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple3", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2]): BoundedSemilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2]):cats.kernel.BoundedSemilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple3", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2]): Order[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2]):cats.kernel.Order[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple3", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2]): CommutativeGroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2]):cats.kernel.CommutativeGroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple2", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1]): BoundedSemilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1]):cats.kernel.BoundedSemilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple2", "tail" : "(A0: Order[A0], A1: Order[A1]): Order[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple2[A0,A1](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1]):cats.kernel.Order[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple2", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1]): CommutativeGroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1]):cats.kernel.CommutativeGroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple1", "tail" : "(A0: BoundedSemilattice[A0]): BoundedSemilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBoundedSemilatticeForTuple1[A0](implicitA0:cats.kernel.BoundedSemilattice[A0]):cats.kernel.BoundedSemilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple1", "tail" : "(A0: Order[A0]): Order[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForTuple1[A0](implicitA0:cats.kernel.Order[A0]):cats.kernel.Order[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple1", "tail" : "(A0: CommutativeGroup[A0]): CommutativeGroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeGroupForTuple1[A0](implicitA0:cats.kernel.CommutativeGroup[A0]):cats.kernel.CommutativeGroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple22", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20], A21: PartialOrder[A21]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20],implicitA21:cats.kernel.PartialOrder[A21]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple22", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20], A21: Hash[A21]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20],implicitA21:cats.kernel.Hash[A21]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple22", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20], A21: Group[A21]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20],implicitA21:cats.kernel.Group[A21]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple22", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20], A21: CommutativeMonoid[A21]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20],implicitA21:cats.kernel.CommutativeMonoid[A21]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple22", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20], A21: Semilattice[A21]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20],implicitA21:cats.kernel.Semilattice[A21]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple21", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple21", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple21", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple21", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple21", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple20", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple20", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple20", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple20", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple20", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple19", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple19", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple19", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple19", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple19", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple18", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple18", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple18", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple18", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple18", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple17", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple17", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple17", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple17", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple17", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple16", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple16", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple16", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple16", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple16", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple15", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple15", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple15", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple15", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple15", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple14", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple14", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple14", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple14", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple14", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple13", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple13", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple13", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple13", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple13", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple12", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple12", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple12", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple12", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple12", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple11", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple11", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple11", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple11", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple11", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple10", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple10", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple10", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple10", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple10", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple9", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple9", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple9", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple9", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple9", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple8", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple8", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple8", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7]): Group[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple8", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple8", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple7", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple7", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6]): Hash[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple7", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6]): Group[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple7", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple7", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6]): Semilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple6", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5]): PartialOrder[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple6", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5]): Hash[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple6", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5]): Group[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple6", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple6", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5]): Semilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple5", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4]): PartialOrder[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple5", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4]): Hash[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4]):cats.kernel.Hash[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple5", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4]): Group[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4]):cats.kernel.Group[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple5", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4]): CommutativeMonoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple5", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4]): Semilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple4", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3]): PartialOrder[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3]):cats.kernel.PartialOrder[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple4", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3]): Hash[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3]):cats.kernel.Hash[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple4", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3]): Group[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3]):cats.kernel.Group[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple4", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3]): CommutativeMonoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple4", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3]): Semilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3]):cats.kernel.Semilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple3", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2]): PartialOrder[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2]):cats.kernel.PartialOrder[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple3", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2]): Hash[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple3[A0,A1,A2](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2]):cats.kernel.Hash[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple3", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2]): Group[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2]):cats.kernel.Group[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple3", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2]): CommutativeMonoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2]):cats.kernel.CommutativeMonoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple3", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2]): Semilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2]):cats.kernel.Semilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple2", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1]): PartialOrder[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple2[A0,A1](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1]):cats.kernel.PartialOrder[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple2", "tail" : "(A0: Hash[A0], A1: Hash[A1]): Hash[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple2[A0,A1](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1]):cats.kernel.Hash[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple2", "tail" : "(A0: Group[A0], A1: Group[A1]): Group[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple2[A0,A1](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1]):cats.kernel.Group[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple2", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1]): CommutativeMonoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1]):cats.kernel.CommutativeMonoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple2", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1]): Semilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1]):cats.kernel.Semilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple1", "tail" : "(A0: PartialOrder[A0]): PartialOrder[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdPartialOrderForTuple1[A0](implicitA0:cats.kernel.PartialOrder[A0]):cats.kernel.PartialOrder[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple1", "tail" : "(A0: Hash[A0]): Hash[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdHashForTuple1[A0](implicitA0:cats.kernel.Hash[A0]):cats.kernel.Hash[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple1", "tail" : "(A0: Group[A0]): Group[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForTuple1[A0](implicitA0:cats.kernel.Group[A0]):cats.kernel.Group[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple1", "tail" : "(A0: CommutativeMonoid[A0]): CommutativeMonoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeMonoidForTuple1[A0](implicitA0:cats.kernel.CommutativeMonoid[A0]):cats.kernel.CommutativeMonoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple1", "tail" : "(A0: Semilattice[A0]): Semilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemilatticeForTuple1[A0](implicitA0:cats.kernel.Semilattice[A0]):cats.kernel.Semilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple22", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20], A21: Monoid[A21]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20],implicitA21:cats.kernel.Monoid[A21]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple22", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20], A21: CommutativeSemigroup[A21]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20],implicitA21:cats.kernel.CommutativeSemigroup[A21]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple22", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20], A21: Band[A21]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20],implicitA21:cats.kernel.Band[A21]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple21", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple21", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple21", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple20", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple20", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple20", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple19", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple19", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple19", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple18", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple18", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple18", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple17", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple17", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple17", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple16", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple16", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple16", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple15", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple15", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple15", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple14", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple14", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple14", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple13", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple13", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple13", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple12", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple12", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple12", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple11", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple11", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple11", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple10", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple10", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple10", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple9", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple9", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple9", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple8", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple8", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple8", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7]): Band[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple7", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6]): Monoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple7", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple7", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6]): Band[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple6", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5]): Monoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple6", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple6", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5]): Band[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple5", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4]): Monoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4]):cats.kernel.Monoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple5", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4]): CommutativeSemigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple5", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4]): Band[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4]):cats.kernel.Band[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple4", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3]): Monoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3]):cats.kernel.Monoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple4", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3]): CommutativeSemigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple4", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3]): Band[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3]):cats.kernel.Band[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple3", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2]): Monoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2]):cats.kernel.Monoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple3", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2]): CommutativeSemigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2]):cats.kernel.CommutativeSemigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple3", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2]): Band[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple3[A0,A1,A2](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2]):cats.kernel.Band[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple2", "tail" : "(A0: Monoid[A0], A1: Monoid[A1]): Monoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple2[A0,A1](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1]):cats.kernel.Monoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple2", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1]): CommutativeSemigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1]):cats.kernel.CommutativeSemigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple2", "tail" : "(A0: Band[A0], A1: Band[A1]): Band[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple2[A0,A1](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1]):cats.kernel.Band[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple1", "tail" : "(A0: Monoid[A0]): Monoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdMonoidForTuple1[A0](implicitA0:cats.kernel.Monoid[A0]):cats.kernel.Monoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple1", "tail" : "(A0: CommutativeSemigroup[A0]): CommutativeSemigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdCommutativeSemigroupForTuple1[A0](implicitA0:cats.kernel.CommutativeSemigroup[A0]):cats.kernel.CommutativeSemigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple1", "tail" : "(A0: Band[A0]): Band[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdBandForTuple1[A0](implicitA0:cats.kernel.Band[A0]):cats.kernel.Band[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple22", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20], A21: Eq[A21]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20],implicitA21:cats.kernel.Eq[A21]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple22", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20], A21: Semigroup[A21]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple22", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20],implicitA21:cats.kernel.Semigroup[A21]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple21", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple21", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple21", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple20", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple20", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple20", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple19", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple19", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple19", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple18", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple18", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple18", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple17", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple17", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple17", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple16", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple16", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple16", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple15", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple15", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple15", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple14", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple14", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple14", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple13", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple13", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple13", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple12", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple12", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple12", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple11", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple11", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple11", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple10", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple10", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple10", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple9", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple9", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple9", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple8", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple8", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple8", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple7", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6]): Eq[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple7", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6]): Semigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple7", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple6", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5]): Eq[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple6", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5]): Semigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple6", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple5", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4]): Eq[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4]):cats.kernel.Eq[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple5", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4]): Semigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple5", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple4", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3]): Eq[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3]):cats.kernel.Eq[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple4", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3]): Semigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple4", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3]):cats.kernel.Semigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple3", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2]): Eq[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple3[A0,A1,A2](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2]):cats.kernel.Eq[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple3", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2]): Semigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple3", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2]):cats.kernel.Semigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple2", "tail" : "(A0: Eq[A0], A1: Eq[A1]): Eq[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple2[A0,A1](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1]):cats.kernel.Eq[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple2", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1]): Semigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1]):cats.kernel.Semigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple1", "tail" : "(A0: Eq[A0]): Eq[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdEqForTuple1[A0](implicitA0:cats.kernel.Eq[A0]):cats.kernel.Eq[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple1", "tail" : "(A0: Semigroup[A0]): Semigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple1", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdSemigroupForTuple1[A0](implicitA0:cats.kernel.Semigroup[A0]):cats.kernel.Semigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTuple2", "tail" : "(): Traverse[[β$0$](X, β$0$)] with Comonad[[β$1$](X, β$1$)] with Reducible[[β$2$](X, β$2$)]", "member" : "cats.instances.Tuple2Instances.catsStdInstancesForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdInstancesForTuple2[X]:cats.Traverse[[β$0$](X,β$0$)]withcats.Comonad[[β$1$](X,β$1$)]withcats.Reducible[[β$2$](X,β$2$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForTuple2", "tail" : "(aShow: Show[A], bShow: Show[B]): Show[(A, B)]", "member" : "cats.instances.Tuple2Instances.catsStdShowForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForTuple2[A,B](implicitaShow:cats.Show[A],implicitbShow:cats.Show[B]):cats.Show[(A,B)]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForTuple2", "tail" : ": Bitraverse[Tuple2]", "member" : "cats.instances.Tuple2Instances.catsStdBitraverseForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdBitraverseForTuple2:cats.Bitraverse[Tuple2]", "kind" : "implicit val"}, {"label" : "catsStdCommutativeMonadForTuple2", "tail" : "(MX: CommutativeMonoid[X]): CommutativeMonad[[β$6$](X, β$6$)]", "member" : "cats.instances.Tuple2Instances1.catsStdCommutativeMonadForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdCommutativeMonadForTuple2[X](implicitMX:cats.kernel.CommutativeMonoid[X]):cats.CommutativeMonad[[β$6$](X,β$6$)]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeFlatMapForTuple2", "tail" : "(MX: CommutativeSemigroup[X]): CommutativeFlatMap[[β$8$](X, β$8$)]", "member" : "cats.instances.Tuple2Instances2.catsStdCommutativeFlatMapForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdCommutativeFlatMapForTuple2[X](implicitMX:cats.kernel.CommutativeSemigroup[X]):cats.CommutativeFlatMap[[β$8$](X,β$8$)]", "kind" : "implicit def"}, {"label" : "catsStdMonadForTuple2", "tail" : "(MX: Monoid[X]): Monad[[β$10$](X, β$10$)]", "member" : "cats.instances.Tuple2Instances3.catsStdMonadForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdMonadForTuple2[X](implicitMX:cats.Monoid[X]):cats.Monad[[β$10$](X,β$10$)]", "kind" : "implicit def"}, {"label" : "catsStdFlatMapForTuple2", "tail" : "(SX: Semigroup[X]): FlatMap[[β$12$](X, β$12$)]", "member" : "cats.instances.Tuple2Instances4.catsStdFlatMapForTuple2", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdFlatMapForTuple2[X](implicitSX:cats.Semigroup[X]):cats.FlatMap[[β$12$](X,β$12$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForUnit", "tail" : ": Show[Unit]", "member" : "cats.instances.UnitInstances.catsStdShowForUnit", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForUnit:cats.Show[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdAlgebraForUnit", "tail" : ": BoundedSemilattice[Unit] with CommutativeGroup[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdAlgebraForUnit", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdAlgebraForUnit:cats.kernel.BoundedSemilattice[Unit]withcats.kernel.CommutativeGroup[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUnit", "tail" : ": Order[Unit] with Hash[Unit] with LowerBounded[Unit] with UpperBounded[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdOrderForUnit", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForUnit:cats.kernel.Order[Unit]withcats.kernel.Hash[Unit]withcats.kernel.LowerBounded[Unit]withcats.kernel.UpperBounded[Unit]", "kind" : "implicit val"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean] with Hash[Boolean] with LowerBounded[Boolean] with UpperBounded[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]withcats.kernel.Hash[Boolean]withcats.kernel.LowerBounded[Boolean]withcats.kernel.UpperBounded[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double] with Hash[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]withcats.kernel.Hash[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float] with Hash[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]withcats.kernel.Hash[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForShort", "tail" : ": Show[Short]", "member" : "cats.instances.ShortInstances.catsStdShowForShort", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForShort:cats.Show[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForShort", "tail" : ": CommutativeGroup[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdGroupForShort", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForShort:cats.kernel.CommutativeGroup[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForShort", "tail" : ": Order[Short] with Hash[Short] with LowerBounded[Short] with UpperBounded[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdOrderForShort", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForShort:cats.kernel.Order[Short]withcats.kernel.Hash[Short]withcats.kernel.LowerBounded[Short]withcats.kernel.UpperBounded[Short]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long] with Hash[Long] with LowerBounded[Long] with UpperBounded[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]withcats.kernel.Hash[Long]withcats.kernel.LowerBounded[Long]withcats.kernel.UpperBounded[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForByte", "tail" : ": Show[Byte]", "member" : "cats.instances.ByteInstances.catsStdShowForByte", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForByte:cats.Show[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForByte", "tail" : ": CommutativeGroup[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdGroupForByte", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForByte:cats.kernel.CommutativeGroup[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForByte", "tail" : ": Order[Byte] with Hash[Byte] with LowerBounded[Byte] with UpperBounded[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdOrderForByte", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForByte:cats.kernel.Order[Byte]withcats.kernel.Hash[Byte]withcats.kernel.LowerBounded[Byte]withcats.kernel.UpperBounded[Byte]", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int] with Hash[Int] with LowerBounded[Int] with UpperBounded[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]withcats.kernel.Hash[Int]withcats.kernel.LowerBounded[Int]withcats.kernel.UpperBounded[Int]", "kind" : "implicit val"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "checkAll", "tail" : "(name: String, ruleSet: RuleSet)(config: PropertyCheckConfiguration, prettifier: Prettifier, pos: Position): Unit", "member" : "org.typelevel.discipline.scalatest.FunSuiteDiscipline.checkAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#checkAll(name:String,ruleSet:org.typelevel.discipline.Laws#RuleSet)(implicitconfig:FunSuiteDiscipline.this.PropertyCheckConfiguration,implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "convertConfiguration", "tail" : "(config: PropertyCheckConfiguration): org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "member" : "org.typelevel.discipline.scalatest.Discipline.convertConfiguration", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertConfiguration(config:Discipline.this.PropertyCheckConfiguration):org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "kind" : "final def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), genAndNameF: (Gen[F], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),genAndNameF:(org.scalacheck.Gen[F],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], genF: Gen[F], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],genF:org.scalacheck.Gen[F],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, nameF: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,nameF:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,F,ASSERTION](fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,E,ASSERTION](fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,D,ASSERTION](fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,ASSERTION](nameA:String,nameB:String,nameC:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,C,ASSERTION](fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,ASSERTION](nameA:String,nameB:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,B,ASSERTION](fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,ASSERTION](genA:org.scalacheck.Gen[A],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,ASSERTION](nameA:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll[A,ASSERTION](fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(configParams: PropertyCheckConfigParam*): ConfiguredPropertyCheck", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#forAll(configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*):ScalaCheckDrivenPropertyChecks.this.ConfiguredPropertyCheck", "kind" : "def"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "whenever", "tail" : "(condition: Boolean)(fun: => T)(wa: WheneverAsserting[T]): Result", "member" : "org.scalatest.prop.Whenever.whenever", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#whenever[T](condition:Boolean)(fun:=>T)(implicitwa:org.scalatest.enablers.WheneverAsserting[T]):wa.Result", "kind" : "def"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.of", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToRegexWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToStringShouldWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.the", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#between[K,V,JMAP[k,v]<:java.util.Map[k,v]](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#between[E,C[_]](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#every[K,V,JMAP[k,v]<:java.util.Map[k,v]](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#every[K,V,MAP[k,v]<:scala.collection.Map[k,v]](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#every[E,C[_]](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.should.Matchers.message", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: => Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.should.Matchers.thrownBy", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneElementOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atMostOneElementOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderElementsOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#inOrderElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrder", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allElementsOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#allElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderOnly", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.only", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsInOrderAs", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#theSameElementsInOrderAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsAs", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#theSameElementsAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noElementsOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#noElementsOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noneOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneElementOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atLeastOneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneElementOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#oneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.should.Matchers.definedAt", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>=", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<=", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.should.Matchers.regex", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.should.Matchers.theSameInstanceAs", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.should.Matchers.value", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.should.Matchers.key", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.should.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.funsuite.AnyFunSuite.toString", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testDataFor", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.styleName", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testsFor", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.run", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTests", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.tags", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTest", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testNames", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.ignore", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.test", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerIgnoredTest", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerTest", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.markup", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.alert", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.note", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.info", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createDateTime", "tail" : "(seconds: Int, minutes: Int, hours: Int, dayOfMonth: Int, month: Int, year: Int): DateTime", "member" : "cron4s.testkit.DateTimeTestKitBase.createDateTime", "link" : "cron4s\/testkit\/IsDateTimeTestKit.html#createDateTime(seconds:Int,minutes:Int,hours:Int,dayOfMonth:Int,month:Int,year:Int):DateTime", "kind" : "abstract def"}], "class" : "cron4s\/testkit\/IsDateTimeTestKit.html", "kind" : "class"}, {"name" : "cron4s.testkit.SlowCron4sLawSuite", "trait" : "cron4s\/testkit\/SlowCron4sLawSuite.html", "kind" : "trait", "members_trait" : [{"label" : "ConfiguredPropertyCheck", "tail" : "", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.ConfiguredPropertyCheck", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ConfiguredPropertyCheckextendsAnyRef", "kind" : "class"}, {"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.StringShouldWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#StringShouldWrapperextendsMatchers.this.AnyShouldWrapper[String]withMatchers.this.StringShouldWrapperForVerb", "kind" : "final class"}, {"label" : "AnyShouldWrapper", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnyShouldWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#AnyShouldWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForCollectedString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForCollectedString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForCollectedString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfCollectedAny", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedArray", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfBeWordForCollectedArray[T]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForCollectedAny", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfContainWordForCollectedAny", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfNotWordForCollectedAny", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.Collected", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfHaveWordForExtent", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.TheSameInstanceAsPhrase", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AnWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.AWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ValueWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.KeyWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfFullyMatchWordForString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfEndWithWordForString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfStartWithWordForString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfIncludeWordForString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.RegexWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.ResultOfBeWordForAny", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.should.Matchers.HavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#DeterminedByEquivalence[T]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#DecidedByEquality[A]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.SlowCron4sLawSuite.generatorDrivenConfig", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#generatorDrivenConfig:SlowCron4sLawSuite.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "catsSyntaxParallelFoldMapA", "tail" : "(ta: T[A]): ParallelFoldMapAOps[T, A]", "member" : "cats.syntax.ParallelFoldMapASyntax.catsSyntaxParallelFoldMapA", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxParallelFoldMapA[T[_],A](ta:T[A]):cats.syntax.ParallelFoldMapAOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxWriterId", "tail" : "(a: A): WriterIdSyntax[A]", "member" : "cats.syntax.WriterSyntax.catsSyntaxWriterId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxWriterId[A](a:A):cats.syntax.WriterIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxVectors", "tail" : "(va: Vector[A]): VectorOps[A]", "member" : "cats.syntax.VectorSyntax.catsSyntaxVectors", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxVectors[A](va:Vector[A]):cats.syntax.VectorOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxValidatedId", "tail" : "(a: A): ValidatedIdSyntax[A]", "member" : "cats.syntax.ValidatedSyntax.catsSyntaxValidatedId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxValidatedId[A](a:A):cats.syntax.ValidatedIdSyntax[A]", "kind" : "implicit final def"}, {"label" : "toNonEmptyTraverseOps", "tail" : "(target: F[C])(tc: NonEmptyTraverse[F]): Ops[F, C] { type TypeClassType = cats.NonEmptyTraverse[F] }", "member" : "cats.NonEmptyTraverse.ToNonEmptyTraverseOps.toNonEmptyTraverseOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toNonEmptyTraverseOps[F[_],C](target:F[C])(implicittc:cats.NonEmptyTraverse[F]):cats.NonEmptyTraverse.Ops[F,C]{typeTypeClassType=cats.NonEmptyTraverse[F]}", "kind" : "implicit def"}, {"label" : "toTraverseOps", "tail" : "(target: F[C])(tc: Traverse[F]): Ops[F, C] { type TypeClassType = cats.Traverse[F] }", "member" : "cats.Traverse.ToTraverseOps.toTraverseOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toTraverseOps[F[_],C](target:F[C])(implicittc:cats.Traverse[F]):cats.Traverse.Ops[F,C]{typeTypeClassType=cats.Traverse[F]}", "kind" : "implicit def"}, {"label" : "toStrongOps", "tail" : "(target: F[A, B])(tc: Strong[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Strong[F] }", "member" : "cats.arrow.Strong.ToStrongOps.toStrongOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toStrongOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Strong[F]):cats.arrow.Strong.Ops[F,A,B]{typeTypeClassType=cats.arrow.Strong[F]}", "kind" : "implicit def"}, {"label" : "showInterpolator", "tail" : "(sc: StringContext): ShowInterpolator", "member" : "cats.syntax.ShowSyntax.showInterpolator", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#showInterpolator(sc:StringContext):cats.Show.ShowInterpolator", "kind" : "implicit final def"}, {"label" : "toShow", "tail" : "(target: A)(tc: Show[A]): Ops[A]", "member" : "cats.Show.ToShowOps.toShow", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toShow[A](target:A)(implicittc:cats.Show[A]):cats.Show.Ops[A]", "kind" : "implicit def"}, {"label" : "toSemigroupKOps", "tail" : "(target: F[A])(tc: SemigroupK[F]): Ops[F, A] { type TypeClassType = cats.SemigroupK[F] }", "member" : "cats.SemigroupK.ToSemigroupKOps.toSemigroupKOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toSemigroupKOps[F[_],A](target:F[A])(implicittc:cats.SemigroupK[F]):cats.SemigroupK.Ops[F,A]{typeTypeClassType=cats.SemigroupK[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxNestedReducible", "tail" : "(fga: F[G[A]])(arg0: Reducible[F]): NestedReducibleOps[F, G, A]", "member" : "cats.syntax.ReducibleSyntax.catsSyntaxNestedReducible", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxNestedReducible[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Reducible[F]):cats.syntax.NestedReducibleOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toReducibleOps", "tail" : "(target: F[D])(tc: Reducible[F]): Ops[F, D] { type TypeClassType = cats.Reducible[F] }", "member" : "cats.Reducible.ToReducibleOps.toReducibleOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toReducibleOps[F[_],D](target:F[D])(implicittc:cats.Reducible[F]):cats.Reducible.Ops[F,D]{typeTypeClassType=cats.Reducible[F]}", "kind" : "implicit def"}, {"label" : "toProfunctorOps", "tail" : "(target: F[A, B])(tc: Profunctor[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Profunctor[F] }", "member" : "cats.arrow.Profunctor.ToProfunctorOps.toProfunctorOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toProfunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Profunctor[F]):cats.arrow.Profunctor.Ops[F,A,B]{typeTypeClassType=cats.arrow.Profunctor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxParallelAp", "tail" : "(ma: M[A])(arg0: FlatMap[M]): ParallelApOps[M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelAp", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxParallelAp[M[_],A](ma:M[A])(implicitevidence$4:cats.FlatMap[M]):cats.syntax.ParallelApOps[M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelSequence", "tail" : "(tma: T[M[A]])(arg0: Traverse[T], arg1: Monad[M]): ParallelSequenceOps[T, M, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelSequence", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxParallelSequence[T[_],M[_],A](tma:T[M[A]])(implicitevidence$2:cats.Traverse[T],implicitevidence$3:cats.Monad[M]):cats.syntax.ParallelSequenceOps[T,M,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxParallelTraverse", "tail" : "(ta: T[A])(arg0: Traverse[T]): ParallelTraversableOps[T, A]", "member" : "cats.syntax.ParallelSyntax.catsSyntaxParallelTraverse", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxParallelTraverse[T[_],A](ta:T[A])(implicitevidence$1:cats.Traverse[T]):cats.syntax.ParallelTraversableOps[T,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Parallel", "tail" : "(t22: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20], M[A21])): Tuple22ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple22Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple22Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20],M[A21])):cats.syntax.Tuple22ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Parallel", "tail" : "(t21: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19], M[A20])): Tuple21ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple21Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple21Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19],M[A20])):cats.syntax.Tuple21ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Parallel", "tail" : "(t20: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18], M[A19])): Tuple20ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple20Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple20Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18],M[A19])):cats.syntax.Tuple20ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Parallel", "tail" : "(t19: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17], M[A18])): Tuple19ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple19Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple19Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17],M[A18])):cats.syntax.Tuple19ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Parallel", "tail" : "(t18: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16], M[A17])): Tuple18ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple18Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple18Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16],M[A17])):cats.syntax.Tuple18ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Parallel", "tail" : "(t17: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15], M[A16])): Tuple17ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple17Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple17Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15],M[A16])):cats.syntax.Tuple17ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Parallel", "tail" : "(t16: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14], M[A15])): Tuple16ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple16Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple16Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14],M[A15])):cats.syntax.Tuple16ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Parallel", "tail" : "(t15: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13], M[A14])): Tuple15ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple15Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple15Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13],M[A14])):cats.syntax.Tuple15ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Parallel", "tail" : "(t14: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12], M[A13])): Tuple14ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple14Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple14Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12],M[A13])):cats.syntax.Tuple14ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Parallel", "tail" : "(t13: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11], M[A12])): Tuple13ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple13Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple13Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11],M[A12])):cats.syntax.Tuple13ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Parallel", "tail" : "(t12: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10], M[A11])): Tuple12ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple12Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple12Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10],M[A11])):cats.syntax.Tuple12ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Parallel", "tail" : "(t11: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9], M[A10])): Tuple11ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple11Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple11Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9],M[A10])):cats.syntax.Tuple11ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Parallel", "tail" : "(t10: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8], M[A9])): Tuple10ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple10Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple10Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8],M[A9])):cats.syntax.Tuple10ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Parallel", "tail" : "(t9: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7], M[A8])): Tuple9ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple9Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple9Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7],M[A8])):cats.syntax.Tuple9ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Parallel", "tail" : "(t8: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6], M[A7])): Tuple8ParallelOps[M, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple8Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple8Parallel[M[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6],M[A7])):cats.syntax.Tuple8ParallelOps[M,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Parallel", "tail" : "(t7: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5], M[A6])): Tuple7ParallelOps[M, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple7Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple7Parallel[M[_],A0,A1,A2,A3,A4,A5,A6](t7:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5],M[A6])):cats.syntax.Tuple7ParallelOps[M,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Parallel", "tail" : "(t6: (M[A0], M[A1], M[A2], M[A3], M[A4], M[A5])): Tuple6ParallelOps[M, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple6Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple6Parallel[M[_],A0,A1,A2,A3,A4,A5](t6:(M[A0],M[A1],M[A2],M[A3],M[A4],M[A5])):cats.syntax.Tuple6ParallelOps[M,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Parallel", "tail" : "(t5: (M[A0], M[A1], M[A2], M[A3], M[A4])): Tuple5ParallelOps[M, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple5Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple5Parallel[M[_],A0,A1,A2,A3,A4](t5:(M[A0],M[A1],M[A2],M[A3],M[A4])):cats.syntax.Tuple5ParallelOps[M,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Parallel", "tail" : "(t4: (M[A0], M[A1], M[A2], M[A3])): Tuple4ParallelOps[M, A0, A1, A2, A3]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple4Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple4Parallel[M[_],A0,A1,A2,A3](t4:(M[A0],M[A1],M[A2],M[A3])):cats.syntax.Tuple4ParallelOps[M,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Parallel", "tail" : "(t3: (M[A0], M[A1], M[A2])): Tuple3ParallelOps[M, A0, A1, A2]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple3Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple3Parallel[M[_],A0,A1,A2](t3:(M[A0],M[A1],M[A2])):cats.syntax.Tuple3ParallelOps[M,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Parallel", "tail" : "(t2: (M[A0], M[A1])): Tuple2ParallelOps[M, A0, A1]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple2Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple2Parallel[M[_],A0,A1](t2:(M[A0],M[A1])):cats.syntax.Tuple2ParallelOps[M,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Parallel", "tail" : "(t1: (M[A0])): Tuple1ParallelOps[M, A0]", "member" : "cats.syntax.TupleParallelSyntax.catsSyntaxTuple1Parallel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple1Parallel[M[_],A0](t1:(M[A0],)):cats.syntax.Tuple1ParallelOps[M,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxOrder", "tail" : "(a: A)(arg0: Order[A]): OrderOps[A]", "member" : "cats.syntax.OrderSyntax.catsSyntaxOrder", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxOrder[A](a:A)(implicitevidence$1:cats.Order[A]):cats.syntax.OrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxPartialOrder", "tail" : "(a: A)(arg0: PartialOrder[A]): PartialOrderOps[A]", "member" : "cats.syntax.PartialOrderSyntax.catsSyntaxPartialOrder", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxPartialOrder[A](a:A)(implicitevidence$1:cats.PartialOrder[A]):cats.syntax.PartialOrderOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOption", "tail" : "(oa: Option[A]): OptionOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxOption[A](oa:Option[A]):cats.syntax.OptionOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxOptionId", "tail" : "(a: A): OptionIdOps[A]", "member" : "cats.syntax.OptionSyntax.catsSyntaxOptionId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxOptionId[A](a:A):cats.syntax.OptionIdOps[A]", "kind" : "implicit final def"}, {"label" : "none", "tail" : "(): Option[A]", "member" : "cats.syntax.OptionSyntax.none", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#none[A]:Option[A]", "kind" : "final def"}, {"label" : "catsSyntaxMonoid", "tail" : "(a: A)(arg0: Monoid[A]): MonoidOps[A]", "member" : "cats.syntax.MonoidSyntax.catsSyntaxMonoid", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxMonoid[A](a:A)(implicitevidence$1:cats.Monoid[A]):cats.syntax.MonoidOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadIdOps", "tail" : "(a: A): MonadIdOps[A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonadIdOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxMonadIdOps[A](a:A):cats.syntax.MonadIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonad", "tail" : "(fa: F[A]): MonadOps[F, A]", "member" : "cats.syntax.MonadSyntax.catsSyntaxMonad", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxMonad[F[_],A](fa:F[A]):cats.syntax.MonadOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadErrorRethrow", "tail" : "(fea: F[Either[E, A]])(F: MonadError[F, _ >: E]): MonadErrorRethrowOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadErrorRethrow", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxMonadErrorRethrow[F[_],E,A](fea:F[Either[E,A]])(implicitF:cats.MonadError[F,_>:E]):cats.syntax.MonadErrorRethrowOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxMonadError", "tail" : "(fa: F[A])(F: MonadError[F, E]): MonadErrorOps[F, E, A]", "member" : "cats.syntax.MonadErrorSyntax.catsSyntaxMonadError", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxMonadError[F[_],E,A](fa:F[A])(implicitF:cats.MonadError[F,E]):cats.syntax.MonadErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxList", "tail" : "(la: List[A]): ListOps[A]", "member" : "cats.syntax.ListSyntax.catsSyntaxList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxList[A](la:List[A]):cats.syntax.ListOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIorId", "tail" : "(a: A): IorIdOps[A]", "member" : "cats.syntax.IorSyntax.catsSyntaxIorId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxIorId[A](a:A):cats.syntax.IorIdOps[A]", "kind" : "implicit final def"}, {"label" : "toInvariantOps", "tail" : "(target: F[A])(tc: Invariant[F]): Ops[F, A] { type TypeClassType = cats.Invariant[F] }", "member" : "cats.Invariant.ToInvariantOps.toInvariantOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toInvariantOps[F[_],A](target:F[A])(implicittc:cats.Invariant[F]):cats.Invariant.Ops[F,A]{typeTypeClassType=cats.Invariant[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxHash", "tail" : "(a: A)(arg0: Hash[A]): HashOps[A]", "member" : "cats.syntax.HashSyntax.catsSyntaxHash", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxHash[A](a:A)(implicitevidence$1:cats.Hash[A]):cats.syntax.HashOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxGroup", "tail" : "(a: A)(arg0: Group[A]): GroupOps[A]", "member" : "cats.syntax.GroupSyntax.catsSyntaxGroup", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxGroup[A](a:A)(implicitevidence$1:cats.Group[A]):cats.syntax.GroupOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxSemigroup", "tail" : "(a: A)(arg0: Semigroup[A]): SemigroupOps[A]", "member" : "cats.syntax.SemigroupSyntax.catsSyntaxSemigroup", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxSemigroup[A](a:A)(implicitevidence$1:cats.Semigroup[A]):cats.syntax.SemigroupOps[A]", "kind" : "implicit final def"}, {"label" : "toFunctorOps", "tail" : "(target: F[A])(tc: Functor[F]): Ops[F, A] { type TypeClassType = cats.Functor[F] }", "member" : "cats.Functor.ToFunctorOps.toFunctorOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toFunctorOps[F[_],A](target:F[A])(implicittc:cats.Functor[F]):cats.Functor.Ops[F,A]{typeTypeClassType=cats.Functor[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFoldOps", "tail" : "(fa: F[A])(arg0: Foldable[F]): FoldableOps[F, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxFoldOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxFoldOps[F[_],A](fa:F[A])(implicitevidence$2:cats.Foldable[F]):cats.syntax.FoldableOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedFoldable", "tail" : "(fga: F[G[A]])(arg0: Foldable[F]): NestedFoldableOps[F, G, A]", "member" : "cats.syntax.FoldableSyntax.catsSyntaxNestedFoldable", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxNestedFoldable[F[_],G[_],A](fga:F[G[A]])(implicitevidence$1:cats.Foldable[F]):cats.syntax.NestedFoldableOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "toUnorderedFoldableOps", "tail" : "(target: F[A])(tc: UnorderedFoldable[F]): Ops[F, A] { type TypeClassType = cats.UnorderedFoldable[F] }", "member" : "cats.UnorderedFoldable.ToUnorderedFoldableOps.toUnorderedFoldableOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toUnorderedFoldableOps[F[_],A](target:F[A])(implicittc:cats.UnorderedFoldable[F]):cats.UnorderedFoldable.Ops[F,A]{typeTypeClassType=cats.UnorderedFoldable[F]}", "kind" : "implicit def"}, {"label" : "toFoldableOps", "tail" : "(target: F[D])(tc: Foldable[F]): Ops[F, D] { type TypeClassType = cats.Foldable[F] }", "member" : "cats.Foldable.ToFoldableOps.toFoldableOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toFoldableOps[F[_],D](target:F[D])(implicittc:cats.Foldable[F]):cats.Foldable.Ops[F,D]{typeTypeClassType=cats.Foldable[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxFlatMapOps", "tail" : "(fa: F[A])(arg0: FlatMap[F]): FlatMapOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxFlatMapOps[F[_],A](fa:F[A])(implicitevidence$3:cats.FlatMap[F]):cats.syntax.FlatMapOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatMapIdOps", "tail" : "(a: A): FlatMapIdOps[A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatMapIdOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxFlatMapIdOps[A](a:A):cats.syntax.FlatMapIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxIfM", "tail" : "(fa: F[Boolean])(arg0: FlatMap[F]): IfMOps[F]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxIfM", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxIfM[F[_]](fa:F[Boolean])(implicitevidence$2:cats.FlatMap[F]):cats.syntax.IfMOps[F]", "kind" : "implicit final def"}, {"label" : "catsSyntaxFlatten", "tail" : "(ffa: F[F[A]])(arg0: FlatMap[F]): FlattenOps[F, A]", "member" : "cats.syntax.FlatMapSyntax.catsSyntaxFlatten", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxFlatten[F[_],A](ffa:F[F[A]])(implicitevidence$1:cats.FlatMap[F]):cats.syntax.FlattenOps[F,A]", "kind" : "implicit final def"}, {"label" : "toFlatMapOps", "tail" : "(target: F[C])(tc: FlatMap[F]): Ops[F, C] { type TypeClassType = cats.FlatMap[F] }", "member" : "cats.FlatMap.ToFlatMapOps.toFlatMapOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toFlatMapOps[F[_],C](target:F[C])(implicittc:cats.FlatMap[F]):cats.FlatMap.Ops[F,C]{typeTypeClassType=cats.FlatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxEq", "tail" : "(a: A)(arg0: Eq[A]): EqOps[A]", "member" : "cats.syntax.EqSyntax.catsSyntaxEq", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxEq[A](a:A)(implicitevidence$1:cats.Eq[A]):cats.syntax.EqOps[A]", "kind" : "implicit def"}, {"label" : "catsSyntaxEitherId", "tail" : "(a: A): EitherIdOps[A]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxEitherId[A](a:A):cats.syntax.EitherIdOps[A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxRight", "tail" : "(right: Right[A, B]): RightOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxRight", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxRight[A,B](right:Right[A,B]):cats.syntax.RightOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxLeft", "tail" : "(left: Left[A, B]): LeftOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxLeft", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxLeft[A,B](left:Left[A,B]):cats.syntax.LeftOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherObject", "tail" : "(either: Either.type): EitherObjectOps", "member" : "cats.syntax.EitherSyntax.catsSyntaxEitherObject", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxEitherObject(either:Either.type):cats.syntax.EitherObjectOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxEither", "tail" : "(eab: Either[A, B]): EitherOps[A, B]", "member" : "cats.syntax.EitherSyntax.catsSyntaxEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxEither[A,B](eab:Either[A,B]):cats.syntax.EitherOps[A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxEitherK", "tail" : "(a: F[A]): EitherKOps[F, A]", "member" : "cats.syntax.EitherKSyntax.catsSyntaxEitherK", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxEitherK[F[_],A](a:F[A]):cats.syntax.EitherKOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantSemigroupal", "tail" : "(fa: F[A])(F: ContravariantSemigroupal[F]): Ops[F, A]", "member" : "cats.syntax.ContravariantSemigroupalSyntax.catsSyntaxContravariantSemigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxContravariantSemigroupal[F[_],A](fa:F[A])(implicitF:cats.ContravariantSemigroupal[F]):cats.ContravariantSemigroupal.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxContravariantMonoidal", "tail" : "(fa: F[A])(F: ContravariantMonoidal[F]): ContravariantMonoidalOps[F, A]", "member" : "cats.syntax.ContravariantMonoidalSyntax.catsSyntaxContravariantMonoidal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxContravariantMonoidal[F[_],A](fa:F[A])(implicitF:cats.ContravariantMonoidal[F]):cats.syntax.ContravariantMonoidalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxDistributiveOps", "tail" : "(fa: F[A])(arg0: Functor[F]): DistributiveOps[F, A]", "member" : "cats.syntax.DistributiveSyntax.catsSyntaxDistributiveOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxDistributiveOps[F[_],A](fa:F[A])(implicitevidence$1:cats.Functor[F]):cats.syntax.DistributiveOps[F,A]", "kind" : "implicit final def"}, {"label" : "toDistributiveOps", "tail" : "(target: F[A])(tc: Distributive[F]): Ops[F, A] { type TypeClassType = cats.Distributive[F] }", "member" : "cats.Distributive.ToDistributiveOps.toDistributiveOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toDistributiveOps[F[_],A](target:F[A])(implicittc:cats.Distributive[F]):cats.Distributive.Ops[F,A]{typeTypeClassType=cats.Distributive[F]}", "kind" : "implicit def"}, {"label" : "toContravariantOps", "tail" : "(target: F[A])(tc: Contravariant[F]): Ops[F, A] { type TypeClassType = cats.Contravariant[F] }", "member" : "cats.Contravariant.ToContravariantOps.toContravariantOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toContravariantOps[F[_],A](target:F[A])(implicittc:cats.Contravariant[F]):cats.Contravariant.Ops[F,A]{typeTypeClassType=cats.Contravariant[F]}", "kind" : "implicit def"}, {"label" : "toComposeOps", "tail" : "(target: F[B, D])(tc: Compose[F]): Ops[F, B, D] { type TypeClassType = cats.arrow.Compose[F] }", "member" : "cats.arrow.Compose.ToComposeOps.toComposeOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toComposeOps[F[_,_],B,D](target:F[B,D])(implicittc:cats.arrow.Compose[F]):cats.arrow.Compose.Ops[F,B,D]{typeTypeClassType=cats.arrow.Compose[F]}", "kind" : "implicit def"}, {"label" : "toComonadOps", "tail" : "(target: F[A])(tc: Comonad[F]): Ops[F, A] { type TypeClassType = cats.Comonad[F] }", "member" : "cats.Comonad.ToComonadOps.toComonadOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toComonadOps[F[_],A](target:F[A])(implicittc:cats.Comonad[F]):cats.Comonad.Ops[F,A]{typeTypeClassType=cats.Comonad[F]}", "kind" : "implicit def"}, {"label" : "toCoflatMapOps", "tail" : "(target: F[A])(tc: CoflatMap[F]): Ops[F, A] { type TypeClassType = cats.CoflatMap[F] }", "member" : "cats.CoflatMap.ToCoflatMapOps.toCoflatMapOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toCoflatMapOps[F[_],A](target:F[A])(implicittc:cats.CoflatMap[F]):cats.CoflatMap.Ops[F,A]{typeTypeClassType=cats.CoflatMap[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxSemigroupal", "tail" : "(fa: F[A])(F: Semigroupal[F]): SemigroupalOps[F, A]", "member" : "cats.syntax.SemigroupalSyntax.catsSyntaxSemigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxSemigroupal[F[_],A](fa:F[A])(implicitF:cats.Semigroupal[F]):cats.syntax.SemigroupalOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxBitraverse", "tail" : "(fab: F[A, B])(arg0: Bitraverse[F]): BitraverseOps[F, A, B]", "member" : "cats.syntax.BitraverseSyntax.catsSyntaxBitraverse", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxBitraverse[F[_,_],A,B](fab:F[A,B])(implicitevidence$1:cats.Bitraverse[F]):cats.syntax.BitraverseOps[F,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxNestedBitraverse", "tail" : "(fgagb: F[G[A], G[B]])(arg0: Bitraverse[F]): NestedBitraverseOps[F, G, A, B]", "member" : "cats.syntax.BitraverseSyntax1.catsSyntaxNestedBitraverse", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxNestedBitraverse[F[_,_],G[_],A,B](fgagb:F[G[A],G[B]])(implicitevidence$2:cats.Bitraverse[F]):cats.syntax.NestedBitraverseOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "toBifoldableOps", "tail" : "(target: F[A, B])(tc: Bifoldable[F]): Ops[F, A, B] { type TypeClassType = cats.Bifoldable[F] }", "member" : "cats.Bifoldable.ToBifoldableOps.toBifoldableOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toBifoldableOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifoldable[F]):cats.Bifoldable.Ops[F,A,B]{typeTypeClassType=cats.Bifoldable[F]}", "kind" : "implicit def"}, {"label" : "toBifunctorOps", "tail" : "(target: F[A, B])(tc: Bifunctor[F]): Ops[F, A, B] { type TypeClassType = cats.Bifunctor[F] }", "member" : "cats.Bifunctor.ToBifunctorOps.toBifunctorOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toBifunctorOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.Bifunctor[F]):cats.Bifunctor.Ops[F,A,B]{typeTypeClassType=cats.Bifunctor[F]}", "kind" : "implicit def"}, {"label" : "toArrowChoiceOps", "tail" : "(target: F[A, E])(tc: ArrowChoice[F]): Ops[F, A, E] { type TypeClassType = cats.arrow.ArrowChoice[F] }", "member" : "cats.arrow.ArrowChoice.ToArrowChoiceOps.toArrowChoiceOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toArrowChoiceOps[F[_,_],A,E](target:F[A,E])(implicittc:cats.arrow.ArrowChoice[F]):cats.arrow.ArrowChoice.Ops[F,A,E]{typeTypeClassType=cats.arrow.ArrowChoice[F]}", "kind" : "implicit def"}, {"label" : "toArrowOps", "tail" : "(target: F[A, B])(tc: Arrow[F]): Ops[F, A, B] { type TypeClassType = cats.arrow.Arrow[F] }", "member" : "cats.arrow.Arrow.ToArrowOps.toArrowOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toArrowOps[F[_,_],A,B](target:F[A,B])(implicittc:cats.arrow.Arrow[F]):cats.arrow.Arrow.Ops[F,A,B]{typeTypeClassType=cats.arrow.Arrow[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxApplyOps", "tail" : "(fa: F[A]): ApplyOps[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApplyOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxApplyOps[F[_],A](fa:F[A]):cats.syntax.ApplyOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApply", "tail" : "(fa: F[A])(F: Apply[F]): Ops[F, A]", "member" : "cats.syntax.ApplySyntax.catsSyntaxApply", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxApply[F[_],A](fa:F[A])(implicitF:cats.Apply[F]):cats.Apply.Ops[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxTuple22Semigroupal", "tail" : "(t22: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20], F[A21])): Tuple22SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple22Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple22Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](t22:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20],F[A21])):cats.syntax.Tuple22SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple21Semigroupal", "tail" : "(t21: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19], F[A20])): Tuple21SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple21Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple21Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](t21:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19],F[A20])):cats.syntax.Tuple21SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple20Semigroupal", "tail" : "(t20: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18], F[A19])): Tuple20SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple20Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple20Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](t20:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18],F[A19])):cats.syntax.Tuple20SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple19Semigroupal", "tail" : "(t19: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17], F[A18])): Tuple19SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple19Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple19Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](t19:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17],F[A18])):cats.syntax.Tuple19SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple18Semigroupal", "tail" : "(t18: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16], F[A17])): Tuple18SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple18Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple18Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](t18:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16],F[A17])):cats.syntax.Tuple18SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple17Semigroupal", "tail" : "(t17: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15], F[A16])): Tuple17SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple17Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple17Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](t17:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15],F[A16])):cats.syntax.Tuple17SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple16Semigroupal", "tail" : "(t16: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14], F[A15])): Tuple16SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple16Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple16Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](t16:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14],F[A15])):cats.syntax.Tuple16SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple15Semigroupal", "tail" : "(t15: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13], F[A14])): Tuple15SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple15Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple15Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](t15:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13],F[A14])):cats.syntax.Tuple15SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple14Semigroupal", "tail" : "(t14: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12], F[A13])): Tuple14SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple14Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple14Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](t14:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12],F[A13])):cats.syntax.Tuple14SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple13Semigroupal", "tail" : "(t13: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11], F[A12])): Tuple13SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple13Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple13Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](t13:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11],F[A12])):cats.syntax.Tuple13SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple12Semigroupal", "tail" : "(t12: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10], F[A11])): Tuple12SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple12Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple12Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](t12:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10],F[A11])):cats.syntax.Tuple12SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple11Semigroupal", "tail" : "(t11: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9], F[A10])): Tuple11SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple11Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple11Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](t11:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9],F[A10])):cats.syntax.Tuple11SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple10Semigroupal", "tail" : "(t10: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8], F[A9])): Tuple10SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple10Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple10Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](t10:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8],F[A9])):cats.syntax.Tuple10SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple9Semigroupal", "tail" : "(t9: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7], F[A8])): Tuple9SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7, A8]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple9Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple9Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7,A8](t9:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7],F[A8])):cats.syntax.Tuple9SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7,A8]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple8Semigroupal", "tail" : "(t8: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6], F[A7])): Tuple8SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6, A7]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple8Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple8Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6,A7](t8:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6],F[A7])):cats.syntax.Tuple8SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6,A7]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple7Semigroupal", "tail" : "(t7: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5], F[A6])): Tuple7SemigroupalOps[F, A0, A1, A2, A3, A4, A5, A6]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple7Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple7Semigroupal[F[_],A0,A1,A2,A3,A4,A5,A6](t7:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5],F[A6])):cats.syntax.Tuple7SemigroupalOps[F,A0,A1,A2,A3,A4,A5,A6]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple6Semigroupal", "tail" : "(t6: (F[A0], F[A1], F[A2], F[A3], F[A4], F[A5])): Tuple6SemigroupalOps[F, A0, A1, A2, A3, A4, A5]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple6Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple6Semigroupal[F[_],A0,A1,A2,A3,A4,A5](t6:(F[A0],F[A1],F[A2],F[A3],F[A4],F[A5])):cats.syntax.Tuple6SemigroupalOps[F,A0,A1,A2,A3,A4,A5]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple5Semigroupal", "tail" : "(t5: (F[A0], F[A1], F[A2], F[A3], F[A4])): Tuple5SemigroupalOps[F, A0, A1, A2, A3, A4]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple5Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple5Semigroupal[F[_],A0,A1,A2,A3,A4](t5:(F[A0],F[A1],F[A2],F[A3],F[A4])):cats.syntax.Tuple5SemigroupalOps[F,A0,A1,A2,A3,A4]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple4Semigroupal", "tail" : "(t4: (F[A0], F[A1], F[A2], F[A3])): Tuple4SemigroupalOps[F, A0, A1, A2, A3]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple4Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple4Semigroupal[F[_],A0,A1,A2,A3](t4:(F[A0],F[A1],F[A2],F[A3])):cats.syntax.Tuple4SemigroupalOps[F,A0,A1,A2,A3]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple3Semigroupal", "tail" : "(t3: (F[A0], F[A1], F[A2])): Tuple3SemigroupalOps[F, A0, A1, A2]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple3Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple3Semigroupal[F[_],A0,A1,A2](t3:(F[A0],F[A1],F[A2])):cats.syntax.Tuple3SemigroupalOps[F,A0,A1,A2]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple2Semigroupal", "tail" : "(t2: (F[A0], F[A1])): Tuple2SemigroupalOps[F, A0, A1]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple2Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple2Semigroupal[F[_],A0,A1](t2:(F[A0],F[A1])):cats.syntax.Tuple2SemigroupalOps[F,A0,A1]", "kind" : "implicit def"}, {"label" : "catsSyntaxTuple1Semigroupal", "tail" : "(t1: (F[A0])): Tuple1SemigroupalOps[F, A0]", "member" : "cats.syntax.TupleSemigroupalSyntax.catsSyntaxTuple1Semigroupal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxTuple1Semigroupal[F[_],A0](t1:(F[A0],)):cats.syntax.Tuple1SemigroupalOps[F,A0]", "kind" : "implicit def"}, {"label" : "catsSyntaxApplicativeError", "tail" : "(fa: F[A])(F: ApplicativeError[F, E]): ApplicativeErrorOps[F, E, A]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeError", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxApplicativeError[F[_],E,A](fa:F[A])(implicitF:cats.ApplicativeError[F,E]):cats.syntax.ApplicativeErrorOps[F,E,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeErrorId", "tail" : "(e: E): ApplicativeErrorIdOps[E]", "member" : "cats.syntax.ApplicativeErrorSyntax.catsSyntaxApplicativeErrorId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxApplicativeErrorId[E](e:E):cats.syntax.ApplicativeErrorIdOps[E]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicative", "tail" : "(fa: F[A]): ApplicativeOps[F, A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicative", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxApplicative[F[_],A](fa:F[A]):cats.syntax.ApplicativeOps[F,A]", "kind" : "implicit final def"}, {"label" : "catsSyntaxApplicativeId", "tail" : "(a: A): ApplicativeIdOps[A]", "member" : "cats.syntax.ApplicativeSyntax.catsSyntaxApplicativeId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxApplicativeId[A](a:A):cats.syntax.ApplicativeIdOps[A]", "kind" : "implicit final def"}, {"label" : "toAlignOps", "tail" : "(target: F[A])(tc: Align[F]): Ops[F, A] { type TypeClassType = cats.Align[F] }", "member" : "cats.Align.ToAlignOps.toAlignOps", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toAlignOps[F[_],A](target:F[A])(implicittc:cats.Align[F]):cats.Align.Ops[F,A]{typeTypeClassType=cats.Align[F]}", "kind" : "implicit def"}, {"label" : "catsSyntaxAlternativeGuard", "tail" : "(b: Boolean): GuardOps", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeGuard", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxAlternativeGuard(b:Boolean):cats.syntax.GuardOps", "kind" : "implicit final def"}, {"label" : "catsSyntaxAlternativeSeparate", "tail" : "(fgab: F[G[A, B]]): SeparateOps[F, G, A, B]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxAlternativeSeparate", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxAlternativeSeparate[F[_],G[_,_],A,B](fgab:F[G[A,B]]):cats.syntax.SeparateOps[F,G,A,B]", "kind" : "implicit final def"}, {"label" : "catsSyntaxUnite", "tail" : "(fga: F[G[A]]): UniteOps[F, G, A]", "member" : "cats.syntax.AlternativeSyntax.catsSyntaxUnite", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSyntaxUnite[F[_],G[_],A](fga:F[G[A]]):cats.syntax.UniteOps[F,G,A]", "kind" : "implicit final def"}, {"label" : "catsStdNonEmptyParallelForVectorZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.VectorInstances.catsStdNonEmptyParallelForVectorZipVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdNonEmptyParallelForVectorZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "implicit def"}, {"label" : "catsStdShowForVector", "tail" : "(arg0: Show[A]): Show[Vector[A]]", "member" : "cats.instances.VectorInstances.catsStdShowForVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForVector[A](implicitevidence$1:cats.Show[A]):cats.Show[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForVector", "tail" : ": Traverse[Vector] with Monad[Vector] with Alternative[Vector] with CoflatMap[Vector] with Align[Vector]", "member" : "cats.instances.VectorInstances.catsStdInstancesForVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForVector:cats.Traverse[Vector]withcats.Monad[Vector]withcats.Alternative[Vector]withcats.CoflatMap[Vector]withcats.Align[Vector]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForVector", "tail" : "(): Monoid[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdMonoidForVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForVector[A]:cats.kernel.Monoid[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForVector", "tail" : "(arg0: Order[A]): Order[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances.catsKernelStdOrderForVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForVector[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForVector", "tail" : "(arg0: Hash[A]): Hash[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdHashForVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForVector[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForVector", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances1.catsKernelStdPartialOrderForVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForVector[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForVector", "tail" : "(arg0: Eq[A]): Eq[Vector[A]]", "member" : "cats.kernel.instances.VectorInstances2.catsKernelStdEqForVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForVector[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Vector[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForUUID", "tail" : ": Show[UUID]", "member" : "cats.instances.UUIDInstances.catsStdShowForUUID", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForUUID:cats.Show[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUUID", "tail" : ": Order[UUID] with Hash[UUID] with LowerBounded[UUID] with UpperBounded[UUID]", "member" : "cats.kernel.instances.UUIDInstances.catsKernelStdOrderForUUID", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForUUID:cats.kernel.Order[java.util.UUID]withcats.kernel.Hash[java.util.UUID]withcats.kernel.LowerBounded[java.util.UUID]withcats.kernel.UpperBounded[java.util.UUID]", "kind" : "implicit val"}, {"label" : "catsStdEqForTry", "tail" : "(A: Eq[A], T: Eq[Throwable]): Eq[Try[A]]", "member" : "cats.instances.TryInstances.catsStdEqForTry", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdEqForTry[A,T](implicitA:cats.Eq[A],implicitT:cats.Eq[Throwable]):cats.Eq[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForTry", "tail" : "(A: Show[A]): Show[Try[A]]", "member" : "cats.instances.TryInstances.catsStdShowForTry", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForTry[A](implicitA:cats.Show[A]):cats.Show[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTry", "tail" : "(): MonadError[Try, Throwable] with CoflatMap[Try] with Traverse[Try] with Monad[Try]", "member" : "cats.instances.TryInstances.catsStdInstancesForTry", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForTry:cats.MonadError[scala.util.Try,Throwable]withcats.CoflatMap[scala.util.Try]withcats.Traverse[scala.util.Try]withcats.Monad[scala.util.Try]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForTry", "tail" : "(arg0: Monoid[A]): Monoid[Try[A]]", "member" : "cats.instances.TryInstances1.catsStdMonoidForTry", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdMonoidForTry[A](implicitevidence$1:cats.Monoid[A]):cats.Monoid[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForTry", "tail" : "(arg0: Semigroup[A]): Semigroup[Try[A]]", "member" : "cats.instances.TryInstances2.catsStdSemigroupForTry", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdSemigroupForTry[A](implicitevidence$2:cats.Semigroup[A]):cats.Semigroup[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "catsInstancesForTailRec", "tail" : "(): StackSafeMonad[TailRec] with Defer[TailRec]", "member" : "cats.instances.TailRecInstances.catsInstancesForTailRec", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsInstancesForTailRec:cats.StackSafeMonad[util.control.TailCalls.TailRec]withcats.Defer[util.control.TailCalls.TailRec]", "kind" : "implicit def"}, {"label" : "catsStdShowForSymbol", "tail" : ": Show[Symbol]", "member" : "cats.instances.SymbolInstances.catsStdShowForSymbol", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForSymbol:cats.Show[Symbol]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForSymbol", "tail" : ": Order[Symbol] with Hash[Symbol] with LowerBounded[Symbol]", "member" : "cats.kernel.instances.SymbolInstances.catsKernelStdOrderForSymbol", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForSymbol:cats.kernel.Order[Symbol]withcats.kernel.Hash[Symbol]withcats.kernel.LowerBounded[Symbol]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String] with Hash[String] with LowerBounded[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForString:cats.kernel.Order[String]withcats.kernel.Hash[String]withcats.kernel.LowerBounded[String]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForStream", "tail" : ": Traverse[Stream] with Alternative[Stream] with Monad[Stream] with CoflatMap[Stream] with Align[Stream]", "member" : "cats.instances.StreamInstances.catsStdInstancesForStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForStream:cats.Traverse[Stream]withcats.Alternative[Stream]withcats.Monad[Stream]withcats.CoflatMap[Stream]withcats.Align[Stream]", "kind" : "implicit val"}, {"label" : "catsStdParallelForStreamZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.StreamInstances.catsStdParallelForStreamZipStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdParallelForStreamZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "implicit def"}, {"label" : "catsStdShowForStream", "tail" : "(arg0: Show[A]): Show[Stream[A]]", "member" : "cats.instances.StreamInstances.catsStdShowForStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForStream[A](implicitevidence$1:cats.Show[A]):cats.Show[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForStream", "tail" : "(): Monoid[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdMonoidForStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForStream[A]:cats.kernel.Monoid[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForStream", "tail" : "(arg0: Order[A]): Order[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances.catsKernelStdOrderForStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForStream[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForStream", "tail" : "(arg0: Hash[A]): Hash[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdHashForStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForStream[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForStream", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances1.catsKernelStdPartialOrderForStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForStream[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForStream", "tail" : "(arg0: Eq[A]): Eq[Stream[A]]", "member" : "cats.kernel.instances.StreamInstances2.catsKernelStdEqForStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForStream[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[Stream[A]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedSet", "tail" : "(arg0: Show[A]): Show[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances.catsStdShowForSortedSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForSortedSet[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.SortedSet[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSortedSet", "tail" : ": Foldable[SortedSet] with SemigroupK[SortedSet]", "member" : "cats.instances.SortedSetInstances.catsStdInstancesForSortedSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForSortedSet:cats.Foldable[scala.collection.immutable.SortedSet]withcats.SemigroupK[scala.collection.immutable.SortedSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdSemilatticeForSortedSet", "tail" : "(arg0: Order[A]): BoundedSemilattice[SortedSet[A]]", "member" : "cats.instances.SortedSetInstances1.catsKernelStdSemilatticeForSortedSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForSortedSet[A](implicitevidence$5:cats.kernel.Order[A]):cats.kernel.BoundedSemilattice[scala.collection.immutable.SortedSet[A]]", "kind" : "def"}, {"label" : "catsStdInstancesForSortedMap", "tail" : "(arg0: Order[K]): Traverse[[β$0$]SortedMap[K, β$0$]] with FlatMap[[β$1$]SortedMap[K, β$1$]] with Align[[β$2$]SortedMap[K, β$2$]]", "member" : "cats.instances.SortedMapInstances.catsStdInstancesForSortedMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForSortedMap[K](implicitevidence$7:cats.Order[K]):cats.Traverse[[β$0$]scala.collection.immutable.SortedMap[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.SortedMap[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.SortedMap[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForSortedMap", "tail" : "(arg0: Order[A], showA: Show[A], showB: Show[B]): Show[SortedMap[A, B]]", "member" : "cats.instances.SortedMapInstances.catsStdShowForSortedMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForSortedMap[A,B](implicitevidence$6:cats.Order[A],implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[scala.collection.immutable.SortedMap[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: CommutativeSemigroup[V]): CommutativeMonoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdCommutativeMonoidForSortedMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdCommutativeMonoidForSortedMap[K,V](implicitevidence$4:cats.Order[K],implicitevidence$5:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdHashForSortedMap", "tail" : "(arg0: Hash[K], arg1: Order[K], arg2: Hash[V]): Hash[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances.catsStdHashForSortedMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdHashForSortedMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.Order[K],implicitevidence$3:cats.kernel.Hash[V]):cats.kernel.Hash[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdMonoidForSortedMap", "tail" : "(arg0: Order[K], arg1: Semigroup[V]): Monoid[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances2.catsStdMonoidForSortedMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdMonoidForSortedMap[K,V](implicitevidence$10:cats.Order[K],implicitevidence$11:cats.kernel.Semigroup[V]):cats.Monoid[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdEqForSortedMap", "tail" : "(arg0: Order[K], arg1: Eq[V]): Eq[SortedMap[K, V]]", "member" : "cats.instances.SortedMapInstances1.catsStdEqForSortedMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdEqForSortedMap[K,V](implicitevidence$8:cats.Order[K],implicitevidence$9:cats.kernel.Eq[V]):cats.kernel.Eq[scala.collection.immutable.SortedMap[K,V]]", "kind" : "def"}, {"label" : "catsStdShowForSet", "tail" : "(arg0: Show[A]): Show[Set[A]]", "member" : "cats.instances.SetInstances.catsStdShowForSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForSet[A](implicitevidence$3:cats.Show[A]):cats.Show[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForSet", "tail" : ": UnorderedTraverse[Set] with MonoidK[Set]", "member" : "cats.instances.SetInstances.catsStdInstancesForSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForSet:cats.UnorderedTraverse[Set]withcats.MonoidK[Set]", "kind" : "implicit val"}, {"label" : "catsKernelStdHashForSet", "tail" : "(): Hash[Set[A]]", "member" : "cats.kernel.instances.SetInstances.catsKernelStdHashForSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForSet[A]:cats.kernel.Hash[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForSet", "tail" : "(): BoundedSemilattice[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdSemilatticeForSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForSet[A]:cats.kernel.BoundedSemilattice[Set[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForSet", "tail" : "(): PartialOrder[Set[A]]", "member" : "cats.kernel.instances.SetInstances1.catsKernelStdPartialOrderForSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForSet[A]:cats.kernel.PartialOrder[Set[A]]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForQueue", "tail" : "(): TraverseFilter[Queue]", "member" : "cats.instances.QueueInstances.catsStdTraverseFilterForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdTraverseFilterForQueue:cats.TraverseFilter[scala.collection.immutable.Queue]", "kind" : "implicit def"}, {"label" : "catsStdShowForQueue", "tail" : "(arg0: Show[A]): Show[Queue[A]]", "member" : "cats.instances.QueueInstances.catsStdShowForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForQueue[A](implicitevidence$1:cats.Show[A]):cats.Show[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForQueue", "tail" : ": Traverse[Queue] with Alternative[Queue] with Monad[Queue] with CoflatMap[Queue]", "member" : "cats.instances.QueueInstances.catsStdInstancesForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForQueue:cats.Traverse[scala.collection.immutable.Queue]withcats.Alternative[scala.collection.immutable.Queue]withcats.Monad[scala.collection.immutable.Queue]withcats.CoflatMap[scala.collection.immutable.Queue]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForQueue", "tail" : "(): Monoid[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdMonoidForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForQueue[A]:cats.kernel.Monoid[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForQueue", "tail" : "(arg0: Order[A]): Order[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances.catsKernelStdOrderForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForQueue[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForQueue", "tail" : "(arg0: Hash[A]): Hash[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdHashForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForQueue[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForQueue", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances1.catsKernelStdPartialOrderForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForQueue[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForQueue", "tail" : "(arg0: Eq[A]): Eq[Queue[A]]", "member" : "cats.kernel.instances.QueueInstances2.catsKernelStdEqForQueue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForQueue[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[scala.collection.immutable.Queue[A]]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForPartialOrdering", "tail" : ": ContravariantMonoidal[PartialOrdering]", "member" : "cats.instances.PartialOrderingInstances.catsContravariantMonoidalForPartialOrdering", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsContravariantMonoidalForPartialOrdering:cats.ContravariantMonoidal[PartialOrdering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForPartialOrder", "tail" : ": ContravariantMonoidal[PartialOrder]", "member" : "cats.instances.PartialOrderInstances.catsContravariantMonoidalForPartialOrder", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsContravariantMonoidalForPartialOrder:cats.ContravariantMonoidal[cats.PartialOrder]", "kind" : "implicit val"}, {"label" : "catsKernelPartialOrderingForPartialOrder", "tail" : "(ev: PartialOrder[A]): PartialOrdering[A]", "member" : "cats.kernel.PartialOrderToPartialOrderingConversion.catsKernelPartialOrderingForPartialOrder", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelPartialOrderingForPartialOrder[A](implicitev:cats.kernel.PartialOrder[A]):PartialOrdering[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherTNestedParallelValidated", "tail" : "(arg0: Semigroup[E], P: Parallel[M]): Aux[[γ$5$]EitherT[M, E, γ$5$], [γ$6$]Nested[cats.Parallel.F, [β$4$]Validated[E, β$4$], γ$6$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherTNestedParallelValidated", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsParallelForEitherTNestedParallelValidated[M[_<:<?>],E](implicitevidence$2:cats.kernel.Semigroup[E],implicitP:cats.Parallel[M]):cats.Parallel.Aux[[γ$5$]cats.data.EitherT[M,E,γ$5$],[γ$6$]cats.data.Nested[P.F,[β$4$]cats.data.Validated[E,β$4$],γ$6$]]", "kind" : "def"}, {"label" : "catsStdParallelForZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdParallelForZipLazyList[A<:<?>]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "def"}, {"label" : "catsStdParallelForZipStream", "tail" : "(): Aux[Stream, ZipStream]", "member" : "cats.instances.ParallelInstances.catsStdParallelForZipStream", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdParallelForZipStream:cats.Parallel.Aux[Stream,cats.data.ZipStream]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipVector", "tail" : "(): Aux[Vector, ZipVector]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipVector", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdNonEmptyParallelForZipVector:cats.NonEmptyParallel.Aux[Vector,cats.data.ZipVector]", "kind" : "def"}, {"label" : "catsStdNonEmptyParallelForZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ParallelInstances.catsStdNonEmptyParallelForZipList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdNonEmptyParallelForZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "def"}, {"label" : "catsParallelForOptionTNestedOption", "tail" : "(P: Parallel[M]): Aux[[β$2$]OptionT[M, β$2$], [γ$3$]Nested[cats.Parallel.F, Option, γ$3$]]", "member" : "cats.instances.ParallelInstances.catsParallelForOptionTNestedOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsParallelForOptionTNestedOption[M[_<:<?>]](implicitP:cats.Parallel[M]):cats.Parallel.Aux[[β$2$]cats.data.OptionT[M,β$2$],[γ$3$]cats.data.Nested[P.F,Option,γ$3$]]", "kind" : "def"}, {"label" : "catsParallelForEitherValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$0$]Either[E, β$0$], [β$1$]Validated[E, β$1$]]", "member" : "cats.instances.ParallelInstances.catsParallelForEitherValidated", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsParallelForEitherValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$0$]scala.util.Either[E,β$0$],[β$1$]cats.data.Validated[E,β$1$]]", "kind" : "def"}, {"label" : "catsParallelForEitherTNestedValidated", "tail" : "(arg0: Monad[M], arg1: Semigroup[E]): Aux[[γ$1$]EitherT[M, E, γ$1$], [γ$2$]Nested[M, [β$0$]Validated[E, β$0$], γ$2$]]", "member" : "cats.instances.ParallelInstances1.catsParallelForEitherTNestedValidated", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsParallelForEitherTNestedValidated[M[_<:<?>],E](implicitevidence$1:cats.Monad[M],implicitevidence$2:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[γ$1$]cats.data.EitherT[M,E,γ$1$],[γ$2$]cats.data.Nested[M,[β$0$]cats.data.Validated[E,β$0$],γ$2$]]", "kind" : "def"}, {"label" : "catsContravariantMonoidalForOrdering", "tail" : ": ContravariantMonoidal[Ordering]", "member" : "cats.instances.OrderingInstances.catsContravariantMonoidalForOrdering", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsContravariantMonoidalForOrdering:cats.ContravariantMonoidal[Ordering]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForOrder", "tail" : ": ContravariantMonoidal[Order]", "member" : "cats.instances.OrderInstances.catsContravariantMonoidalForOrder", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsContravariantMonoidalForOrder:cats.ContravariantMonoidal[cats.Order]", "kind" : "implicit val"}, {"label" : "catsKernelOrderingForOrder", "tail" : "(ev: Order[A]): Ordering[A]", "member" : "cats.kernel.OrderToOrderingConversion.catsKernelOrderingForOrder", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelOrderingForOrder[A](implicitev:cats.kernel.Order[A]):Ordering[A]", "kind" : "implicit def"}, {"label" : "catsStdShowForOption", "tail" : "(A: Show[A]): Show[Option[A]]", "member" : "cats.instances.OptionInstances.catsStdShowForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForOption[A](implicitA:cats.Show[A]):cats.Show[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForOption", "tail" : ": Traverse[Option] with MonadError[Option, Unit] with Alternative[Option] with CommutativeMonad[Option] with CoflatMap[Option] with Align[Option]", "member" : "cats.instances.OptionInstances.catsStdInstancesForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForOption:cats.Traverse[Option]withcats.MonadError[Option,Unit]withcats.Alternative[Option]withcats.CommutativeMonad[Option]withcats.CoflatMap[Option]withcats.Align[Option]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForOption", "tail" : "(arg0: Semigroup[A]): Monoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdMonoidForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForOption[A](implicitevidence$3:cats.kernel.Semigroup[A]):cats.kernel.Monoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForOption", "tail" : "(arg0: CommutativeSemigroup[A]): CommutativeMonoid[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdCommutativeMonoidForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForOption[A](implicitevidence$2:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeMonoid[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForOption", "tail" : "(arg0: Order[A]): Order[Option[A]]", "member" : "cats.kernel.instances.OptionInstances.catsKernelStdOrderForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForOption[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForOption", "tail" : "(arg0: PartialOrder[A]): PartialOrder[Option[A]]", "member" : "cats.kernel.instances.OptionInstances0.catsKernelStdPartialOrderForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForOption[A](implicitevidence$4:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForOption", "tail" : "(arg0: Hash[A]): Hash[Option[A]]", "member" : "cats.kernel.instances.OptionInstances1.catsKernelStdHashForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForOption[A](implicitevidence$5:cats.kernel.Hash[A]):cats.kernel.Hash[Option[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForOption", "tail" : "(arg0: Eq[A]): Eq[Option[A]]", "member" : "cats.kernel.instances.OptionInstances2.catsKernelStdEqForOption", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForOption[A](implicitevidence$6:cats.kernel.Eq[A]):cats.kernel.Eq[Option[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForMap", "tail" : "(): UnorderedTraverse[[β$0$]Map[K, β$0$]] with FlatMap[[β$1$]Map[K, β$1$]] with Align[[β$2$]Map[K, β$2$]]", "member" : "cats.instances.MapInstances.catsStdInstancesForMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForMap[K]:cats.UnorderedTraverse[[β$0$]scala.collection.immutable.Map[K,β$0$]]withcats.FlatMap[[β$1$]scala.collection.immutable.Map[K,β$1$]]withcats.Align[[β$2$]scala.collection.immutable.Map[K,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForMap", "tail" : "(showA: Show[A], showB: Show[B]): Show[Map[A, B]]", "member" : "cats.instances.MapInstances.catsStdShowForMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForMap[A,B](implicitshowA:cats.Show[A],implicitshowB:cats.Show[B]):cats.Show[Map[A,B]]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForMap", "tail" : "(arg0: CommutativeSemigroup[V]): CommutativeMonoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdCommutativeMonoidForMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForMap[K,V](implicitevidence$3:cats.kernel.CommutativeSemigroup[V]):cats.kernel.CommutativeMonoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForMap", "tail" : "(arg0: Hash[K], arg1: Hash[V]): Hash[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances.catsKernelStdHashForMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForMap[K,V](implicitevidence$1:cats.kernel.Hash[K],implicitevidence$2:cats.kernel.Hash[V]):cats.kernel.Hash[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForMap", "tail" : "(arg0: Semigroup[V]): Monoid[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdMonoidForMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForMap[K,V](implicitevidence$5:cats.kernel.Semigroup[V]):cats.kernel.Monoid[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForMap", "tail" : "(arg0: Eq[V]): Eq[Map[K, V]]", "member" : "cats.kernel.instances.MapInstances1.catsKernelStdEqForMap", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForMap[K,V](implicitevidence$4:cats.kernel.Eq[V]):cats.kernel.Eq[Map[K,V]]", "kind" : "implicit def"}, {"label" : "catsStdNonEmptyParallelForListZipList", "tail" : "(): Aux[List, ZipList]", "member" : "cats.instances.ListInstances.catsStdNonEmptyParallelForListZipList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdNonEmptyParallelForListZipList:cats.NonEmptyParallel.Aux[List,cats.data.ZipList]", "kind" : "implicit def"}, {"label" : "catsStdShowForList", "tail" : "(arg0: Show[A]): Show[List[A]]", "member" : "cats.instances.ListInstances.catsStdShowForList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForList[A](implicitevidence$1:cats.Show[A]):cats.Show[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForList", "tail" : ": Traverse[List] with Alternative[List] with Monad[List] with CoflatMap[List] with Align[List]", "member" : "cats.instances.ListInstances.catsStdInstancesForList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForList:cats.Traverse[List]withcats.Alternative[List]withcats.Monad[List]withcats.CoflatMap[List]withcats.Align[List]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForList", "tail" : "(): Monoid[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdMonoidForList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForList[A]:cats.kernel.Monoid[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForList", "tail" : "(arg0: Order[A]): Order[List[A]]", "member" : "cats.kernel.instances.ListInstances.catsKernelStdOrderForList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForList", "tail" : "(arg0: Hash[A]): Hash[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdHashForList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[List[A]]", "member" : "cats.kernel.instances.ListInstances1.catsKernelStdPartialOrderForList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[List[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForList", "tail" : "(arg0: Eq[A]): Eq[List[A]]", "member" : "cats.kernel.instances.ListInstances2.catsKernelStdEqForList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[List[A]]", "kind" : "implicit def"}, {"label" : "catsStdParallelForLazyListZipLazyList", "tail" : "(): Aux[LazyList, ZipLazyList]", "member" : "cats.instances.LazyListInstances.catsStdParallelForLazyListZipLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdParallelForLazyListZipLazyList[A]:cats.Parallel.Aux[LazyList,cats.data.ZipLazyList]", "kind" : "implicit def"}, {"label" : "catsStdTraverseFilterForLazyList", "tail" : ": TraverseFilter[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdTraverseFilterForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdTraverseFilterForLazyList:cats.TraverseFilter[LazyList]", "kind" : "implicit val"}, {"label" : "catsStdShowForLazyList", "tail" : "(arg0: Show[A]): Show[LazyList[A]]", "member" : "cats.instances.LazyListInstances.catsStdShowForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForLazyList[A](implicitevidence$1:cats.Show[A]):cats.Show[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForLazyList", "tail" : ": Traverse[LazyList] with Alternative[LazyList] with Monad[LazyList] with CoflatMap[LazyList] with Align[LazyList]", "member" : "cats.instances.LazyListInstances.catsStdInstancesForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForLazyList:cats.Traverse[LazyList]withcats.Alternative[LazyList]withcats.Monad[LazyList]withcats.CoflatMap[LazyList]withcats.Align[LazyList]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForLazyList", "tail" : "(): Monoid[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdMonoidForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForLazyList[A]:cats.kernel.Monoid[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForLazyList", "tail" : "(arg0: Order[A]): Order[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances.catsKernelStdOrderForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForLazyList[A](implicitevidence$1:cats.kernel.Order[A]):cats.kernel.Order[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForLazyList", "tail" : "(arg0: Hash[A]): Hash[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdHashForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForLazyList[A](implicitevidence$3:cats.kernel.Hash[A]):cats.kernel.Hash[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForLazyList", "tail" : "(arg0: PartialOrder[A]): PartialOrder[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances1.catsKernelStdPartialOrderForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForLazyList[A](implicitevidence$2:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForLazyList", "tail" : "(arg0: Eq[A]): Eq[LazyList[A]]", "member" : "cats.kernel.instances.LazyListInstances2.catsKernelStdEqForLazyList", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForLazyList[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[LazyList[A]]", "kind" : "implicit def"}, {"label" : "catsInvariantMonoidalCommutativeSemigroup", "tail" : ": InvariantMonoidal[CommutativeSemigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalCommutativeSemigroup", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsInvariantMonoidalCommutativeSemigroup:cats.InvariantMonoidal[cats.kernel.CommutativeSemigroup]", "kind" : "implicit val"}, {"label" : "catsInvariantMonoidalSemigroup", "tail" : ": InvariantMonoidal[Semigroup]", "member" : "cats.instances.InvariantMonoidalInstances.catsInvariantMonoidalSemigroup", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsInvariantMonoidalSemigroup:cats.InvariantMonoidal[cats.kernel.Semigroup]", "kind" : "implicit val"}, {"label" : "catsSemigroupalForMonoid", "tail" : "(): InvariantSemigroupal[Monoid]", "member" : "cats.instances.InvariantMonoidalInstances.catsSemigroupalForMonoid", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsSemigroupalForMonoid:cats.InvariantSemigroupal[cats.Monoid]", "kind" : "implicit def"}, {"label" : "catsContravariantForHash", "tail" : ": Contravariant[Hash]", "member" : "cats.instances.HashInstances.catsContravariantForHash", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsContravariantForHash:cats.Contravariant[cats.Hash]", "kind" : "implicit val"}, {"label" : "catsKernelHashToHashing", "tail" : "(ev: Hash[A]): Hashing[A]", "member" : "cats.kernel.HashToHashingConversion.catsKernelHashToHashing", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelHashToHashing[A](implicitev:cats.kernel.Hash[A]):scala.util.hashing.Hashing[A]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForFuture", "tail" : "(ec: ExecutionContext): MonadError[Future, Throwable] with CoflatMap[Future] with Monad[Future]", "member" : "cats.instances.FutureInstances.catsStdInstancesForFuture", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForFuture(implicitec:scala.concurrent.ExecutionContext):cats.MonadError[scala.concurrent.Future,Throwable]withcats.CoflatMap[scala.concurrent.Future]withcats.Monad[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "catsStdMonoidForFuture", "tail" : "(arg0: Monoid[A], ec: ExecutionContext): Monoid[Future[A]]", "member" : "cats.instances.FutureInstances1.catsStdMonoidForFuture", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdMonoidForFuture[A](implicitevidence$1:cats.Monoid[A],implicitec:scala.concurrent.ExecutionContext):cats.Monoid[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupForFuture", "tail" : "(arg0: Semigroup[A], ec: ExecutionContext): Semigroup[Future[A]]", "member" : "cats.instances.FutureInstances2.catsStdSemigroupForFuture", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdSemigroupForFuture[A](implicitevidence$2:cats.Semigroup[A],implicitec:scala.concurrent.ExecutionContext):cats.Semigroup[scala.concurrent.Future[A]]", "kind" : "implicit def"}, {"label" : "catsStdMonoidKForFunction1", "tail" : ": MonoidK[Endo]", "member" : "cats.instances.Function1Instances.catsStdMonoidKForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdMonoidKForFunction1:cats.MonoidK[cats.Endo]", "kind" : "implicit val"}, {"label" : "catsStdInstancesForFunction1", "tail" : ": ArrowChoice[Function1] with CommutativeArrow[Function1]", "member" : "cats.instances.Function1Instances.catsStdInstancesForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForFunction1:cats.arrow.ArrowChoice[Function1]withcats.arrow.CommutativeArrow[Function1]", "kind" : "implicit val"}, {"label" : "catsStdMonadForFunction1", "tail" : "(): Monad[[β$8$](T1) => β$8$]", "member" : "cats.instances.Function1Instances.catsStdMonadForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdMonadForFunction1[T1]:cats.Monad[[β$8$]T1=>β$8$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantMonoidalForFunction1", "tail" : "(arg0: Monoid[R]): ContravariantMonoidal[[α$6$](α$6$) => R]", "member" : "cats.instances.Function1Instances.catsStdContravariantMonoidalForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdContravariantMonoidalForFunction1[R](implicitevidence$2:cats.Monoid[R]):cats.ContravariantMonoidal[[α$6$]α$6$=>R]", "kind" : "implicit def"}, {"label" : "catsStdDistributiveForFunction1", "tail" : "(): Distributive[[β$12$](T1) => β$12$]", "member" : "cats.instances.Function1Instances0.catsStdDistributiveForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdDistributiveForFunction1[T1]:cats.Distributive[[β$12$]T1=>β$12$]", "kind" : "implicit def"}, {"label" : "catsStdContravariantForFunction1", "tail" : "(): Contravariant[[α$10$](α$10$) => R]", "member" : "cats.instances.Function1Instances0.catsStdContravariantForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdContravariantForFunction1[R]:cats.Contravariant[[α$10$]α$10$=>R]", "kind" : "implicit def"}, {"label" : "catsStdBimonadForFunction0", "tail" : ": Bimonad[Function0]", "member" : "cats.instances.Function0Instances.catsStdBimonadForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdBimonadForFunction0:cats.Bimonad[Function0]", "kind" : "implicit val"}, {"label" : "function0Distributive", "tail" : "(): Distributive[Function0]", "member" : "cats.instances.Function0Instances0.function0Distributive", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#function0Distributive:cats.Distributive[Function0]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction1", "tail" : "(G: CommutativeGroup[B]): CommutativeGroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelCommutativeGroupForFunction1[A,B](implicitG:cats.kernel.CommutativeGroup[B]):cats.kernel.CommutativeGroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeGroupForFunction0", "tail" : "(G: CommutativeGroup[A]): CommutativeGroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelCommutativeGroupForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelCommutativeGroupForFunction0[A](implicitG:cats.kernel.CommutativeGroup[A]):cats.kernel.CommutativeGroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelOrderForFunction0", "tail" : "(ev: Order[A]): Order[() => A]", "member" : "cats.kernel.instances.FunctionInstances.catsKernelOrderForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelOrderForFunction0[A](implicitev:cats.kernel.Order[A]):cats.kernel.Order[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction1", "tail" : "(G: BoundedSemilattice[B]): BoundedSemilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelBoundedSemilatticeForFunction1[A,B](implicitG:cats.kernel.BoundedSemilattice[B]):cats.kernel.BoundedSemilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBoundedSemilatticeForFunction0", "tail" : "(G: BoundedSemilattice[A]): BoundedSemilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelBoundedSemilatticeForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelBoundedSemilatticeForFunction0[A](implicitG:cats.kernel.BoundedSemilattice[A]):cats.kernel.BoundedSemilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction1", "tail" : "(G: Group[B]): Group[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelGroupForFunction1[A,B](implicitG:cats.kernel.Group[B]):cats.kernel.Group[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelGroupForFunction0", "tail" : "(G: Group[A]): Group[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelGroupForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelGroupForFunction0[A](implicitG:cats.kernel.Group[A]):cats.kernel.Group[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelPartialOrderForFunction0", "tail" : "(ev: PartialOrder[A]): PartialOrder[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelPartialOrderForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelPartialOrderForFunction0[A](implicitev:cats.kernel.PartialOrder[A]):cats.kernel.PartialOrder[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelHashForFunction0", "tail" : "(ev: Hash[A]): Hash[() => A]", "member" : "cats.kernel.instances.FunctionInstances0.catsKernelHashForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelHashForFunction0[A](implicitev:cats.kernel.Hash[A]):cats.kernel.Hash[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction1", "tail" : "(M: Semilattice[B]): Semilattice[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelSemilatticeForFunction1[A,B](implicitM:cats.kernel.Semilattice[B]):cats.kernel.Semilattice[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemilatticeForFunction0", "tail" : "(M: Semilattice[A]): Semilattice[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelSemilatticeForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelSemilatticeForFunction0[A](implicitM:cats.kernel.Semilattice[A]):cats.kernel.Semilattice[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction1", "tail" : "(M: CommutativeMonoid[B]): CommutativeMonoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelCommutativeMonoidForFunction1[A,B](implicitM:cats.kernel.CommutativeMonoid[B]):cats.kernel.CommutativeMonoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeMonoidForFunction0", "tail" : "(M: CommutativeMonoid[A]): CommutativeMonoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelCommutativeMonoidForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelCommutativeMonoidForFunction0[A](implicitM:cats.kernel.CommutativeMonoid[A]):cats.kernel.CommutativeMonoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelEqForFunction0", "tail" : "(ev: Eq[A]): Eq[() => A]", "member" : "cats.kernel.instances.FunctionInstances1.catsKernelEqForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelEqForFunction0[A](implicitev:cats.kernel.Eq[A]):cats.kernel.Eq[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction1", "tail" : "(S: Band[B]): Band[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelBandForFunction1[A,B](implicitS:cats.kernel.Band[B]):cats.kernel.Band[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelBandForFunction0", "tail" : "(S: Band[A]): Band[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelBandForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelBandForFunction0[A](implicitS:cats.kernel.Band[A]):cats.kernel.Band[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction1", "tail" : "(M: Monoid[B]): Monoid[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelMonoidForFunction1[A,B](implicitM:cats.kernel.Monoid[B]):cats.kernel.Monoid[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelMonoidForFunction0", "tail" : "(M: Monoid[A]): Monoid[() => A]", "member" : "cats.kernel.instances.FunctionInstances2.catsKernelMonoidForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelMonoidForFunction0[A](implicitM:cats.kernel.Monoid[A]):cats.kernel.Monoid[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction1", "tail" : "(S: CommutativeSemigroup[B]): CommutativeSemigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelCommutativeSemigroupForFunction1[A,B](implicitS:cats.kernel.CommutativeSemigroup[B]):cats.kernel.CommutativeSemigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelCommutativeSemigroupForFunction0", "tail" : "(S: CommutativeSemigroup[A]): CommutativeSemigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances3.catsKernelCommutativeSemigroupForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelCommutativeSemigroupForFunction0[A](implicitS:cats.kernel.CommutativeSemigroup[A]):cats.kernel.CommutativeSemigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction1", "tail" : "(S: Semigroup[B]): Semigroup[(A) => B]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelSemigroupForFunction1[A,B](implicitS:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[A=>B]", "kind" : "implicit def"}, {"label" : "catsKernelSemigroupForFunction0", "tail" : "(S: Semigroup[A]): Semigroup[() => A]", "member" : "cats.kernel.instances.FunctionInstances4.catsKernelSemigroupForFunction0", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelSemigroupForFunction0[A](implicitS:cats.kernel.Semigroup[A]):cats.kernel.Semigroup[()=>A]", "kind" : "implicit def"}, {"label" : "catsContravariantMonoidalForEquiv", "tail" : ": ContravariantMonoidal[Equiv]", "member" : "cats.instances.EquivInstances.catsContravariantMonoidalForEquiv", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsContravariantMonoidalForEquiv:cats.ContravariantMonoidal[Equiv]", "kind" : "implicit val"}, {"label" : "catsContravariantMonoidalForEq", "tail" : ": ContravariantMonoidal[Eq]", "member" : "cats.instances.EqInstances.catsContravariantMonoidalForEq", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsContravariantMonoidalForEq:cats.ContravariantMonoidal[cats.Eq]", "kind" : "implicit val"}, {"label" : "catsKernelEquivForEq", "tail" : "(ev: Eq[A]): Equiv[A]", "member" : "cats.kernel.EqToEquivConversion.catsKernelEquivForEq", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelEquivForEq[A](implicitev:cats.kernel.Eq[A]):scala.math.Equiv[A]", "kind" : "implicit def"}, {"label" : "catsParallelForEitherAndValidated", "tail" : "(arg0: Semigroup[E]): Aux[[β$9$]Either[E, β$9$], [β$10$]Validated[E, β$10$]]", "member" : "cats.instances.EitherInstances.catsParallelForEitherAndValidated", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsParallelForEitherAndValidated[E](implicitevidence$1:cats.kernel.Semigroup[E]):cats.Parallel.Aux[[β$9$]scala.util.Either[E,β$9$],[β$10$]cats.data.Validated[E,β$10$]]", "kind" : "implicit def"}, {"label" : "catsStdShowForEither", "tail" : "(A: Show[A], B: Show[B]): Show[Either[A, B]]", "member" : "cats.instances.EitherInstances.catsStdShowForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForEither[A,B](implicitA:cats.Show[A],implicitB:cats.Show[B]):cats.Show[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdSemigroupKForEither", "tail" : "(): SemigroupK[[β$7$]Either[L, β$7$]]", "member" : "cats.instances.EitherInstances.catsStdSemigroupKForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdSemigroupKForEither[L]:cats.SemigroupK[[β$7$]scala.util.Either[L,β$7$]]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForEither", "tail" : "(): MonadError[[β$0$]Either[A, β$0$], A] with Traverse[[β$1$]Either[A, β$1$]] with Align[[β$2$]Either[A, β$2$]]", "member" : "cats.instances.EitherInstances.catsStdInstancesForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForEither[A]:cats.MonadError[[β$0$]scala.util.Either[A,β$0$],A]withcats.Traverse[[β$1$]scala.util.Either[A,β$1$]]withcats.Align[[β$2$]scala.util.Either[A,β$2$]]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForEither", "tail" : ": Bitraverse[Either]", "member" : "cats.instances.EitherInstances.catsStdBitraverseForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdBitraverseForEither:cats.Bitraverse[Either]", "kind" : "implicit val"}, {"label" : "catsDataMonoidForEither", "tail" : "(B: Monoid[B]): Monoid[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsDataMonoidForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsDataMonoidForEither[A,B](implicitB:cats.kernel.Monoid[B]):cats.kernel.Monoid[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdOrderForEither", "tail" : "(A: Order[A], B: Order[B]): Order[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances.catsStdOrderForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdOrderForEither[A,B](implicitA:cats.kernel.Order[A],implicitB:cats.kernel.Order[B]):cats.kernel.Order[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdHashForEither", "tail" : "(A: Hash[A], B: Hash[B]): Hash[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdHashForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdHashForEither[A,B](implicitA:cats.kernel.Hash[A],implicitB:cats.kernel.Hash[B]):cats.kernel.Hash[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdPartialOrderForEither", "tail" : "(A: PartialOrder[A], B: PartialOrder[B]): PartialOrder[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsStdPartialOrderForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdPartialOrderForEither[A,B](implicitA:cats.kernel.PartialOrder[A],implicitB:cats.kernel.PartialOrder[B]):cats.kernel.PartialOrder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsDataSemigroupForEither", "tail" : "(B: Semigroup[B]): Semigroup[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances0.catsDataSemigroupForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsDataSemigroupForEither[A,B](implicitB:cats.kernel.Semigroup[B]):cats.kernel.Semigroup[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdEqForEither", "tail" : "(A: Eq[A], B: Eq[B]): Eq[Either[A, B]]", "member" : "cats.kernel.instances.EitherInstances1.catsStdEqForEither", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdEqForEither[A,B](implicitA:cats.kernel.Eq[A],implicitB:cats.kernel.Eq[B]):cats.kernel.Eq[Either[A,B]]", "kind" : "implicit def"}, {"label" : "catsStdShowForBitSet", "tail" : "(): Show[BitSet]", "member" : "cats.instances.BitSetInstances.catsStdShowForBitSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForBitSet:cats.Show[scala.collection.immutable.BitSet]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForBitSet", "tail" : ": BoundedSemilattice[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdSemilatticeForBitSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForBitSet:cats.kernel.BoundedSemilattice[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBitSet", "tail" : ": PartialOrder[BitSet] with Hash[BitSet]", "member" : "cats.kernel.instances.BitSetInstances.catsKernelStdOrderForBitSet", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForBitSet:cats.kernel.PartialOrder[scala.collection.immutable.BitSet]withcats.kernel.Hash[scala.collection.immutable.BitSet]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigDecimal", "tail" : ": Show[BigDecimal]", "member" : "cats.instances.BigDecimalInstances.catsStdShowForBigDecimal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForBigDecimal:cats.Show[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigDecimal", "tail" : ": CommutativeGroup[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdGroupForBigDecimal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForBigDecimal:cats.kernel.CommutativeGroup[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigDecimal", "tail" : ": Order[BigDecimal] with Hash[BigDecimal]", "member" : "cats.kernel.instances.BigDecimalInstances.catsKernelStdOrderForBigDecimal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForBigDecimal:cats.kernel.Order[BigDecimal]withcats.kernel.Hash[BigDecimal]", "kind" : "implicit val"}, {"label" : "catsStdShowForBigInt", "tail" : ": Show[BigInt]", "member" : "cats.instances.BigIntInstances.catsStdShowForBigInt", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForBigInt:cats.Show[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForBigInt", "tail" : ": CommutativeGroup[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdGroupForBigInt", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForBigInt:cats.kernel.CommutativeGroup[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBigInt", "tail" : ": Order[BigInt] with Hash[BigInt]", "member" : "cats.kernel.instances.BigIntInstances.catsKernelStdOrderForBigInt", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForBigInt:cats.kernel.Order[BigInt]withcats.kernel.Hash[BigInt]", "kind" : "implicit val"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple22", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20], A21: BoundedSemilattice[A21]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20],implicitA21:cats.kernel.BoundedSemilattice[A21]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple22", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20], A21: Order[A21]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20],implicitA21:cats.kernel.Order[A21]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple22", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20], A21: CommutativeGroup[A21]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20],implicitA21:cats.kernel.CommutativeGroup[A21]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple21", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19], A20: BoundedSemilattice[A20]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19],implicitA20:cats.kernel.BoundedSemilattice[A20]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple21", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19], A20: Order[A20]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19],implicitA20:cats.kernel.Order[A20]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple21", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19], A20: CommutativeGroup[A20]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19],implicitA20:cats.kernel.CommutativeGroup[A20]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple20", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18], A19: BoundedSemilattice[A19]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18],implicitA19:cats.kernel.BoundedSemilattice[A19]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple20", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18], A19: Order[A19]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18],implicitA19:cats.kernel.Order[A19]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple20", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18], A19: CommutativeGroup[A19]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18],implicitA19:cats.kernel.CommutativeGroup[A19]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple19", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17], A18: BoundedSemilattice[A18]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17],implicitA18:cats.kernel.BoundedSemilattice[A18]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple19", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17], A18: Order[A18]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17],implicitA18:cats.kernel.Order[A18]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple19", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17], A18: CommutativeGroup[A18]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17],implicitA18:cats.kernel.CommutativeGroup[A18]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple18", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16], A17: BoundedSemilattice[A17]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16],implicitA17:cats.kernel.BoundedSemilattice[A17]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple18", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16], A17: Order[A17]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16],implicitA17:cats.kernel.Order[A17]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple18", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16], A17: CommutativeGroup[A17]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16],implicitA17:cats.kernel.CommutativeGroup[A17]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple17", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15], A16: BoundedSemilattice[A16]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15],implicitA16:cats.kernel.BoundedSemilattice[A16]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple17", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15], A16: Order[A16]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15],implicitA16:cats.kernel.Order[A16]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple17", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15], A16: CommutativeGroup[A16]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15],implicitA16:cats.kernel.CommutativeGroup[A16]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple16", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14], A15: BoundedSemilattice[A15]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14],implicitA15:cats.kernel.BoundedSemilattice[A15]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple16", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14], A15: Order[A15]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14],implicitA15:cats.kernel.Order[A15]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple16", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14], A15: CommutativeGroup[A15]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14],implicitA15:cats.kernel.CommutativeGroup[A15]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple15", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13], A14: BoundedSemilattice[A14]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13],implicitA14:cats.kernel.BoundedSemilattice[A14]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple15", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13], A14: Order[A14]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13],implicitA14:cats.kernel.Order[A14]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple15", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13], A14: CommutativeGroup[A14]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13],implicitA14:cats.kernel.CommutativeGroup[A14]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple14", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12], A13: BoundedSemilattice[A13]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12],implicitA13:cats.kernel.BoundedSemilattice[A13]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple14", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12], A13: Order[A13]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12],implicitA13:cats.kernel.Order[A13]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple14", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12], A13: CommutativeGroup[A13]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12],implicitA13:cats.kernel.CommutativeGroup[A13]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple13", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11], A12: BoundedSemilattice[A12]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11],implicitA12:cats.kernel.BoundedSemilattice[A12]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple13", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11], A12: Order[A12]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11],implicitA12:cats.kernel.Order[A12]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple13", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11], A12: CommutativeGroup[A12]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11],implicitA12:cats.kernel.CommutativeGroup[A12]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple12", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10], A11: BoundedSemilattice[A11]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10],implicitA11:cats.kernel.BoundedSemilattice[A11]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple12", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10], A11: Order[A11]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10],implicitA11:cats.kernel.Order[A11]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple12", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10], A11: CommutativeGroup[A11]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10],implicitA11:cats.kernel.CommutativeGroup[A11]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple11", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9], A10: BoundedSemilattice[A10]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9],implicitA10:cats.kernel.BoundedSemilattice[A10]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple11", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9], A10: Order[A10]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9],implicitA10:cats.kernel.Order[A10]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple11", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9], A10: CommutativeGroup[A10]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9],implicitA10:cats.kernel.CommutativeGroup[A10]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple10", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8], A9: BoundedSemilattice[A9]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8],implicitA9:cats.kernel.BoundedSemilattice[A9]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple10", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8], A9: Order[A9]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8],implicitA9:cats.kernel.Order[A9]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple10", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8], A9: CommutativeGroup[A9]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8],implicitA9:cats.kernel.CommutativeGroup[A9]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple9", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7], A8: BoundedSemilattice[A8]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7],implicitA8:cats.kernel.BoundedSemilattice[A8]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple9", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7], A8: Order[A8]): Order[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7],implicitA8:cats.kernel.Order[A8]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple9", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7], A8: CommutativeGroup[A8]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7],implicitA8:cats.kernel.CommutativeGroup[A8]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple8", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6], A7: BoundedSemilattice[A7]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6],implicitA7:cats.kernel.BoundedSemilattice[A7]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple8", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6], A7: Order[A7]): Order[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6],implicitA7:cats.kernel.Order[A7]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple8", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6], A7: CommutativeGroup[A7]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6],implicitA7:cats.kernel.CommutativeGroup[A7]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple7", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5], A6: BoundedSemilattice[A6]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5],implicitA6:cats.kernel.BoundedSemilattice[A6]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple7", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5], A6: Order[A6]): Order[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5],implicitA6:cats.kernel.Order[A6]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple7", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5], A6: CommutativeGroup[A6]): CommutativeGroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5],implicitA6:cats.kernel.CommutativeGroup[A6]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple6", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4], A5: BoundedSemilattice[A5]): BoundedSemilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4],implicitA5:cats.kernel.BoundedSemilattice[A5]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple6", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4], A5: Order[A5]): Order[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4],implicitA5:cats.kernel.Order[A5]):cats.kernel.Order[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple6", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4], A5: CommutativeGroup[A5]): CommutativeGroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4],implicitA5:cats.kernel.CommutativeGroup[A5]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple5", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3], A4: BoundedSemilattice[A4]): BoundedSemilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3],implicitA4:cats.kernel.BoundedSemilattice[A4]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple5", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3], A4: Order[A4]): Order[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3],implicitA4:cats.kernel.Order[A4]):cats.kernel.Order[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple5", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3], A4: CommutativeGroup[A4]): CommutativeGroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3],implicitA4:cats.kernel.CommutativeGroup[A4]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple4", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2], A3: BoundedSemilattice[A3]): BoundedSemilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2],implicitA3:cats.kernel.BoundedSemilattice[A3]):cats.kernel.BoundedSemilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple4", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2], A3: Order[A3]): Order[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2],implicitA3:cats.kernel.Order[A3]):cats.kernel.Order[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple4", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2], A3: CommutativeGroup[A3]): CommutativeGroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2],implicitA3:cats.kernel.CommutativeGroup[A3]):cats.kernel.CommutativeGroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple3", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1], A2: BoundedSemilattice[A2]): BoundedSemilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1],implicitA2:cats.kernel.BoundedSemilattice[A2]):cats.kernel.BoundedSemilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple3", "tail" : "(A0: Order[A0], A1: Order[A1], A2: Order[A2]): Order[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1],implicitA2:cats.kernel.Order[A2]):cats.kernel.Order[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple3", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1], A2: CommutativeGroup[A2]): CommutativeGroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1],implicitA2:cats.kernel.CommutativeGroup[A2]):cats.kernel.CommutativeGroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple2", "tail" : "(A0: BoundedSemilattice[A0], A1: BoundedSemilattice[A1]): BoundedSemilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.BoundedSemilattice[A0],implicitA1:cats.kernel.BoundedSemilattice[A1]):cats.kernel.BoundedSemilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple2", "tail" : "(A0: Order[A0], A1: Order[A1]): Order[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple2[A0,A1](implicitA0:cats.kernel.Order[A0],implicitA1:cats.kernel.Order[A1]):cats.kernel.Order[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple2", "tail" : "(A0: CommutativeGroup[A0], A1: CommutativeGroup[A1]): CommutativeGroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeGroup[A0],implicitA1:cats.kernel.CommutativeGroup[A1]):cats.kernel.CommutativeGroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBoundedSemilatticeForTuple1", "tail" : "(A0: BoundedSemilattice[A0]): BoundedSemilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdBoundedSemilatticeForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBoundedSemilatticeForTuple1[A0](implicitA0:cats.kernel.BoundedSemilattice[A0]):cats.kernel.BoundedSemilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdOrderForTuple1", "tail" : "(A0: Order[A0]): Order[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdOrderForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForTuple1[A0](implicitA0:cats.kernel.Order[A0]):cats.kernel.Order[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeGroupForTuple1", "tail" : "(A0: CommutativeGroup[A0]): CommutativeGroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances.catsKernelStdCommutativeGroupForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeGroupForTuple1[A0](implicitA0:cats.kernel.CommutativeGroup[A0]):cats.kernel.CommutativeGroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple22", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20], A21: PartialOrder[A21]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20],implicitA21:cats.kernel.PartialOrder[A21]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple22", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20], A21: Hash[A21]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20],implicitA21:cats.kernel.Hash[A21]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple22", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20], A21: Group[A21]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20],implicitA21:cats.kernel.Group[A21]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple22", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20], A21: CommutativeMonoid[A21]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20],implicitA21:cats.kernel.CommutativeMonoid[A21]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple22", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20], A21: Semilattice[A21]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20],implicitA21:cats.kernel.Semilattice[A21]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple21", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19], A20: PartialOrder[A20]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19],implicitA20:cats.kernel.PartialOrder[A20]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple21", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19], A20: Hash[A20]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19],implicitA20:cats.kernel.Hash[A20]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple21", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19], A20: Group[A20]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19],implicitA20:cats.kernel.Group[A20]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple21", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19], A20: CommutativeMonoid[A20]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19],implicitA20:cats.kernel.CommutativeMonoid[A20]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple21", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19], A20: Semilattice[A20]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19],implicitA20:cats.kernel.Semilattice[A20]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple20", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18], A19: PartialOrder[A19]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18],implicitA19:cats.kernel.PartialOrder[A19]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple20", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18], A19: Hash[A19]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18],implicitA19:cats.kernel.Hash[A19]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple20", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18], A19: Group[A19]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18],implicitA19:cats.kernel.Group[A19]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple20", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18], A19: CommutativeMonoid[A19]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18],implicitA19:cats.kernel.CommutativeMonoid[A19]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple20", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18], A19: Semilattice[A19]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18],implicitA19:cats.kernel.Semilattice[A19]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple19", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17], A18: PartialOrder[A18]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17],implicitA18:cats.kernel.PartialOrder[A18]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple19", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17], A18: Hash[A18]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17],implicitA18:cats.kernel.Hash[A18]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple19", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17], A18: Group[A18]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17],implicitA18:cats.kernel.Group[A18]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple19", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17], A18: CommutativeMonoid[A18]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17],implicitA18:cats.kernel.CommutativeMonoid[A18]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple19", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17], A18: Semilattice[A18]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17],implicitA18:cats.kernel.Semilattice[A18]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple18", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16], A17: PartialOrder[A17]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16],implicitA17:cats.kernel.PartialOrder[A17]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple18", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16], A17: Hash[A17]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16],implicitA17:cats.kernel.Hash[A17]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple18", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16], A17: Group[A17]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16],implicitA17:cats.kernel.Group[A17]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple18", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16], A17: CommutativeMonoid[A17]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16],implicitA17:cats.kernel.CommutativeMonoid[A17]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple18", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16], A17: Semilattice[A17]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16],implicitA17:cats.kernel.Semilattice[A17]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple17", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15], A16: PartialOrder[A16]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15],implicitA16:cats.kernel.PartialOrder[A16]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple17", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15], A16: Hash[A16]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15],implicitA16:cats.kernel.Hash[A16]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple17", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15], A16: Group[A16]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15],implicitA16:cats.kernel.Group[A16]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple17", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15], A16: CommutativeMonoid[A16]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15],implicitA16:cats.kernel.CommutativeMonoid[A16]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple17", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15], A16: Semilattice[A16]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15],implicitA16:cats.kernel.Semilattice[A16]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple16", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14], A15: PartialOrder[A15]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14],implicitA15:cats.kernel.PartialOrder[A15]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple16", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14], A15: Hash[A15]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14],implicitA15:cats.kernel.Hash[A15]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple16", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14], A15: Group[A15]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14],implicitA15:cats.kernel.Group[A15]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple16", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14], A15: CommutativeMonoid[A15]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14],implicitA15:cats.kernel.CommutativeMonoid[A15]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple16", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14], A15: Semilattice[A15]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14],implicitA15:cats.kernel.Semilattice[A15]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple15", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13], A14: PartialOrder[A14]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13],implicitA14:cats.kernel.PartialOrder[A14]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple15", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13], A14: Hash[A14]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13],implicitA14:cats.kernel.Hash[A14]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple15", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13], A14: Group[A14]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13],implicitA14:cats.kernel.Group[A14]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple15", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13], A14: CommutativeMonoid[A14]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13],implicitA14:cats.kernel.CommutativeMonoid[A14]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple15", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13], A14: Semilattice[A14]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13],implicitA14:cats.kernel.Semilattice[A14]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple14", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12], A13: PartialOrder[A13]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12],implicitA13:cats.kernel.PartialOrder[A13]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple14", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12], A13: Hash[A13]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12],implicitA13:cats.kernel.Hash[A13]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple14", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12], A13: Group[A13]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12],implicitA13:cats.kernel.Group[A13]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple14", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12], A13: CommutativeMonoid[A13]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12],implicitA13:cats.kernel.CommutativeMonoid[A13]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple14", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12], A13: Semilattice[A13]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12],implicitA13:cats.kernel.Semilattice[A13]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple13", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11], A12: PartialOrder[A12]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11],implicitA12:cats.kernel.PartialOrder[A12]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple13", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11], A12: Hash[A12]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11],implicitA12:cats.kernel.Hash[A12]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple13", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11], A12: Group[A12]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11],implicitA12:cats.kernel.Group[A12]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple13", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11], A12: CommutativeMonoid[A12]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11],implicitA12:cats.kernel.CommutativeMonoid[A12]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple13", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11], A12: Semilattice[A12]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11],implicitA12:cats.kernel.Semilattice[A12]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple12", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10], A11: PartialOrder[A11]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10],implicitA11:cats.kernel.PartialOrder[A11]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple12", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10], A11: Hash[A11]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10],implicitA11:cats.kernel.Hash[A11]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple12", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10], A11: Group[A11]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10],implicitA11:cats.kernel.Group[A11]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple12", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10], A11: CommutativeMonoid[A11]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10],implicitA11:cats.kernel.CommutativeMonoid[A11]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple12", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10], A11: Semilattice[A11]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10],implicitA11:cats.kernel.Semilattice[A11]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple11", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9], A10: PartialOrder[A10]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9],implicitA10:cats.kernel.PartialOrder[A10]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple11", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9], A10: Hash[A10]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9],implicitA10:cats.kernel.Hash[A10]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple11", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9], A10: Group[A10]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9],implicitA10:cats.kernel.Group[A10]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple11", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9], A10: CommutativeMonoid[A10]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9],implicitA10:cats.kernel.CommutativeMonoid[A10]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple11", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9], A10: Semilattice[A10]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9],implicitA10:cats.kernel.Semilattice[A10]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple10", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8], A9: PartialOrder[A9]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8],implicitA9:cats.kernel.PartialOrder[A9]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple10", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8], A9: Hash[A9]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8],implicitA9:cats.kernel.Hash[A9]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple10", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8], A9: Group[A9]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8],implicitA9:cats.kernel.Group[A9]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple10", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8], A9: CommutativeMonoid[A9]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8],implicitA9:cats.kernel.CommutativeMonoid[A9]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple10", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8], A9: Semilattice[A9]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8],implicitA9:cats.kernel.Semilattice[A9]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple9", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7], A8: PartialOrder[A8]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7],implicitA8:cats.kernel.PartialOrder[A8]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple9", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7], A8: Hash[A8]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7],implicitA8:cats.kernel.Hash[A8]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple9", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7], A8: Group[A8]): Group[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7],implicitA8:cats.kernel.Group[A8]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple9", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7], A8: CommutativeMonoid[A8]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7],implicitA8:cats.kernel.CommutativeMonoid[A8]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple9", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7], A8: Semilattice[A8]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7],implicitA8:cats.kernel.Semilattice[A8]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple8", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6], A7: PartialOrder[A7]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6],implicitA7:cats.kernel.PartialOrder[A7]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple8", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6], A7: Hash[A7]): Hash[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6],implicitA7:cats.kernel.Hash[A7]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple8", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6], A7: Group[A7]): Group[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6],implicitA7:cats.kernel.Group[A7]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple8", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6], A7: CommutativeMonoid[A7]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6],implicitA7:cats.kernel.CommutativeMonoid[A7]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple8", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6], A7: Semilattice[A7]): Semilattice[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6],implicitA7:cats.kernel.Semilattice[A7]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple7", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5], A6: PartialOrder[A6]): PartialOrder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5],implicitA6:cats.kernel.PartialOrder[A6]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple7", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5], A6: Hash[A6]): Hash[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5],implicitA6:cats.kernel.Hash[A6]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple7", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5], A6: Group[A6]): Group[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5],implicitA6:cats.kernel.Group[A6]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple7", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5], A6: CommutativeMonoid[A6]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5],implicitA6:cats.kernel.CommutativeMonoid[A6]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple7", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5], A6: Semilattice[A6]): Semilattice[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5],implicitA6:cats.kernel.Semilattice[A6]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple6", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4], A5: PartialOrder[A5]): PartialOrder[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4],implicitA5:cats.kernel.PartialOrder[A5]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple6", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4], A5: Hash[A5]): Hash[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4],implicitA5:cats.kernel.Hash[A5]):cats.kernel.Hash[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple6", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4], A5: Group[A5]): Group[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4],implicitA5:cats.kernel.Group[A5]):cats.kernel.Group[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple6", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4], A5: CommutativeMonoid[A5]): CommutativeMonoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4],implicitA5:cats.kernel.CommutativeMonoid[A5]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple6", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4], A5: Semilattice[A5]): Semilattice[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4],implicitA5:cats.kernel.Semilattice[A5]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple5", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3], A4: PartialOrder[A4]): PartialOrder[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3],implicitA4:cats.kernel.PartialOrder[A4]):cats.kernel.PartialOrder[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple5", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3], A4: Hash[A4]): Hash[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3],implicitA4:cats.kernel.Hash[A4]):cats.kernel.Hash[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple5", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3], A4: Group[A4]): Group[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3],implicitA4:cats.kernel.Group[A4]):cats.kernel.Group[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple5", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3], A4: CommutativeMonoid[A4]): CommutativeMonoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3],implicitA4:cats.kernel.CommutativeMonoid[A4]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple5", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3], A4: Semilattice[A4]): Semilattice[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3],implicitA4:cats.kernel.Semilattice[A4]):cats.kernel.Semilattice[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple4", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2], A3: PartialOrder[A3]): PartialOrder[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2],implicitA3:cats.kernel.PartialOrder[A3]):cats.kernel.PartialOrder[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple4", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2], A3: Hash[A3]): Hash[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2],implicitA3:cats.kernel.Hash[A3]):cats.kernel.Hash[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple4", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2], A3: Group[A3]): Group[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2],implicitA3:cats.kernel.Group[A3]):cats.kernel.Group[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple4", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2], A3: CommutativeMonoid[A3]): CommutativeMonoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2],implicitA3:cats.kernel.CommutativeMonoid[A3]):cats.kernel.CommutativeMonoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple4", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2], A3: Semilattice[A3]): Semilattice[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2],implicitA3:cats.kernel.Semilattice[A3]):cats.kernel.Semilattice[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple3", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1], A2: PartialOrder[A2]): PartialOrder[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple3[A0,A1,A2](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1],implicitA2:cats.kernel.PartialOrder[A2]):cats.kernel.PartialOrder[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple3", "tail" : "(A0: Hash[A0], A1: Hash[A1], A2: Hash[A2]): Hash[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple3[A0,A1,A2](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1],implicitA2:cats.kernel.Hash[A2]):cats.kernel.Hash[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple3", "tail" : "(A0: Group[A0], A1: Group[A1], A2: Group[A2]): Group[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1],implicitA2:cats.kernel.Group[A2]):cats.kernel.Group[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple3", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1], A2: CommutativeMonoid[A2]): CommutativeMonoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1],implicitA2:cats.kernel.CommutativeMonoid[A2]):cats.kernel.CommutativeMonoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple3", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1], A2: Semilattice[A2]): Semilattice[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1],implicitA2:cats.kernel.Semilattice[A2]):cats.kernel.Semilattice[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple2", "tail" : "(A0: PartialOrder[A0], A1: PartialOrder[A1]): PartialOrder[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple2[A0,A1](implicitA0:cats.kernel.PartialOrder[A0],implicitA1:cats.kernel.PartialOrder[A1]):cats.kernel.PartialOrder[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple2", "tail" : "(A0: Hash[A0], A1: Hash[A1]): Hash[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple2[A0,A1](implicitA0:cats.kernel.Hash[A0],implicitA1:cats.kernel.Hash[A1]):cats.kernel.Hash[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple2", "tail" : "(A0: Group[A0], A1: Group[A1]): Group[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple2[A0,A1](implicitA0:cats.kernel.Group[A0],implicitA1:cats.kernel.Group[A1]):cats.kernel.Group[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple2", "tail" : "(A0: CommutativeMonoid[A0], A1: CommutativeMonoid[A1]): CommutativeMonoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeMonoid[A0],implicitA1:cats.kernel.CommutativeMonoid[A1]):cats.kernel.CommutativeMonoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple2", "tail" : "(A0: Semilattice[A0], A1: Semilattice[A1]): Semilattice[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple2[A0,A1](implicitA0:cats.kernel.Semilattice[A0],implicitA1:cats.kernel.Semilattice[A1]):cats.kernel.Semilattice[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdPartialOrderForTuple1", "tail" : "(A0: PartialOrder[A0]): PartialOrder[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdPartialOrderForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdPartialOrderForTuple1[A0](implicitA0:cats.kernel.PartialOrder[A0]):cats.kernel.PartialOrder[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdHashForTuple1", "tail" : "(A0: Hash[A0]): Hash[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdHashForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdHashForTuple1[A0](implicitA0:cats.kernel.Hash[A0]):cats.kernel.Hash[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdGroupForTuple1", "tail" : "(A0: Group[A0]): Group[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdGroupForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForTuple1[A0](implicitA0:cats.kernel.Group[A0]):cats.kernel.Group[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeMonoidForTuple1", "tail" : "(A0: CommutativeMonoid[A0]): CommutativeMonoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdCommutativeMonoidForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeMonoidForTuple1[A0](implicitA0:cats.kernel.CommutativeMonoid[A0]):cats.kernel.CommutativeMonoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemilatticeForTuple1", "tail" : "(A0: Semilattice[A0]): Semilattice[(A0)]", "member" : "cats.kernel.instances.TupleInstances1.catsKernelStdSemilatticeForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemilatticeForTuple1[A0](implicitA0:cats.kernel.Semilattice[A0]):cats.kernel.Semilattice[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple22", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20], A21: Monoid[A21]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20],implicitA21:cats.kernel.Monoid[A21]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple22", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20], A21: CommutativeSemigroup[A21]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20],implicitA21:cats.kernel.CommutativeSemigroup[A21]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple22", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20], A21: Band[A21]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20],implicitA21:cats.kernel.Band[A21]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple21", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19], A20: Monoid[A20]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19],implicitA20:cats.kernel.Monoid[A20]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple21", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19], A20: CommutativeSemigroup[A20]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19],implicitA20:cats.kernel.CommutativeSemigroup[A20]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple21", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19], A20: Band[A20]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19],implicitA20:cats.kernel.Band[A20]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple20", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18], A19: Monoid[A19]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18],implicitA19:cats.kernel.Monoid[A19]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple20", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18], A19: CommutativeSemigroup[A19]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18],implicitA19:cats.kernel.CommutativeSemigroup[A19]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple20", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18], A19: Band[A19]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18],implicitA19:cats.kernel.Band[A19]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple19", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17], A18: Monoid[A18]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17],implicitA18:cats.kernel.Monoid[A18]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple19", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17], A18: CommutativeSemigroup[A18]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17],implicitA18:cats.kernel.CommutativeSemigroup[A18]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple19", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17], A18: Band[A18]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17],implicitA18:cats.kernel.Band[A18]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple18", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16], A17: Monoid[A17]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16],implicitA17:cats.kernel.Monoid[A17]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple18", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16], A17: CommutativeSemigroup[A17]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16],implicitA17:cats.kernel.CommutativeSemigroup[A17]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple18", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16], A17: Band[A17]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16],implicitA17:cats.kernel.Band[A17]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple17", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15], A16: Monoid[A16]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15],implicitA16:cats.kernel.Monoid[A16]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple17", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15], A16: CommutativeSemigroup[A16]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15],implicitA16:cats.kernel.CommutativeSemigroup[A16]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple17", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15], A16: Band[A16]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15],implicitA16:cats.kernel.Band[A16]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple16", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14], A15: Monoid[A15]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14],implicitA15:cats.kernel.Monoid[A15]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple16", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14], A15: CommutativeSemigroup[A15]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14],implicitA15:cats.kernel.CommutativeSemigroup[A15]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple16", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14], A15: Band[A15]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14],implicitA15:cats.kernel.Band[A15]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple15", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13], A14: Monoid[A14]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13],implicitA14:cats.kernel.Monoid[A14]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple15", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13], A14: CommutativeSemigroup[A14]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13],implicitA14:cats.kernel.CommutativeSemigroup[A14]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple15", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13], A14: Band[A14]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13],implicitA14:cats.kernel.Band[A14]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple14", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12], A13: Monoid[A13]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12],implicitA13:cats.kernel.Monoid[A13]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple14", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12], A13: CommutativeSemigroup[A13]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12],implicitA13:cats.kernel.CommutativeSemigroup[A13]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple14", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12], A13: Band[A13]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12],implicitA13:cats.kernel.Band[A13]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple13", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11], A12: Monoid[A12]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11],implicitA12:cats.kernel.Monoid[A12]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple13", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11], A12: CommutativeSemigroup[A12]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11],implicitA12:cats.kernel.CommutativeSemigroup[A12]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple13", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11], A12: Band[A12]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11],implicitA12:cats.kernel.Band[A12]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple12", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10], A11: Monoid[A11]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10],implicitA11:cats.kernel.Monoid[A11]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple12", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10], A11: CommutativeSemigroup[A11]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10],implicitA11:cats.kernel.CommutativeSemigroup[A11]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple12", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10], A11: Band[A11]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10],implicitA11:cats.kernel.Band[A11]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple11", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9], A10: Monoid[A10]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9],implicitA10:cats.kernel.Monoid[A10]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple11", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9], A10: CommutativeSemigroup[A10]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9],implicitA10:cats.kernel.CommutativeSemigroup[A10]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple11", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9], A10: Band[A10]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9],implicitA10:cats.kernel.Band[A10]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple10", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8], A9: Monoid[A9]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8],implicitA9:cats.kernel.Monoid[A9]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple10", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8], A9: CommutativeSemigroup[A9]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8],implicitA9:cats.kernel.CommutativeSemigroup[A9]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple10", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8], A9: Band[A9]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8],implicitA9:cats.kernel.Band[A9]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple9", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7], A8: Monoid[A8]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7],implicitA8:cats.kernel.Monoid[A8]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple9", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7], A8: CommutativeSemigroup[A8]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7],implicitA8:cats.kernel.CommutativeSemigroup[A8]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple9", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7], A8: Band[A8]): Band[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7],implicitA8:cats.kernel.Band[A8]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple8", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6], A7: Monoid[A7]): Monoid[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6],implicitA7:cats.kernel.Monoid[A7]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple8", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6], A7: CommutativeSemigroup[A7]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6],implicitA7:cats.kernel.CommutativeSemigroup[A7]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple8", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6], A7: Band[A7]): Band[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6],implicitA7:cats.kernel.Band[A7]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple7", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5], A6: Monoid[A6]): Monoid[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5],implicitA6:cats.kernel.Monoid[A6]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple7", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5], A6: CommutativeSemigroup[A6]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5],implicitA6:cats.kernel.CommutativeSemigroup[A6]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple7", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5], A6: Band[A6]): Band[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5],implicitA6:cats.kernel.Band[A6]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple6", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4], A5: Monoid[A5]): Monoid[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4],implicitA5:cats.kernel.Monoid[A5]):cats.kernel.Monoid[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple6", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4], A5: CommutativeSemigroup[A5]): CommutativeSemigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4],implicitA5:cats.kernel.CommutativeSemigroup[A5]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple6", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4], A5: Band[A5]): Band[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4],implicitA5:cats.kernel.Band[A5]):cats.kernel.Band[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple5", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3], A4: Monoid[A4]): Monoid[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3],implicitA4:cats.kernel.Monoid[A4]):cats.kernel.Monoid[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple5", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3], A4: CommutativeSemigroup[A4]): CommutativeSemigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3],implicitA4:cats.kernel.CommutativeSemigroup[A4]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple5", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3], A4: Band[A4]): Band[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3],implicitA4:cats.kernel.Band[A4]):cats.kernel.Band[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple4", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2], A3: Monoid[A3]): Monoid[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2],implicitA3:cats.kernel.Monoid[A3]):cats.kernel.Monoid[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple4", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2], A3: CommutativeSemigroup[A3]): CommutativeSemigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2],implicitA3:cats.kernel.CommutativeSemigroup[A3]):cats.kernel.CommutativeSemigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple4", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2], A3: Band[A3]): Band[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2],implicitA3:cats.kernel.Band[A3]):cats.kernel.Band[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple3", "tail" : "(A0: Monoid[A0], A1: Monoid[A1], A2: Monoid[A2]): Monoid[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple3[A0,A1,A2](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1],implicitA2:cats.kernel.Monoid[A2]):cats.kernel.Monoid[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple3", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1], A2: CommutativeSemigroup[A2]): CommutativeSemigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1],implicitA2:cats.kernel.CommutativeSemigroup[A2]):cats.kernel.CommutativeSemigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple3", "tail" : "(A0: Band[A0], A1: Band[A1], A2: Band[A2]): Band[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple3[A0,A1,A2](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1],implicitA2:cats.kernel.Band[A2]):cats.kernel.Band[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple2", "tail" : "(A0: Monoid[A0], A1: Monoid[A1]): Monoid[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple2[A0,A1](implicitA0:cats.kernel.Monoid[A0],implicitA1:cats.kernel.Monoid[A1]):cats.kernel.Monoid[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple2", "tail" : "(A0: CommutativeSemigroup[A0], A1: CommutativeSemigroup[A1]): CommutativeSemigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.CommutativeSemigroup[A0],implicitA1:cats.kernel.CommutativeSemigroup[A1]):cats.kernel.CommutativeSemigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple2", "tail" : "(A0: Band[A0], A1: Band[A1]): Band[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple2[A0,A1](implicitA0:cats.kernel.Band[A0],implicitA1:cats.kernel.Band[A1]):cats.kernel.Band[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdMonoidForTuple1", "tail" : "(A0: Monoid[A0]): Monoid[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdMonoidForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdMonoidForTuple1[A0](implicitA0:cats.kernel.Monoid[A0]):cats.kernel.Monoid[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdCommutativeSemigroupForTuple1", "tail" : "(A0: CommutativeSemigroup[A0]): CommutativeSemigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdCommutativeSemigroupForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdCommutativeSemigroupForTuple1[A0](implicitA0:cats.kernel.CommutativeSemigroup[A0]):cats.kernel.CommutativeSemigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdBandForTuple1", "tail" : "(A0: Band[A0]): Band[(A0)]", "member" : "cats.kernel.instances.TupleInstances2.catsKernelStdBandForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdBandForTuple1[A0](implicitA0:cats.kernel.Band[A0]):cats.kernel.Band[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple22", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20], A21: Eq[A21]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20],implicitA21:cats.kernel.Eq[A21]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple22", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20], A21: Semigroup[A21]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple22", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20],implicitA21:cats.kernel.Semigroup[A21]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple21", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19], A20: Eq[A20]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19],implicitA20:cats.kernel.Eq[A20]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple21", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19], A20: Semigroup[A20]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple21", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19],implicitA20:cats.kernel.Semigroup[A20]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple20", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18], A19: Eq[A19]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18],implicitA19:cats.kernel.Eq[A19]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple20", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18], A19: Semigroup[A19]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple20", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18],implicitA19:cats.kernel.Semigroup[A19]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple19", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17], A18: Eq[A18]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17],implicitA18:cats.kernel.Eq[A18]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple19", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17], A18: Semigroup[A18]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple19", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17],implicitA18:cats.kernel.Semigroup[A18]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple18", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16], A17: Eq[A17]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16],implicitA17:cats.kernel.Eq[A17]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple18", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16], A17: Semigroup[A17]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple18", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16],implicitA17:cats.kernel.Semigroup[A17]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple17", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15], A16: Eq[A16]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15],implicitA16:cats.kernel.Eq[A16]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple17", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15], A16: Semigroup[A16]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple17", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15],implicitA16:cats.kernel.Semigroup[A16]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple16", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14], A15: Eq[A15]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14],implicitA15:cats.kernel.Eq[A15]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple16", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14], A15: Semigroup[A15]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple16", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14],implicitA15:cats.kernel.Semigroup[A15]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple15", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13], A14: Eq[A14]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13],implicitA14:cats.kernel.Eq[A14]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple15", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13], A14: Semigroup[A14]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple15", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13],implicitA14:cats.kernel.Semigroup[A14]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple14", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12], A13: Eq[A13]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12],implicitA13:cats.kernel.Eq[A13]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple14", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12], A13: Semigroup[A13]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple14", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12],implicitA13:cats.kernel.Semigroup[A13]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple13", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11], A12: Eq[A12]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11],implicitA12:cats.kernel.Eq[A12]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple13", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11], A12: Semigroup[A12]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple13", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11],implicitA12:cats.kernel.Semigroup[A12]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple12", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10], A11: Eq[A11]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10],implicitA11:cats.kernel.Eq[A11]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple12", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10], A11: Semigroup[A11]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple12", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10],implicitA11:cats.kernel.Semigroup[A11]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple11", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9], A10: Eq[A10]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9],implicitA10:cats.kernel.Eq[A10]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple11", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9], A10: Semigroup[A10]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple11", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9],implicitA10:cats.kernel.Semigroup[A10]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple10", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8], A9: Eq[A9]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8],implicitA9:cats.kernel.Eq[A9]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple10", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8], A9: Semigroup[A9]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple10", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8],implicitA9:cats.kernel.Semigroup[A9]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple9", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7], A8: Eq[A8]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7],implicitA8:cats.kernel.Eq[A8]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple9", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7], A8: Semigroup[A8]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple9", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7],implicitA8:cats.kernel.Semigroup[A8]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple8", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6], A7: Eq[A7]): Eq[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6],implicitA7:cats.kernel.Eq[A7]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple8", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6], A7: Semigroup[A7]): Semigroup[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple8", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6],implicitA7:cats.kernel.Semigroup[A7]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple7", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5], A6: Eq[A6]): Eq[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5],implicitA6:cats.kernel.Eq[A6]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple7", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5], A6: Semigroup[A6]): Semigroup[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple7", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple7[A0,A1,A2,A3,A4,A5,A6](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5],implicitA6:cats.kernel.Semigroup[A6]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple6", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4], A5: Eq[A5]): Eq[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4],implicitA5:cats.kernel.Eq[A5]):cats.kernel.Eq[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple6", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4], A5: Semigroup[A5]): Semigroup[(A0, A1, A2, A3, A4, A5)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple6", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple6[A0,A1,A2,A3,A4,A5](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4],implicitA5:cats.kernel.Semigroup[A5]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple5", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3], A4: Eq[A4]): Eq[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3],implicitA4:cats.kernel.Eq[A4]):cats.kernel.Eq[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple5", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3], A4: Semigroup[A4]): Semigroup[(A0, A1, A2, A3, A4)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple5", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple5[A0,A1,A2,A3,A4](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3],implicitA4:cats.kernel.Semigroup[A4]):cats.kernel.Semigroup[(A0,A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple4", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2], A3: Eq[A3]): Eq[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2],implicitA3:cats.kernel.Eq[A3]):cats.kernel.Eq[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple4", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2], A3: Semigroup[A3]): Semigroup[(A0, A1, A2, A3)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple4", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple4[A0,A1,A2,A3](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2],implicitA3:cats.kernel.Semigroup[A3]):cats.kernel.Semigroup[(A0,A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple3", "tail" : "(A0: Eq[A0], A1: Eq[A1], A2: Eq[A2]): Eq[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple3[A0,A1,A2](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1],implicitA2:cats.kernel.Eq[A2]):cats.kernel.Eq[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple3", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1], A2: Semigroup[A2]): Semigroup[(A0, A1, A2)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple3", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple3[A0,A1,A2](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1],implicitA2:cats.kernel.Semigroup[A2]):cats.kernel.Semigroup[(A0,A1,A2)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple2", "tail" : "(A0: Eq[A0], A1: Eq[A1]): Eq[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple2[A0,A1](implicitA0:cats.kernel.Eq[A0],implicitA1:cats.kernel.Eq[A1]):cats.kernel.Eq[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple2", "tail" : "(A0: Semigroup[A0], A1: Semigroup[A1]): Semigroup[(A0, A1)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple2[A0,A1](implicitA0:cats.kernel.Semigroup[A0],implicitA1:cats.kernel.Semigroup[A1]):cats.kernel.Semigroup[(A0,A1)]", "kind" : "implicit def"}, {"label" : "catsKernelStdEqForTuple1", "tail" : "(A0: Eq[A0]): Eq[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdEqForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdEqForTuple1[A0](implicitA0:cats.kernel.Eq[A0]):cats.kernel.Eq[(A0,)]", "kind" : "implicit def"}, {"label" : "catsKernelStdSemigroupForTuple1", "tail" : "(A0: Semigroup[A0]): Semigroup[(A0)]", "member" : "cats.kernel.instances.TupleInstances3.catsKernelStdSemigroupForTuple1", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdSemigroupForTuple1[A0](implicitA0:cats.kernel.Semigroup[A0]):cats.kernel.Semigroup[(A0,)]", "kind" : "implicit def"}, {"label" : "catsStdInstancesForTuple2", "tail" : "(): Traverse[[β$0$](X, β$0$)] with Comonad[[β$1$](X, β$1$)] with Reducible[[β$2$](X, β$2$)]", "member" : "cats.instances.Tuple2Instances.catsStdInstancesForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdInstancesForTuple2[X]:cats.Traverse[[β$0$](X,β$0$)]withcats.Comonad[[β$1$](X,β$1$)]withcats.Reducible[[β$2$](X,β$2$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForTuple2", "tail" : "(aShow: Show[A], bShow: Show[B]): Show[(A, B)]", "member" : "cats.instances.Tuple2Instances.catsStdShowForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForTuple2[A,B](implicitaShow:cats.Show[A],implicitbShow:cats.Show[B]):cats.Show[(A,B)]", "kind" : "implicit def"}, {"label" : "catsStdBitraverseForTuple2", "tail" : ": Bitraverse[Tuple2]", "member" : "cats.instances.Tuple2Instances.catsStdBitraverseForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdBitraverseForTuple2:cats.Bitraverse[Tuple2]", "kind" : "implicit val"}, {"label" : "catsStdCommutativeMonadForTuple2", "tail" : "(MX: CommutativeMonoid[X]): CommutativeMonad[[β$6$](X, β$6$)]", "member" : "cats.instances.Tuple2Instances1.catsStdCommutativeMonadForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdCommutativeMonadForTuple2[X](implicitMX:cats.kernel.CommutativeMonoid[X]):cats.CommutativeMonad[[β$6$](X,β$6$)]", "kind" : "implicit def"}, {"label" : "catsStdCommutativeFlatMapForTuple2", "tail" : "(MX: CommutativeSemigroup[X]): CommutativeFlatMap[[β$8$](X, β$8$)]", "member" : "cats.instances.Tuple2Instances2.catsStdCommutativeFlatMapForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdCommutativeFlatMapForTuple2[X](implicitMX:cats.kernel.CommutativeSemigroup[X]):cats.CommutativeFlatMap[[β$8$](X,β$8$)]", "kind" : "implicit def"}, {"label" : "catsStdMonadForTuple2", "tail" : "(MX: Monoid[X]): Monad[[β$10$](X, β$10$)]", "member" : "cats.instances.Tuple2Instances3.catsStdMonadForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdMonadForTuple2[X](implicitMX:cats.Monoid[X]):cats.Monad[[β$10$](X,β$10$)]", "kind" : "implicit def"}, {"label" : "catsStdFlatMapForTuple2", "tail" : "(SX: Semigroup[X]): FlatMap[[β$12$](X, β$12$)]", "member" : "cats.instances.Tuple2Instances4.catsStdFlatMapForTuple2", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdFlatMapForTuple2[X](implicitSX:cats.Semigroup[X]):cats.FlatMap[[β$12$](X,β$12$)]", "kind" : "implicit def"}, {"label" : "catsStdShowForUnit", "tail" : ": Show[Unit]", "member" : "cats.instances.UnitInstances.catsStdShowForUnit", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForUnit:cats.Show[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdAlgebraForUnit", "tail" : ": BoundedSemilattice[Unit] with CommutativeGroup[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdAlgebraForUnit", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdAlgebraForUnit:cats.kernel.BoundedSemilattice[Unit]withcats.kernel.CommutativeGroup[Unit]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForUnit", "tail" : ": Order[Unit] with Hash[Unit] with LowerBounded[Unit] with UpperBounded[Unit]", "member" : "cats.kernel.instances.UnitInstances.catsKernelStdOrderForUnit", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForUnit:cats.kernel.Order[Unit]withcats.kernel.Hash[Unit]withcats.kernel.LowerBounded[Unit]withcats.kernel.UpperBounded[Unit]", "kind" : "implicit val"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean] with Hash[Boolean] with LowerBounded[Boolean] with UpperBounded[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]withcats.kernel.Hash[Boolean]withcats.kernel.LowerBounded[Boolean]withcats.kernel.UpperBounded[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double] with Hash[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]withcats.kernel.Hash[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float] with Hash[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]withcats.kernel.Hash[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForShort", "tail" : ": Show[Short]", "member" : "cats.instances.ShortInstances.catsStdShowForShort", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForShort:cats.Show[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForShort", "tail" : ": CommutativeGroup[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdGroupForShort", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForShort:cats.kernel.CommutativeGroup[Short]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForShort", "tail" : ": Order[Short] with Hash[Short] with LowerBounded[Short] with UpperBounded[Short]", "member" : "cats.kernel.instances.ShortInstances.catsKernelStdOrderForShort", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForShort:cats.kernel.Order[Short]withcats.kernel.Hash[Short]withcats.kernel.LowerBounded[Short]withcats.kernel.UpperBounded[Short]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long] with Hash[Long] with LowerBounded[Long] with UpperBounded[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]withcats.kernel.Hash[Long]withcats.kernel.LowerBounded[Long]withcats.kernel.UpperBounded[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForByte", "tail" : ": Show[Byte]", "member" : "cats.instances.ByteInstances.catsStdShowForByte", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForByte:cats.Show[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForByte", "tail" : ": CommutativeGroup[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdGroupForByte", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForByte:cats.kernel.CommutativeGroup[Byte]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForByte", "tail" : ": Order[Byte] with Hash[Byte] with LowerBounded[Byte] with UpperBounded[Byte]", "member" : "cats.kernel.instances.ByteInstances.catsKernelStdOrderForByte", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForByte:cats.kernel.Order[Byte]withcats.kernel.Hash[Byte]withcats.kernel.LowerBounded[Byte]withcats.kernel.UpperBounded[Byte]", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int] with Hash[Int] with LowerBounded[Int] with UpperBounded[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]withcats.kernel.Hash[Int]withcats.kernel.LowerBounded[Int]withcats.kernel.UpperBounded[Int]", "kind" : "implicit val"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "checkAll", "tail" : "(name: String, ruleSet: RuleSet)(config: PropertyCheckConfiguration, prettifier: Prettifier, pos: Position): Unit", "member" : "org.typelevel.discipline.scalatest.FunSuiteDiscipline.checkAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#checkAll(name:String,ruleSet:org.typelevel.discipline.Laws#RuleSet)(implicitconfig:FunSuiteDiscipline.this.PropertyCheckConfiguration,implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "convertConfiguration", "tail" : "(config: PropertyCheckConfiguration): org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "member" : "org.typelevel.discipline.scalatest.Discipline.convertConfiguration", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertConfiguration(config:Discipline.this.PropertyCheckConfiguration):org.scalatestplus.scalacheck.Checkers.PropertyCheckConfiguration", "kind" : "final def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), genAndNameF: (Gen[F], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),genAndNameF:(org.scalacheck.Gen[F],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], genF: Gen[F], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],genF:org.scalacheck.Gen[F],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, nameF: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,nameF:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E, F) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], arbF: Arbitrary[F], shrF: Shrink[F], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,F,ASSERTION](fun:(A,B,C,D,E,F)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitarbF:org.scalacheck.Arbitrary[F],implicitshrF:org.scalacheck.Shrink[F],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), genAndNameE: (Gen[E], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),genAndNameE:(org.scalacheck.Gen[E],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], genE: Gen[E], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],genE:org.scalacheck.Gen[E],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, nameE: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,nameE:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D, E) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], arbE: Arbitrary[E], shrE: Shrink[E], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,E,ASSERTION](fun:(A,B,C,D,E)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitarbE:org.scalacheck.Arbitrary[E],implicitshrE:org.scalacheck.Shrink[E],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), genAndNameD: (Gen[D], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),genAndNameD:(org.scalacheck.Gen[D],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], genD: Gen[D], configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],genD:org.scalacheck.Gen[D],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, nameD: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](nameA:String,nameB:String,nameC:String,nameD:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C, D) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], arbD: Arbitrary[D], shrD: Shrink[D], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,D,ASSERTION](fun:(A,B,C,D)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitarbD:org.scalacheck.Arbitrary[D],implicitshrD:org.scalacheck.Shrink[D],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), genAndNameC: (Gen[C], String), configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),genAndNameC:(org.scalacheck.Gen[C],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], genC: Gen[C], configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],genC:org.scalacheck.Gen[C],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, nameC: String, configParams: PropertyCheckConfigParam*)(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,ASSERTION](nameA:String,nameB:String,nameC:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B, C) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], arbC: Arbitrary[C], shrC: Shrink[C], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,C,ASSERTION](fun:(A,B,C)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitarbC:org.scalacheck.Arbitrary[C],implicitshrC:org.scalacheck.Shrink[C],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), genAndNameB: (Gen[B], String), configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),genAndNameB:(org.scalacheck.Gen[B],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], genB: Gen[B], configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,ASSERTION](genA:org.scalacheck.Gen[A],genB:org.scalacheck.Gen[B],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, nameB: String, configParams: PropertyCheckConfigParam*)(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,ASSERTION](nameA:String,nameB:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A, B) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], arbB: Arbitrary[B], shrB: Shrink[B], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,B,ASSERTION](fun:(A,B)=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitarbB:org.scalacheck.Arbitrary[B],implicitshrB:org.scalacheck.Shrink[B],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genAndNameA: (Gen[A], String), configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,ASSERTION](genAndNameA:(org.scalacheck.Gen[A],String),configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(genA: Gen[A], configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,ASSERTION](genA:org.scalacheck.Gen[A],configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(nameA: String, configParams: PropertyCheckConfigParam*)(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,ASSERTION](nameA:String,configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*)(fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(fun: (A) => ASSERTION)(config: PropertyCheckConfiguration, arbA: Arbitrary[A], shrA: Shrink[A], asserting: CheckerAsserting[ASSERTION], prettifier: Prettifier, pos: Position): Result", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll[A,ASSERTION](fun:A=>ASSERTION)(implicitconfig:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfiguration,implicitarbA:org.scalacheck.Arbitrary[A],implicitshrA:org.scalacheck.Shrink[A],implicitasserting:org.scalatestplus.scalacheck.CheckerAsserting[ASSERTION],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):asserting.Result", "kind" : "def"}, {"label" : "forAll", "tail" : "(configParams: PropertyCheckConfigParam*): ConfiguredPropertyCheck", "member" : "org.scalatestplus.scalacheck.ScalaCheckDrivenPropertyChecks.forAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#forAll(configParams:ScalaCheckDrivenPropertyChecks.this.PropertyCheckConfigParam*):ScalaCheckDrivenPropertyChecks.this.ConfiguredPropertyCheck", "kind" : "def"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "whenever", "tail" : "(condition: Boolean)(fun: => T)(wa: WheneverAsserting[T]): Result", "member" : "org.scalatest.prop.Whenever.whenever", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#whenever[T](condition:Boolean)(fun:=>T)(implicitwa:org.scalatest.enablers.WheneverAsserting[T]):wa.Result", "kind" : "def"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.of", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToRegexWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringShouldWrapper", "member" : "org.scalatest.matchers.should.Matchers.convertToStringShouldWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertToStringShouldWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringShouldWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyShouldWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyShouldWrapper[T]", "member" : "org.scalatest.matchers.should.Matchers.convertToAnyShouldWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertToAnyShouldWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyShouldWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.the", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atMost", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#between[K,V,JMAP[k,v]<:java.util.Map[k,v]](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.between", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#between[E,C[_]](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.no", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.exactly", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#every[K,V,JMAP[k,v]<:java.util.Map[k,v]](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#every[K,V,MAP[k,v]<:scala.collection.Map[k,v]](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.every", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#every[E,C[_]](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.atLeast", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.should.Matchers.all", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.should.Matchers.message", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: => Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.should.Matchers.thrownBy", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneElementOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atMostOneElementOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atMostOneOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderElementsOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#inOrderElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrder", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allElementsOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#allElementsOf[R](elements:collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.should.Matchers.allOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.inOrderOnly", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.should.Matchers.only", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsInOrderAs", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#theSameElementsInOrderAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.should.Matchers.theSameElementsAs", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#theSameElementsAs(xs:collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noElementsOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#noElementsOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.noneOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneElementOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atLeastOneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.atLeastOneOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneElementOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#oneElementOf(elements:collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.should.Matchers.oneOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.should.Matchers.definedAt", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>=", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<=", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.>", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.should.Matchers.<", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.should.Matchers.regex", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.should.Matchers.theSameInstanceAs", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.should.Matchers.an", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.should.Matchers.a", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.should.Matchers.value", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.should.Matchers.key", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.should.Matchers.equal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.should.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.funsuite.AnyFunSuite.toString", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testDataFor", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.styleName", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#styleName:String", "kind" : "final val"}, {"label" : "testsFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testsFor", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#testsFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.run", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTests", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.tags", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.runTest", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.testNames", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.ignore", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "test", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.test", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#test(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerIgnoredTest", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.registerTest", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.markup", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.alert", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.note", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.funsuite.AnyFunSuiteLike.info", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/SlowCron4sLawSuite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "cron4s.testkit.SlowCron4sPropSpec", "shortDescription" : "", "members_class" : [{"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.SlowCron4sPropSpec.generatorDrivenConfig", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#generatorDrivenConfig:SlowCron4sPropSpec.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"member" : "cron4s.testkit.SlowCron4sPropSpec#<init>", "error" : "unsupported entity"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.scalatest.propspec.AnyPropSpec.toString", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#toString():String", "kind" : "def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.propspec.AnyPropSpecLike.testDataFor", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.propspec.AnyPropSpecLike.styleName", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#styleName:String", "kind" : "final val"}, {"label" : "propertiesFor", "tail" : "(unit: Unit): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.propertiesFor", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#propertiesFor(unit:Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.propspec.AnyPropSpecLike.run", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.propspec.AnyPropSpecLike.runTests", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.propspec.AnyPropSpecLike.tags", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.propspec.AnyPropSpecLike.runTest", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.propspec.AnyPropSpecLike.testNames", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#testNames:Set[String]", "kind" : "def"}, {"label" : "ignore", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.ignore", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#ignore(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "property", "tail" : "(testName: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.property", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#property(testName:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.registerIgnoredTest", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: => Any)(pos: Position): Unit", "member" : "org.scalatest.propspec.AnyPropSpecLike.registerTest", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.propspec.AnyPropSpecLike.markup", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.propspec.AnyPropSpecLike.alert", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.propspec.AnyPropSpecLike.note", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.propspec.AnyPropSpecLike.info", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#nestedSuites:IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: => Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: => T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: => Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) => A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) => B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/SlowCron4sPropSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cron4s\/testkit\/SlowCron4sPropSpec.html", "kind" : "class"}, {"name" : "cron4s.testkit.TestSettings", "trait" : "cron4s\/testkit\/TestSettings.html", "kind" : "trait", "members_trait" : [{"label" : "Workers", "tail" : "", "member" : "org.scalatest.prop.Configuration.Workers", "link" : "cron4s\/testkit\/TestSettings.html#WorkersextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "SizeRange", "tail" : "", "member" : "org.scalatest.prop.Configuration.SizeRange", "link" : "cron4s\/testkit\/TestSettings.html#SizeRangeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSize", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSize", "link" : "cron4s\/testkit\/TestSettings.html#MinSizeextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MaxDiscardedFactor", "tail" : "", "member" : "org.scalatest.prop.Configuration.MaxDiscardedFactor", "link" : "cron4s\/testkit\/TestSettings.html#MaxDiscardedFactorextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "MinSuccessful", "tail" : "", "member" : "org.scalatest.prop.Configuration.MinSuccessful", "link" : "cron4s\/testkit\/TestSettings.html#MinSuccessfulextendsConfiguration.this.PropertyCheckConfigParamwithProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfigParam", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfigParam", "link" : "cron4s\/testkit\/TestSettings.html#PropertyCheckConfigParamextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/TestSettings.html#PropertyCheckConfigurationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PropertyCheckConfiguration", "tail" : "", "member" : "org.scalatest.prop.Configuration.PropertyCheckConfiguration", "link" : "cron4s\/testkit\/TestSettings.html#PropertyCheckConfiguration", "kind" : "object"}, {"label" : "slowPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.slowPropertyCheckConfig", "link" : "cron4s\/testkit\/TestSettings.html#slowPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "defaultPropertyCheckConfig", "tail" : ": PropertyCheckConfiguration", "member" : "cron4s.testkit.TestSettings.defaultPropertyCheckConfig", "link" : "cron4s\/testkit\/TestSettings.html#defaultPropertyCheckConfig:TestSettings.this.PropertyCheckConfiguration", "kind" : "lazy val"}, {"label" : "generatorDrivenConfig", "tail" : ": PropertyCheckConfiguration", "member" : "org.scalatest.prop.Configuration.generatorDrivenConfig", "link" : "cron4s\/testkit\/TestSettings.html#generatorDrivenConfig:Configuration.this.PropertyCheckConfiguration", "kind" : "implicit val"}, {"label" : "getParameter", "tail" : "(configParams: Seq[PropertyCheckConfigParam], config: PropertyCheckConfiguration): Parameter", "member" : "org.scalatest.prop.Configuration.getParameter", "link" : "cron4s\/testkit\/TestSettings.html#getParameter(configParams:Seq[org.scalatest.prop.Configuration#PropertyCheckConfigParam],config:Configuration.this.PropertyCheckConfiguration):org.scalatest.prop.Configuration.Parameter", "kind" : "def"}, {"label" : "workers", "tail" : "(value: PosInt): Workers", "member" : "org.scalatest.prop.Configuration.workers", "link" : "cron4s\/testkit\/TestSettings.html#workers(value:org.scalactic.anyvals.PosInt):Configuration.this.Workers", "kind" : "def"}, {"label" : "sizeRange", "tail" : "(value: PosZInt): SizeRange", "member" : "org.scalatest.prop.Configuration.sizeRange", "link" : "cron4s\/testkit\/TestSettings.html#sizeRange(value:org.scalactic.anyvals.PosZInt):Configuration.this.SizeRange", "kind" : "def"}, {"label" : "minSize", "tail" : "(value: PosZInt): MinSize", "member" : "org.scalatest.prop.Configuration.minSize", "link" : "cron4s\/testkit\/TestSettings.html#minSize(value:org.scalactic.anyvals.PosZInt):Configuration.this.MinSize", "kind" : "def"}, {"label" : "maxDiscardedFactor", "tail" : "(value: PosZDouble): MaxDiscardedFactor", "member" : "org.scalatest.prop.Configuration.maxDiscardedFactor", "link" : "cron4s\/testkit\/TestSettings.html#maxDiscardedFactor(value:org.scalactic.anyvals.PosZDouble):Configuration.this.MaxDiscardedFactor", "kind" : "def"}, {"label" : "minSuccessful", "tail" : "(value: PosInt): MinSuccessful", "member" : "org.scalatest.prop.Configuration.minSuccessful", "link" : "cron4s\/testkit\/TestSettings.html#minSuccessful(value:org.scalactic.anyvals.PosInt):Configuration.this.MinSuccessful", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cron4s\/testkit\/TestSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cron4s\/testkit\/TestSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cron4s\/testkit\/TestSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cron4s\/testkit\/TestSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cron4s\/testkit\/TestSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cron4s\/testkit\/TestSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cron4s\/testkit\/TestSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/TestSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/TestSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cron4s\/testkit\/TestSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cron4s\/testkit\/TestSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cron4s\/testkit\/TestSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cron4s\/testkit\/TestSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cron4s\/testkit\/TestSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "cron4s\/testkit\/TestSettings.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cron4s\/testkit\/TestSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "cron4s\/testkit\/TestSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cron4s\/testkit\/TestSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cron4s\/testkit\/TestSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}]};